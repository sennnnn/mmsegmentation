{"env_info": "sys.platform: linux\nPython: 3.7.10 (default, Feb 26 2021, 18:47:35) [GCC 7.3.0]\nCUDA available: True\nGPU 0,1,2,3,4,5,6,7: Tesla V100-SXM2-32GB\nCUDA_HOME: /mnt/cache/share/polaris/dep/cuda-10.1-cudnn7.6.5\nNVCC: Cuda compilation tools, release 10.1, V10.1.243\nGCC: gcc (GCC) 5.4.0\nPyTorch: 1.8.0\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) Math Kernel Library Version 2020.0.2 Product Build 20200624 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v1.7.0 (Git Hash 7aed236906b1f7a05c0917e5257a1af05e9ff683)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 10.1\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_37,code=compute_37\n  - CuDNN 7.6.3\n  - Magma 2.5.2\n  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=10.1, CUDNN_VERSION=7.6.3, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.8.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, \n\nTorchVision: 0.9.0\nOpenCV: 4.5.1\nMMCV: 1.3.8\nMMCV Compiler: GCC 7.3\nMMCV CUDA Compiler: 10.1\nMMSegmentation: 0.15.0+f48c6a1", "seed": null, "exp_name": "upernet_r50_512x1024_2k_cityscapes.py", "mmseg_version": "0.15.0+f48c6a1", "config": "norm_cfg = dict(type='SyncBN', requires_grad=True)\nmodel = dict(\n    type='EncoderDecoder',\n    pretrained='open-mmlab://resnet50_v1c',\n    backbone=dict(\n        type='ResNetV1c',\n        depth=50,\n        num_stages=4,\n        out_indices=(0, 1, 2, 3),\n        dilations=(1, 1, 1, 1),\n        strides=(1, 2, 2, 2),\n        norm_cfg=dict(type='SyncBN', requires_grad=True),\n        norm_eval=False,\n        style='pytorch',\n        contract_dilation=True,\n        pretrained='open-mmlab://resnet50_v1c'),\n    decode_head=dict(\n        type='UPerHead',\n        in_channels=[256, 512, 1024, 2048],\n        in_index=[0, 1, 2, 3],\n        pool_scales=(1, 2, 3, 6),\n        channels=512,\n        dropout_ratio=0.1,\n        num_classes=19,\n        norm_cfg=dict(type='SyncBN', requires_grad=True),\n        align_corners=False,\n        loss_decode=dict(\n            type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0)),\n    auxiliary_head=dict(\n        type='FCNHead',\n        in_channels=1024,\n        in_index=2,\n        channels=256,\n        num_convs=1,\n        concat_input=False,\n        dropout_ratio=0.1,\n        num_classes=19,\n        norm_cfg=dict(type='SyncBN', requires_grad=True),\n        align_corners=False,\n        loss_decode=dict(\n            type='CrossEntropyLoss', use_sigmoid=False, loss_weight=0.4)),\n    train_cfg=dict(),\n    test_cfg=dict(mode='whole'))\ndataset_type = 'CityscapesDataset'\ndata_root = 'data/cityscapes/'\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ncrop_size = (512, 1024)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations'),\n    dict(type='Resize', img_scale=(2048, 1024), ratio_range=(0.5, 2.0)),\n    dict(type='RandomCrop', crop_size=(512, 1024), cat_max_ratio=0.75),\n    dict(type='RandomFlip', prob=0.5),\n    dict(type='PhotoMetricDistortion'),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='Pad', size=(512, 1024), pad_val=0, seg_pad_val=255),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_semantic_seg'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(2048, 1024),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=2,\n    workers_per_gpu=2,\n    train=dict(\n        type='CityscapesDataset',\n        data_root='data/cityscapes/',\n        img_dir='leftImg8bit/train',\n        ann_dir='gtFine/train',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations'),\n            dict(\n                type='Resize', img_scale=(2048, 1024), ratio_range=(0.5, 2.0)),\n            dict(type='RandomCrop', crop_size=(512, 1024), cat_max_ratio=0.75),\n            dict(type='RandomFlip', prob=0.5),\n            dict(type='PhotoMetricDistortion'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size=(512, 1024), pad_val=0, seg_pad_val=255),\n            dict(type='DefaultFormatBundle'),\n            dict(type='Collect', keys=['img', 'gt_semantic_seg'])\n        ]),\n    val=dict(\n        type='CityscapesDataset',\n        data_root='data/cityscapes/',\n        img_dir='leftImg8bit/val',\n        ann_dir='gtFine/val',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(2048, 1024),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]),\n    test=dict(\n        type='CityscapesDataset',\n        data_root='data/cityscapes/',\n        img_dir='leftImg8bit/val',\n        ann_dir='gtFine/val',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(2048, 1024),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]))\nlog_config = dict(\n    interval=50, hooks=[dict(type='TextLoggerHook', by_epoch=False)])\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = None\nresume_from = None\nworkflow = [('train', 1)]\ncudnn_benchmark = True\noptimizer = dict(type='SGD', lr=0.01, momentum=0.9, weight_decay=0.0005)\noptimizer_config = dict()\nlr_config = dict(policy='poly', power=0.9, min_lr=0.0001, by_epoch=False)\nrunner = dict(type='IterBasedRunner', max_iters=2000)\ncheckpoint_config = dict(by_epoch=False, interval=8000)\nevaluation = dict(interval=8000, metric='mIoU')\nwork_dir = 'work_dirs_1node_8gpu/upernet_r50_512x1024_2k_cityscapes'\ngpu_ids = range(0, 1)\nseed = None\n", "CLASSES": ["road", "sidewalk", "building", "wall", "fence", "pole", "traffic light", "traffic sign", "vegetation", "terrain", "sky", "person", "rider", "car", "truck", "bus", "train", "motorcycle", "bicycle"], "PALETTE": [[128, 64, 128], [244, 35, 232], [70, 70, 70], [102, 102, 156], [190, 153, 153], [153, 153, 153], [250, 170, 30], [220, 220, 0], [107, 142, 35], [152, 251, 152], [70, 130, 180], [220, 20, 60], [255, 0, 0], [0, 0, 142], [0, 0, 70], [0, 60, 100], [0, 80, 100], [0, 0, 230], [119, 11, 32]]}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 0.00978, "memory": 19973, "data_time": 0.03773, "decode.loss_seg": 1.3386, "decode.acc_seg": 57.79315, "aux.loss_seg": 0.75461, "aux.acc_seg": 43.16536, "loss": 2.09321, "time": 1.05548}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 0.00956, "memory": 19973, "data_time": 0.01653, "decode.loss_seg": 0.71063, "decode.acc_seg": 73.91765, "aux.loss_seg": 0.42788, "aux.acc_seg": 66.645, "loss": 1.13851, "time": 0.45653}
{"mode": "train", "epoch": 1, "iter": 150, "lr": 0.00933, "memory": 19973, "data_time": 0.0185, "decode.loss_seg": 0.59287, "decode.acc_seg": 76.97515, "aux.loss_seg": 0.34394, "aux.acc_seg": 71.26449, "loss": 0.93681, "time": 0.47485}
{"mode": "train", "epoch": 2, "iter": 200, "lr": 0.00911, "memory": 19973, "data_time": 0.02416, "decode.loss_seg": 0.51399, "decode.acc_seg": 78.8456, "aux.loss_seg": 0.30429, "aux.acc_seg": 73.26926, "loss": 0.81828, "time": 0.42418}
{"mode": "train", "epoch": 2, "iter": 250, "lr": 0.00888, "memory": 19973, "data_time": 0.01315, "decode.loss_seg": 0.45013, "decode.acc_seg": 80.6418, "aux.loss_seg": 0.27376, "aux.acc_seg": 75.91049, "loss": 0.7239, "time": 0.44183}
{"mode": "train", "epoch": 2, "iter": 300, "lr": 0.00866, "memory": 19973, "data_time": 0.0138, "decode.loss_seg": 0.42508, "decode.acc_seg": 81.33784, "aux.loss_seg": 0.25947, "aux.acc_seg": 76.75978, "loss": 0.68455, "time": 0.46423}
{"mode": "train", "epoch": 2, "iter": 350, "lr": 0.00843, "memory": 19973, "data_time": 0.01811, "decode.loss_seg": 0.39917, "decode.acc_seg": 82.25552, "aux.loss_seg": 0.24938, "aux.acc_seg": 77.30413, "loss": 0.64855, "time": 0.46271}
{"mode": "train", "epoch": 3, "iter": 400, "lr": 0.0082, "memory": 19973, "data_time": 0.02282, "decode.loss_seg": 0.36941, "decode.acc_seg": 82.58393, "aux.loss_seg": 0.22794, "aux.acc_seg": 78.31284, "loss": 0.59735, "time": 0.42908}
{"mode": "train", "epoch": 3, "iter": 450, "lr": 0.00798, "memory": 19973, "data_time": 0.0148, "decode.loss_seg": 0.35567, "decode.acc_seg": 83.53599, "aux.loss_seg": 0.22383, "aux.acc_seg": 79.10884, "loss": 0.57951, "time": 0.46205}
{"mode": "train", "epoch": 3, "iter": 500, "lr": 0.00775, "memory": 19973, "data_time": 0.0133, "decode.loss_seg": 0.35567, "decode.acc_seg": 82.47155, "aux.loss_seg": 0.22331, "aux.acc_seg": 77.8953, "loss": 0.57898, "time": 0.42149}
{"mode": "train", "epoch": 3, "iter": 550, "lr": 0.00752, "memory": 19973, "data_time": 0.01324, "decode.loss_seg": 0.35449, "decode.acc_seg": 82.88596, "aux.loss_seg": 0.22168, "aux.acc_seg": 78.51477, "loss": 0.57617, "time": 0.48161}
{"mode": "train", "epoch": 4, "iter": 600, "lr": 0.00729, "memory": 19973, "data_time": 0.02159, "decode.loss_seg": 0.32519, "decode.acc_seg": 83.63955, "aux.loss_seg": 0.20448, "aux.acc_seg": 79.56803, "loss": 0.52967, "time": 0.46156}
{"mode": "train", "epoch": 4, "iter": 650, "lr": 0.00706, "memory": 19973, "data_time": 0.01329, "decode.loss_seg": 0.31653, "decode.acc_seg": 84.34209, "aux.loss_seg": 0.20025, "aux.acc_seg": 80.22236, "loss": 0.51678, "time": 0.44711}
{"mode": "train", "epoch": 4, "iter": 700, "lr": 0.00682, "memory": 19973, "data_time": 0.0144, "decode.loss_seg": 0.29846, "decode.acc_seg": 84.80905, "aux.loss_seg": 0.18993, "aux.acc_seg": 80.96164, "loss": 0.4884, "time": 0.44546}
{"mode": "train", "epoch": 5, "iter": 750, "lr": 0.00659, "memory": 19973, "data_time": 0.02441, "decode.loss_seg": 0.31517, "decode.acc_seg": 84.256, "aux.loss_seg": 0.19808, "aux.acc_seg": 80.04477, "loss": 0.51325, "time": 0.50952}
{"mode": "train", "epoch": 5, "iter": 800, "lr": 0.00636, "memory": 19973, "data_time": 0.01151, "decode.loss_seg": 0.31242, "decode.acc_seg": 84.16253, "aux.loss_seg": 0.19515, "aux.acc_seg": 80.15816, "loss": 0.50757, "time": 0.45802}
{"mode": "train", "epoch": 5, "iter": 850, "lr": 0.00612, "memory": 19973, "data_time": 0.01418, "decode.loss_seg": 0.28993, "decode.acc_seg": 84.96364, "aux.loss_seg": 0.18392, "aux.acc_seg": 80.95884, "loss": 0.47386, "time": 0.45075}
{"mode": "train", "epoch": 5, "iter": 900, "lr": 0.00589, "memory": 19973, "data_time": 0.01264, "decode.loss_seg": 0.2984, "decode.acc_seg": 84.53358, "aux.loss_seg": 0.18656, "aux.acc_seg": 80.67835, "loss": 0.48496, "time": 0.44825}
{"mode": "train", "epoch": 6, "iter": 950, "lr": 0.00565, "memory": 19973, "data_time": 0.02384, "decode.loss_seg": 0.30312, "decode.acc_seg": 84.18924, "aux.loss_seg": 0.19213, "aux.acc_seg": 80.08815, "loss": 0.49526, "time": 0.47253}
{"mode": "train", "epoch": 6, "iter": 1000, "lr": 0.00541, "memory": 19973, "data_time": 0.01453, "decode.loss_seg": 0.27551, "decode.acc_seg": 84.69561, "aux.loss_seg": 0.1766, "aux.acc_seg": 80.7886, "loss": 0.45212, "time": 0.45488}
{"mode": "train", "epoch": 6, "iter": 1050, "lr": 0.00517, "memory": 19973, "data_time": 0.01675, "decode.loss_seg": 0.27022, "decode.acc_seg": 86.13655, "aux.loss_seg": 0.17351, "aux.acc_seg": 82.35225, "loss": 0.44372, "time": 0.50965}
{"mode": "train", "epoch": 6, "iter": 1100, "lr": 0.00493, "memory": 19973, "data_time": 0.01239, "decode.loss_seg": 0.28066, "decode.acc_seg": 85.2311, "aux.loss_seg": 0.17947, "aux.acc_seg": 81.44099, "loss": 0.46012, "time": 0.45496}
{"mode": "train", "epoch": 7, "iter": 1150, "lr": 0.00469, "memory": 19973, "data_time": 0.04257, "decode.loss_seg": 0.27299, "decode.acc_seg": 85.54733, "aux.loss_seg": 0.17169, "aux.acc_seg": 81.76333, "loss": 0.44468, "time": 0.56657}
{"mode": "train", "epoch": 7, "iter": 1200, "lr": 0.00444, "memory": 19973, "data_time": 0.01374, "decode.loss_seg": 0.26304, "decode.acc_seg": 86.01004, "aux.loss_seg": 0.1693, "aux.acc_seg": 82.11974, "loss": 0.43234, "time": 0.41782}
{"mode": "train", "epoch": 7, "iter": 1250, "lr": 0.0042, "memory": 19973, "data_time": 0.01486, "decode.loss_seg": 0.2638, "decode.acc_seg": 85.44322, "aux.loss_seg": 0.16941, "aux.acc_seg": 81.56936, "loss": 0.43321, "time": 0.43734}
{"mode": "train", "epoch": 7, "iter": 1300, "lr": 0.00395, "memory": 19973, "data_time": 0.01332, "decode.loss_seg": 0.27497, "decode.acc_seg": 85.2729, "aux.loss_seg": 0.17951, "aux.acc_seg": 81.25757, "loss": 0.45448, "time": 0.48268}
{"mode": "train", "epoch": 8, "iter": 1350, "lr": 0.00371, "memory": 19973, "data_time": 0.02169, "decode.loss_seg": 0.26031, "decode.acc_seg": 85.87372, "aux.loss_seg": 0.16438, "aux.acc_seg": 82.11622, "loss": 0.42469, "time": 0.44563}
{"mode": "train", "epoch": 8, "iter": 1400, "lr": 0.00346, "memory": 19973, "data_time": 0.01586, "decode.loss_seg": 0.26218, "decode.acc_seg": 85.2432, "aux.loss_seg": 0.16615, "aux.acc_seg": 81.60409, "loss": 0.42833, "time": 0.44801}
{"mode": "train", "epoch": 8, "iter": 1450, "lr": 0.0032, "memory": 19973, "data_time": 0.01223, "decode.loss_seg": 0.25861, "decode.acc_seg": 85.26431, "aux.loss_seg": 0.16437, "aux.acc_seg": 81.55925, "loss": 0.42298, "time": 0.48857}
{"mode": "train", "epoch": 9, "iter": 1500, "lr": 0.00295, "memory": 19973, "data_time": 0.02594, "decode.loss_seg": 0.23977, "decode.acc_seg": 86.5091, "aux.loss_seg": 0.15048, "aux.acc_seg": 83.18681, "loss": 0.39025, "time": 0.42757}
{"mode": "train", "epoch": 9, "iter": 1550, "lr": 0.00269, "memory": 19973, "data_time": 0.01186, "decode.loss_seg": 0.26659, "decode.acc_seg": 85.01738, "aux.loss_seg": 0.17118, "aux.acc_seg": 81.17074, "loss": 0.43777, "time": 0.40724}
{"mode": "train", "epoch": 9, "iter": 1600, "lr": 0.00243, "memory": 19973, "data_time": 0.01155, "decode.loss_seg": 0.24803, "decode.acc_seg": 86.20653, "aux.loss_seg": 0.15723, "aux.acc_seg": 82.58825, "loss": 0.40525, "time": 0.47564}
{"mode": "train", "epoch": 9, "iter": 1650, "lr": 0.00217, "memory": 19973, "data_time": 0.01979, "decode.loss_seg": 0.24469, "decode.acc_seg": 86.24854, "aux.loss_seg": 0.16187, "aux.acc_seg": 82.19703, "loss": 0.40656, "time": 0.4486}
{"mode": "train", "epoch": 10, "iter": 1700, "lr": 0.0019, "memory": 19973, "data_time": 0.02294, "decode.loss_seg": 0.24304, "decode.acc_seg": 86.22902, "aux.loss_seg": 0.1602, "aux.acc_seg": 82.34533, "loss": 0.40324, "time": 0.42991}
{"mode": "train", "epoch": 10, "iter": 1750, "lr": 0.00163, "memory": 19973, "data_time": 0.01187, "decode.loss_seg": 0.24888, "decode.acc_seg": 86.2939, "aux.loss_seg": 0.16165, "aux.acc_seg": 82.39803, "loss": 0.41052, "time": 0.45997}
{"mode": "train", "epoch": 10, "iter": 1800, "lr": 0.00135, "memory": 19973, "data_time": 0.01646, "decode.loss_seg": 0.23574, "decode.acc_seg": 86.02704, "aux.loss_seg": 0.15437, "aux.acc_seg": 82.28942, "loss": 0.39011, "time": 0.43372}
{"mode": "train", "epoch": 10, "iter": 1850, "lr": 0.00107, "memory": 19973, "data_time": 0.01449, "decode.loss_seg": 0.24491, "decode.acc_seg": 86.15995, "aux.loss_seg": 0.15626, "aux.acc_seg": 82.52147, "loss": 0.40117, "time": 0.47372}
{"mode": "train", "epoch": 11, "iter": 1900, "lr": 0.00077, "memory": 19973, "data_time": 0.0241, "decode.loss_seg": 0.24031, "decode.acc_seg": 86.65272, "aux.loss_seg": 0.15706, "aux.acc_seg": 82.82982, "loss": 0.39737, "time": 0.4159}
{"mode": "train", "epoch": 11, "iter": 1950, "lr": 0.00046, "memory": 19973, "data_time": 0.01157, "decode.loss_seg": 0.23171, "decode.acc_seg": 86.59787, "aux.loss_seg": 0.15412, "aux.acc_seg": 82.688, "loss": 0.38583, "time": 0.40769}
{"mode": "train", "epoch": 11, "iter": 2000, "lr": 0.00011, "memory": 19973, "data_time": 0.02815, "decode.loss_seg": 0.2337, "decode.acc_seg": 86.93005, "aux.loss_seg": 0.15192, "aux.acc_seg": 83.23129, "loss": 0.38562, "time": 0.48149}
