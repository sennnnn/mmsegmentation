{"env_info": "sys.platform: linux\nPython: 3.7.10 (default, Feb 26 2021, 18:47:35) [GCC 7.3.0]\nCUDA available: True\nGPU 0,1,2,3,4,5,6,7: Tesla V100-SXM2-32GB\nCUDA_HOME: /mnt/cache/share/polaris/dep/cuda-10.1-cudnn7.6.5\nNVCC: Cuda compilation tools, release 10.1, V10.1.243\nGCC: gcc (GCC) 5.4.0\nPyTorch: 1.8.0\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) Math Kernel Library Version 2020.0.2 Product Build 20200624 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v1.7.0 (Git Hash 7aed236906b1f7a05c0917e5257a1af05e9ff683)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 10.1\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_37,code=compute_37\n  - CuDNN 7.6.3\n  - Magma 2.5.2\n  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=10.1, CUDNN_VERSION=7.6.3, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.8.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, \n\nTorchVision: 0.9.0\nOpenCV: 4.5.1\nMMCV: 1.3.8\nMMCV Compiler: GCC 7.3\nMMCV CUDA Compiler: 10.1\nMMSegmentation: 0.15.0+f48c6a1", "seed": null, "exp_name": "fcn_r50-d8_512x1024_2k_dummy_cityscapes.py", "mmseg_version": "0.15.0+f48c6a1", "config": "norm_cfg = dict(type='SyncBN', requires_grad=True)\nmodel = dict(\n    type='EncoderDecoder',\n    pretrained='open-mmlab://resnet50_v1c',\n    backbone=dict(\n        type='ResNetV1c',\n        depth=50,\n        num_stages=4,\n        out_indices=(0, 1, 2, 3),\n        dilations=(1, 1, 2, 4),\n        strides=(1, 2, 1, 1),\n        norm_cfg=dict(type='SyncBN', requires_grad=True),\n        norm_eval=False,\n        style='pytorch',\n        contract_dilation=True,\n        pretrained='open-mmlab://resnet50_v1c'),\n    decode_head=dict(\n        type='FCNHead',\n        in_channels=2048,\n        in_index=3,\n        channels=512,\n        num_convs=2,\n        concat_input=True,\n        dropout_ratio=0.1,\n        num_classes=19,\n        norm_cfg=dict(type='SyncBN', requires_grad=True),\n        align_corners=False,\n        loss_decode=dict(\n            type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0)),\n    auxiliary_head=dict(\n        type='FCNHead',\n        in_channels=1024,\n        in_index=2,\n        channels=256,\n        num_convs=1,\n        concat_input=False,\n        dropout_ratio=0.1,\n        num_classes=19,\n        norm_cfg=dict(type='SyncBN', requires_grad=True),\n        align_corners=False,\n        loss_decode=dict(\n            type='CrossEntropyLoss', use_sigmoid=False, loss_weight=0.4)),\n    train_cfg=dict(),\n    test_cfg=dict(mode='whole'))\ndataset_type = 'DummyCityscapes'\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ncrop_size = (512, 1024)\ntrain_pipeline = [\n    dict(type='Resize', img_scale=(2048, 1024), ratio_range=(0.5, 2.0)),\n    dict(type='RandomCrop', crop_size=(512, 1024), cat_max_ratio=0.75),\n    dict(type='RandomFlip', prob=0.5),\n    dict(type='PhotoMetricDistortion'),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_semantic_seg'])\n]\ntest_pipeline = [\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(2048, 1024),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=2,\n    workers_per_gpu=2,\n    train=dict(\n        type='DummyCityscapes',\n        pipeline=[\n            dict(\n                type='Resize', img_scale=(2048, 1024), ratio_range=(0.5, 2.0)),\n            dict(type='RandomCrop', crop_size=(512, 1024), cat_max_ratio=0.75),\n            dict(type='RandomFlip', prob=0.5),\n            dict(type='PhotoMetricDistortion'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='DefaultFormatBundle'),\n            dict(type='Collect', keys=['img', 'gt_semantic_seg'])\n        ]),\n    val=dict(\n        type='DummyCityscapes',\n        pipeline=[\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(2048, 1024),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]),\n    test=dict(\n        type='DummyCityscapes',\n        pipeline=[\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(2048, 1024),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]))\nlog_config = dict(\n    interval=50, hooks=[dict(type='TextLoggerHook', by_epoch=False)])\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = None\nresume_from = None\nworkflow = [('train', 1)]\ncudnn_benchmark = True\noptimizer = dict(type='SGD', lr=0.01, momentum=0.9, weight_decay=0.0005)\noptimizer_config = dict()\nlr_config = dict(policy='poly', power=0.9, min_lr=0.0001, by_epoch=False)\nrunner = dict(type='IterBasedRunner', max_iters=2000)\ncheckpoint_config = dict(by_epoch=False, interval=8000)\nevaluation = dict(interval=8000, metric='mIoU')\nwork_dir = 'work_dirs_1node_8gpu/fcn_r50-d8_512x1024_2k_dummy_cityscapes'\ngpu_ids = range(0, 1)\nseed = None\n", "CLASSES": ["road", "sidewalk", "building", "wall", "fence", "pole", "traffic light", "traffic sign", "vegetation", "terrain", "sky", "person", "rider", "car", "truck", "bus", "train", "motorcycle", "bicycle"], "PALETTE": [[128, 64, 128], [244, 35, 232], [70, 70, 70], [102, 102, 156], [190, 153, 153], [153, 153, 153], [250, 170, 30], [220, 220, 0], [107, 142, 35], [152, 251, 152], [70, 130, 180], [220, 20, 60], [255, 0, 0], [0, 0, 142], [0, 0, 70], [0, 60, 100], [0, 80, 100], [0, 0, 230], [119, 11, 32]]}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 0.00978, "memory": 18774, "data_time": 0.04868, "decode.loss_seg": 2.95073, "decode.acc_seg": 5.26159, "aux.loss_seg": 1.17904, "aux.acc_seg": 5.26503, "loss": 4.12977, "time": 0.94345}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 0.00956, "memory": 18774, "data_time": 0.01775, "decode.loss_seg": 2.94899, "decode.acc_seg": 5.27033, "aux.loss_seg": 1.17888, "aux.acc_seg": 5.26588, "loss": 4.12788, "time": 0.49285}
{"mode": "train", "epoch": 1, "iter": 150, "lr": 0.00933, "memory": 18774, "data_time": 0.01898, "decode.loss_seg": 2.94832, "decode.acc_seg": 5.27274, "aux.loss_seg": 1.1788, "aux.acc_seg": 5.2624, "loss": 4.12711, "time": 0.46111}
{"mode": "train", "epoch": 2, "iter": 200, "lr": 0.00911, "memory": 18774, "data_time": 0.02888, "decode.loss_seg": 2.94781, "decode.acc_seg": 5.26015, "aux.loss_seg": 1.17871, "aux.acc_seg": 5.26121, "loss": 4.12653, "time": 0.51445}
{"mode": "train", "epoch": 2, "iter": 250, "lr": 0.00888, "memory": 18774, "data_time": 0.02092, "decode.loss_seg": 2.94736, "decode.acc_seg": 5.26581, "aux.loss_seg": 1.17865, "aux.acc_seg": 5.2605, "loss": 4.12601, "time": 0.52397}
{"mode": "train", "epoch": 2, "iter": 300, "lr": 0.00866, "memory": 18774, "data_time": 0.03013, "decode.loss_seg": 2.94701, "decode.acc_seg": 5.26516, "aux.loss_seg": 1.17859, "aux.acc_seg": 5.26001, "loss": 4.12559, "time": 0.51807}
{"mode": "train", "epoch": 2, "iter": 350, "lr": 0.00843, "memory": 18774, "data_time": 0.02327, "decode.loss_seg": 2.94669, "decode.acc_seg": 5.26496, "aux.loss_seg": 1.17853, "aux.acc_seg": 5.26589, "loss": 4.12522, "time": 0.50882}
{"mode": "train", "epoch": 3, "iter": 400, "lr": 0.0082, "memory": 18774, "data_time": 0.0248, "decode.loss_seg": 2.94642, "decode.acc_seg": 5.26251, "aux.loss_seg": 1.17849, "aux.acc_seg": 5.26587, "loss": 4.12491, "time": 0.51799}
{"mode": "train", "epoch": 3, "iter": 450, "lr": 0.00798, "memory": 18774, "data_time": 0.01629, "decode.loss_seg": 2.94616, "decode.acc_seg": 5.26627, "aux.loss_seg": 1.17844, "aux.acc_seg": 5.26425, "loss": 4.1246, "time": 0.46406}
{"mode": "train", "epoch": 3, "iter": 500, "lr": 0.00775, "memory": 18774, "data_time": 0.0159, "decode.loss_seg": 2.9459, "decode.acc_seg": 5.26175, "aux.loss_seg": 1.17839, "aux.acc_seg": 5.26391, "loss": 4.1243, "time": 0.49897}
{"mode": "train", "epoch": 3, "iter": 550, "lr": 0.00752, "memory": 18774, "data_time": 0.01875, "decode.loss_seg": 2.94567, "decode.acc_seg": 5.26768, "aux.loss_seg": 1.17835, "aux.acc_seg": 5.26293, "loss": 4.12401, "time": 0.51033}
{"mode": "train", "epoch": 4, "iter": 600, "lr": 0.00729, "memory": 18774, "data_time": 0.04093, "decode.loss_seg": 2.94544, "decode.acc_seg": 5.25929, "aux.loss_seg": 1.17831, "aux.acc_seg": 5.26717, "loss": 4.12375, "time": 0.49303}
{"mode": "train", "epoch": 4, "iter": 650, "lr": 0.00706, "memory": 18774, "data_time": 0.01575, "decode.loss_seg": 2.94526, "decode.acc_seg": 5.26335, "aux.loss_seg": 1.17828, "aux.acc_seg": 5.26941, "loss": 4.12354, "time": 0.50302}
{"mode": "train", "epoch": 4, "iter": 700, "lr": 0.00682, "memory": 18774, "data_time": 0.0305, "decode.loss_seg": 2.94515, "decode.acc_seg": 5.26041, "aux.loss_seg": 1.17825, "aux.acc_seg": 5.26185, "loss": 4.1234, "time": 0.51053}
{"mode": "train", "epoch": 5, "iter": 750, "lr": 0.00659, "memory": 18774, "data_time": 0.02836, "decode.loss_seg": 2.94506, "decode.acc_seg": 5.26454, "aux.loss_seg": 1.17823, "aux.acc_seg": 5.26748, "loss": 4.12329, "time": 0.51137}
{"mode": "train", "epoch": 5, "iter": 800, "lr": 0.00636, "memory": 18774, "data_time": 0.01778, "decode.loss_seg": 2.94499, "decode.acc_seg": 5.26767, "aux.loss_seg": 1.17821, "aux.acc_seg": 5.25856, "loss": 4.1232, "time": 0.49089}
{"mode": "train", "epoch": 5, "iter": 850, "lr": 0.00612, "memory": 18774, "data_time": 0.02509, "decode.loss_seg": 2.94493, "decode.acc_seg": 5.26349, "aux.loss_seg": 1.17819, "aux.acc_seg": 5.26516, "loss": 4.12311, "time": 0.52532}
{"mode": "train", "epoch": 5, "iter": 900, "lr": 0.00589, "memory": 18774, "data_time": 0.02021, "decode.loss_seg": 2.94489, "decode.acc_seg": 5.26108, "aux.loss_seg": 1.17816, "aux.acc_seg": 5.26826, "loss": 4.12305, "time": 0.49392}
{"mode": "train", "epoch": 6, "iter": 950, "lr": 0.00565, "memory": 18774, "data_time": 0.02511, "decode.loss_seg": 2.94486, "decode.acc_seg": 5.26494, "aux.loss_seg": 1.17815, "aux.acc_seg": 5.26652, "loss": 4.123, "time": 0.47273}
{"mode": "train", "epoch": 6, "iter": 1000, "lr": 0.00541, "memory": 18774, "data_time": 0.0221, "decode.loss_seg": 2.94484, "decode.acc_seg": 5.26339, "aux.loss_seg": 1.17813, "aux.acc_seg": 5.26304, "loss": 4.12298, "time": 0.48912}
{"mode": "train", "epoch": 6, "iter": 1050, "lr": 0.00517, "memory": 18774, "data_time": 0.01423, "decode.loss_seg": 2.94481, "decode.acc_seg": 5.26594, "aux.loss_seg": 1.17813, "aux.acc_seg": 5.26238, "loss": 4.12293, "time": 0.45289}
{"mode": "train", "epoch": 6, "iter": 1100, "lr": 0.00493, "memory": 18774, "data_time": 0.02982, "decode.loss_seg": 2.94479, "decode.acc_seg": 5.26443, "aux.loss_seg": 1.17812, "aux.acc_seg": 5.26226, "loss": 4.12291, "time": 0.51961}
{"mode": "train", "epoch": 7, "iter": 1150, "lr": 0.00469, "memory": 18774, "data_time": 0.02672, "decode.loss_seg": 2.94477, "decode.acc_seg": 5.25877, "aux.loss_seg": 1.1781, "aux.acc_seg": 5.26104, "loss": 4.12287, "time": 0.45938}
{"mode": "train", "epoch": 7, "iter": 1200, "lr": 0.00444, "memory": 18774, "data_time": 0.03036, "decode.loss_seg": 2.94475, "decode.acc_seg": 5.26111, "aux.loss_seg": 1.17809, "aux.acc_seg": 5.25734, "loss": 4.12284, "time": 0.493}
{"mode": "train", "epoch": 7, "iter": 1250, "lr": 0.0042, "memory": 18774, "data_time": 0.01603, "decode.loss_seg": 2.94474, "decode.acc_seg": 5.25785, "aux.loss_seg": 1.17808, "aux.acc_seg": 5.26222, "loss": 4.12283, "time": 0.49342}
{"mode": "train", "epoch": 7, "iter": 1300, "lr": 0.00395, "memory": 18774, "data_time": 0.03285, "decode.loss_seg": 2.94473, "decode.acc_seg": 5.26206, "aux.loss_seg": 1.17807, "aux.acc_seg": 5.25868, "loss": 4.1228, "time": 0.5161}
{"mode": "train", "epoch": 8, "iter": 1350, "lr": 0.00371, "memory": 18774, "data_time": 0.02325, "decode.loss_seg": 2.94472, "decode.acc_seg": 5.26315, "aux.loss_seg": 1.17806, "aux.acc_seg": 5.26305, "loss": 4.12278, "time": 0.46402}
{"mode": "train", "epoch": 8, "iter": 1400, "lr": 0.00346, "memory": 18774, "data_time": 0.02069, "decode.loss_seg": 2.94471, "decode.acc_seg": 5.26233, "aux.loss_seg": 1.17806, "aux.acc_seg": 5.26902, "loss": 4.12278, "time": 0.45995}
{"mode": "train", "epoch": 8, "iter": 1450, "lr": 0.0032, "memory": 18774, "data_time": 0.01645, "decode.loss_seg": 2.94471, "decode.acc_seg": 5.26419, "aux.loss_seg": 1.17806, "aux.acc_seg": 5.25848, "loss": 4.12276, "time": 0.46256}
{"mode": "train", "epoch": 9, "iter": 1500, "lr": 0.00295, "memory": 18774, "data_time": 0.02841, "decode.loss_seg": 2.9447, "decode.acc_seg": 5.26016, "aux.loss_seg": 1.17805, "aux.acc_seg": 5.26094, "loss": 4.12275, "time": 0.49528}
{"mode": "train", "epoch": 9, "iter": 1550, "lr": 0.00269, "memory": 18774, "data_time": 0.01987, "decode.loss_seg": 2.94468, "decode.acc_seg": 5.25602, "aux.loss_seg": 1.17804, "aux.acc_seg": 5.26444, "loss": 4.12273, "time": 0.48166}
{"mode": "train", "epoch": 9, "iter": 1600, "lr": 0.00243, "memory": 18774, "data_time": 0.02448, "decode.loss_seg": 2.94468, "decode.acc_seg": 5.26353, "aux.loss_seg": 1.17804, "aux.acc_seg": 5.26319, "loss": 4.12272, "time": 0.52184}
{"mode": "train", "epoch": 9, "iter": 1650, "lr": 0.00217, "memory": 18774, "data_time": 0.02895, "decode.loss_seg": 2.94467, "decode.acc_seg": 5.2623, "aux.loss_seg": 1.17803, "aux.acc_seg": 5.2626, "loss": 4.12271, "time": 0.4968}
{"mode": "train", "epoch": 10, "iter": 1700, "lr": 0.0019, "memory": 18774, "data_time": 0.02535, "decode.loss_seg": 2.94468, "decode.acc_seg": 5.26408, "aux.loss_seg": 1.17803, "aux.acc_seg": 5.26394, "loss": 4.12271, "time": 0.51606}
{"mode": "train", "epoch": 10, "iter": 1750, "lr": 0.00163, "memory": 18774, "data_time": 0.01732, "decode.loss_seg": 2.94467, "decode.acc_seg": 5.26435, "aux.loss_seg": 1.17803, "aux.acc_seg": 5.26571, "loss": 4.1227, "time": 0.45733}
{"mode": "train", "epoch": 10, "iter": 1800, "lr": 0.00135, "memory": 18774, "data_time": 0.01777, "decode.loss_seg": 2.94467, "decode.acc_seg": 5.26264, "aux.loss_seg": 1.17802, "aux.acc_seg": 5.26476, "loss": 4.12269, "time": 0.45115}
{"mode": "train", "epoch": 10, "iter": 1850, "lr": 0.00107, "memory": 18774, "data_time": 0.01795, "decode.loss_seg": 2.94467, "decode.acc_seg": 5.26331, "aux.loss_seg": 1.17803, "aux.acc_seg": 5.26528, "loss": 4.1227, "time": 0.51168}
{"mode": "train", "epoch": 11, "iter": 1900, "lr": 0.00077, "memory": 18774, "data_time": 0.02397, "decode.loss_seg": 2.94466, "decode.acc_seg": 5.25529, "aux.loss_seg": 1.17802, "aux.acc_seg": 5.26169, "loss": 4.12268, "time": 0.55712}
{"mode": "train", "epoch": 11, "iter": 1950, "lr": 0.00046, "memory": 18774, "data_time": 0.03367, "decode.loss_seg": 2.94466, "decode.acc_seg": 5.26596, "aux.loss_seg": 1.17802, "aux.acc_seg": 5.26232, "loss": 4.12268, "time": 0.52894}
{"mode": "train", "epoch": 11, "iter": 2000, "lr": 0.00011, "memory": 18774, "data_time": 0.02443, "decode.loss_seg": 2.94466, "decode.acc_seg": 5.26234, "aux.loss_seg": 1.17802, "aux.acc_seg": 5.26383, "loss": 4.12268, "time": 0.53763}
