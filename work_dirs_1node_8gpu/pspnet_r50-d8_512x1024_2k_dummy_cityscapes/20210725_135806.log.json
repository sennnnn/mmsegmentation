{"env_info": "sys.platform: linux\nPython: 3.7.10 (default, Feb 26 2021, 18:47:35) [GCC 7.3.0]\nCUDA available: True\nGPU 0,1,2,3,4,5,6,7: Tesla V100-SXM2-32GB\nCUDA_HOME: /mnt/cache/share/polaris/dep/cuda-10.1-cudnn7.6.5\nNVCC: Cuda compilation tools, release 10.1, V10.1.243\nGCC: gcc (GCC) 5.4.0\nPyTorch: 1.8.0\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) Math Kernel Library Version 2020.0.2 Product Build 20200624 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v1.7.0 (Git Hash 7aed236906b1f7a05c0917e5257a1af05e9ff683)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 10.1\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_37,code=compute_37\n  - CuDNN 7.6.3\n  - Magma 2.5.2\n  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=10.1, CUDNN_VERSION=7.6.3, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.8.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, \n\nTorchVision: 0.9.0\nOpenCV: 4.5.1\nMMCV: 1.3.8\nMMCV Compiler: GCC 7.3\nMMCV CUDA Compiler: 10.1\nMMSegmentation: 0.15.0+f48c6a1", "seed": null, "exp_name": "pspnet_r50-d8_512x1024_2k_dummy_cityscapes.py", "mmseg_version": "0.15.0+f48c6a1", "config": "norm_cfg = dict(type='SyncBN', requires_grad=True)\nmodel = dict(\n    type='EncoderDecoder',\n    pretrained='open-mmlab://resnet50_v1c',\n    backbone=dict(\n        type='ResNetV1c',\n        depth=50,\n        num_stages=4,\n        out_indices=(0, 1, 2, 3),\n        dilations=(1, 1, 2, 4),\n        strides=(1, 2, 1, 1),\n        norm_cfg=dict(type='SyncBN', requires_grad=True),\n        norm_eval=False,\n        style='pytorch',\n        contract_dilation=True,\n        pretrained='open-mmlab://resnet50_v1c'),\n    decode_head=dict(\n        type='PSPHead',\n        in_channels=2048,\n        in_index=3,\n        channels=512,\n        pool_scales=(1, 2, 3, 6),\n        dropout_ratio=0.1,\n        num_classes=19,\n        norm_cfg=dict(type='SyncBN', requires_grad=True),\n        align_corners=False,\n        loss_decode=dict(\n            type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0)),\n    auxiliary_head=dict(\n        type='FCNHead',\n        in_channels=1024,\n        in_index=2,\n        channels=256,\n        num_convs=1,\n        concat_input=False,\n        dropout_ratio=0.1,\n        num_classes=19,\n        norm_cfg=dict(type='SyncBN', requires_grad=True),\n        align_corners=False,\n        loss_decode=dict(\n            type='CrossEntropyLoss', use_sigmoid=False, loss_weight=0.4)),\n    train_cfg=dict(),\n    test_cfg=dict(mode='whole'))\ndataset_type = 'DummyCityscapes'\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ncrop_size = (512, 1024)\ntrain_pipeline = [\n    dict(type='Resize', img_scale=(2048, 1024), ratio_range=(0.5, 2.0)),\n    dict(type='RandomCrop', crop_size=(512, 1024), cat_max_ratio=0.75),\n    dict(type='RandomFlip', prob=0.5),\n    dict(type='PhotoMetricDistortion'),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_semantic_seg'])\n]\ntest_pipeline = [\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(2048, 1024),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=2,\n    workers_per_gpu=2,\n    train=dict(\n        type='DummyCityscapes',\n        pipeline=[\n            dict(\n                type='Resize', img_scale=(2048, 1024), ratio_range=(0.5, 2.0)),\n            dict(type='RandomCrop', crop_size=(512, 1024), cat_max_ratio=0.75),\n            dict(type='RandomFlip', prob=0.5),\n            dict(type='PhotoMetricDistortion'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='DefaultFormatBundle'),\n            dict(type='Collect', keys=['img', 'gt_semantic_seg'])\n        ]),\n    val=dict(\n        type='DummyCityscapes',\n        pipeline=[\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(2048, 1024),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]),\n    test=dict(\n        type='DummyCityscapes',\n        pipeline=[\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(2048, 1024),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]))\nlog_config = dict(\n    interval=50, hooks=[dict(type='TextLoggerHook', by_epoch=False)])\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = None\nresume_from = None\nworkflow = [('train', 1)]\ncudnn_benchmark = True\noptimizer = dict(type='SGD', lr=0.01, momentum=0.9, weight_decay=0.0005)\noptimizer_config = dict()\nlr_config = dict(policy='poly', power=0.9, min_lr=0.0001, by_epoch=False)\nrunner = dict(type='IterBasedRunner', max_iters=2000)\ncheckpoint_config = dict(by_epoch=False, interval=8000)\nevaluation = dict(interval=8000, metric='mIoU')\nwork_dir = 'work_dirs_1node_8gpu/pspnet_r50-d8_512x1024_2k_dummy_cityscapes'\ngpu_ids = range(0, 1)\nseed = None\n", "CLASSES": ["road", "sidewalk", "building", "wall", "fence", "pole", "traffic light", "traffic sign", "vegetation", "terrain", "sky", "person", "rider", "car", "truck", "bus", "train", "motorcycle", "bicycle"], "PALETTE": [[128, 64, 128], [244, 35, 232], [70, 70, 70], [102, 102, 156], [190, 153, 153], [153, 153, 153], [250, 170, 30], [220, 220, 0], [107, 142, 35], [152, 251, 152], [70, 130, 180], [220, 20, 60], [255, 0, 0], [0, 0, 142], [0, 0, 70], [0, 60, 100], [0, 80, 100], [0, 0, 230], [119, 11, 32]]}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 0.00978, "memory": 18766, "data_time": 0.0411, "decode.loss_seg": 2.95104, "decode.acc_seg": 5.26287, "aux.loss_seg": 1.17914, "aux.acc_seg": 5.26371, "loss": 4.13017, "time": 1.04202}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 0.00956, "memory": 18766, "data_time": 0.02229, "decode.loss_seg": 2.94925, "decode.acc_seg": 5.26341, "aux.loss_seg": 1.17889, "aux.acc_seg": 5.26384, "loss": 4.12813, "time": 0.59099}
{"mode": "train", "epoch": 1, "iter": 150, "lr": 0.00933, "memory": 18766, "data_time": 0.01755, "decode.loss_seg": 2.94851, "decode.acc_seg": 5.26494, "aux.loss_seg": 1.1788, "aux.acc_seg": 5.26558, "loss": 4.12731, "time": 0.55166}
{"mode": "train", "epoch": 2, "iter": 200, "lr": 0.00911, "memory": 18766, "data_time": 0.02179, "decode.loss_seg": 2.94792, "decode.acc_seg": 5.26335, "aux.loss_seg": 1.17873, "aux.acc_seg": 5.26422, "loss": 4.12664, "time": 0.55251}
{"mode": "train", "epoch": 2, "iter": 250, "lr": 0.00888, "memory": 18766, "data_time": 0.02377, "decode.loss_seg": 2.94748, "decode.acc_seg": 5.26545, "aux.loss_seg": 1.17867, "aux.acc_seg": 5.25799, "loss": 4.12615, "time": 0.59464}
{"mode": "train", "epoch": 2, "iter": 300, "lr": 0.00866, "memory": 18766, "data_time": 0.01763, "decode.loss_seg": 2.94715, "decode.acc_seg": 5.25986, "aux.loss_seg": 1.17861, "aux.acc_seg": 5.26213, "loss": 4.12576, "time": 0.56973}
{"mode": "train", "epoch": 2, "iter": 350, "lr": 0.00843, "memory": 18766, "data_time": 0.01813, "decode.loss_seg": 2.94683, "decode.acc_seg": 5.26236, "aux.loss_seg": 1.17855, "aux.acc_seg": 5.26063, "loss": 4.12538, "time": 0.5583}
{"mode": "train", "epoch": 3, "iter": 400, "lr": 0.0082, "memory": 18766, "data_time": 0.02458, "decode.loss_seg": 2.94657, "decode.acc_seg": 5.26415, "aux.loss_seg": 1.17851, "aux.acc_seg": 5.26307, "loss": 4.12508, "time": 0.58905}
{"mode": "train", "epoch": 3, "iter": 450, "lr": 0.00798, "memory": 18766, "data_time": 0.02359, "decode.loss_seg": 2.94636, "decode.acc_seg": 5.25885, "aux.loss_seg": 1.17847, "aux.acc_seg": 5.26264, "loss": 4.12483, "time": 0.62095}
{"mode": "train", "epoch": 3, "iter": 500, "lr": 0.00775, "memory": 18766, "data_time": 0.01757, "decode.loss_seg": 2.94616, "decode.acc_seg": 5.26749, "aux.loss_seg": 1.17843, "aux.acc_seg": 5.26588, "loss": 4.12459, "time": 0.57537}
{"mode": "train", "epoch": 3, "iter": 550, "lr": 0.00752, "memory": 18766, "data_time": 0.02209, "decode.loss_seg": 2.94598, "decode.acc_seg": 5.26555, "aux.loss_seg": 1.17839, "aux.acc_seg": 5.26624, "loss": 4.12438, "time": 0.59363}
{"mode": "train", "epoch": 4, "iter": 600, "lr": 0.00729, "memory": 18766, "data_time": 0.02417, "decode.loss_seg": 2.94585, "decode.acc_seg": 5.26564, "aux.loss_seg": 1.17836, "aux.acc_seg": 5.26387, "loss": 4.12421, "time": 0.60424}
{"mode": "train", "epoch": 4, "iter": 650, "lr": 0.00706, "memory": 18766, "data_time": 0.01529, "decode.loss_seg": 2.94572, "decode.acc_seg": 5.26532, "aux.loss_seg": 1.17834, "aux.acc_seg": 5.26077, "loss": 4.12406, "time": 0.59986}
{"mode": "train", "epoch": 4, "iter": 700, "lr": 0.00682, "memory": 18766, "data_time": 0.02184, "decode.loss_seg": 2.94561, "decode.acc_seg": 5.26717, "aux.loss_seg": 1.17831, "aux.acc_seg": 5.26379, "loss": 4.12391, "time": 0.58956}
{"mode": "train", "epoch": 5, "iter": 750, "lr": 0.00659, "memory": 18766, "data_time": 0.03507, "decode.loss_seg": 2.94552, "decode.acc_seg": 5.26116, "aux.loss_seg": 1.17829, "aux.acc_seg": 5.26188, "loss": 4.1238, "time": 0.59539}
{"mode": "train", "epoch": 5, "iter": 800, "lr": 0.00636, "memory": 18766, "data_time": 0.02001, "decode.loss_seg": 2.94541, "decode.acc_seg": 5.26595, "aux.loss_seg": 1.17826, "aux.acc_seg": 5.26257, "loss": 4.12367, "time": 0.5475}
{"mode": "train", "epoch": 5, "iter": 850, "lr": 0.00612, "memory": 18766, "data_time": 0.01912, "decode.loss_seg": 2.94534, "decode.acc_seg": 5.26104, "aux.loss_seg": 1.17824, "aux.acc_seg": 5.26332, "loss": 4.12358, "time": 0.61193}
{"mode": "train", "epoch": 5, "iter": 900, "lr": 0.00589, "memory": 18766, "data_time": 0.02732, "decode.loss_seg": 2.94527, "decode.acc_seg": 5.26433, "aux.loss_seg": 1.17822, "aux.acc_seg": 5.26258, "loss": 4.12349, "time": 0.58956}
{"mode": "train", "epoch": 6, "iter": 950, "lr": 0.00565, "memory": 18766, "data_time": 0.02469, "decode.loss_seg": 2.9452, "decode.acc_seg": 5.26701, "aux.loss_seg": 1.1782, "aux.acc_seg": 5.26548, "loss": 4.12341, "time": 0.53909}
{"mode": "train", "epoch": 6, "iter": 1000, "lr": 0.00541, "memory": 18766, "data_time": 0.01906, "decode.loss_seg": 2.94515, "decode.acc_seg": 5.26064, "aux.loss_seg": 1.17819, "aux.acc_seg": 5.26406, "loss": 4.12334, "time": 0.58571}
{"mode": "train", "epoch": 6, "iter": 1050, "lr": 0.00517, "memory": 18766, "data_time": 0.01937, "decode.loss_seg": 2.94509, "decode.acc_seg": 5.26258, "aux.loss_seg": 1.17817, "aux.acc_seg": 5.26057, "loss": 4.12326, "time": 0.56372}
{"mode": "train", "epoch": 6, "iter": 1100, "lr": 0.00493, "memory": 18766, "data_time": 0.01561, "decode.loss_seg": 2.94505, "decode.acc_seg": 5.26632, "aux.loss_seg": 1.17816, "aux.acc_seg": 5.26783, "loss": 4.12321, "time": 0.55394}
{"mode": "train", "epoch": 7, "iter": 1150, "lr": 0.00469, "memory": 18766, "data_time": 0.02188, "decode.loss_seg": 2.94501, "decode.acc_seg": 5.26078, "aux.loss_seg": 1.17815, "aux.acc_seg": 5.25674, "loss": 4.12316, "time": 0.57654}
{"mode": "train", "epoch": 7, "iter": 1200, "lr": 0.00444, "memory": 18766, "data_time": 0.02224, "decode.loss_seg": 2.94496, "decode.acc_seg": 5.26321, "aux.loss_seg": 1.17813, "aux.acc_seg": 5.26393, "loss": 4.12309, "time": 0.55705}
{"mode": "train", "epoch": 7, "iter": 1250, "lr": 0.0042, "memory": 18766, "data_time": 0.02668, "decode.loss_seg": 2.94493, "decode.acc_seg": 5.26425, "aux.loss_seg": 1.17812, "aux.acc_seg": 5.26453, "loss": 4.12306, "time": 0.56797}
{"mode": "train", "epoch": 7, "iter": 1300, "lr": 0.00395, "memory": 18766, "data_time": 0.01582, "decode.loss_seg": 2.9449, "decode.acc_seg": 5.26151, "aux.loss_seg": 1.17811, "aux.acc_seg": 5.26327, "loss": 4.12302, "time": 0.59521}
{"mode": "train", "epoch": 8, "iter": 1350, "lr": 0.00371, "memory": 18766, "data_time": 0.02712, "decode.loss_seg": 2.94488, "decode.acc_seg": 5.26213, "aux.loss_seg": 1.17811, "aux.acc_seg": 5.26387, "loss": 4.12298, "time": 0.56844}
{"mode": "train", "epoch": 8, "iter": 1400, "lr": 0.00346, "memory": 18766, "data_time": 0.03003, "decode.loss_seg": 2.94484, "decode.acc_seg": 5.26034, "aux.loss_seg": 1.17809, "aux.acc_seg": 5.26538, "loss": 4.12293, "time": 0.60545}
{"mode": "train", "epoch": 8, "iter": 1450, "lr": 0.0032, "memory": 18766, "data_time": 0.0195, "decode.loss_seg": 2.94483, "decode.acc_seg": 5.26168, "aux.loss_seg": 1.17809, "aux.acc_seg": 5.26053, "loss": 4.12292, "time": 0.55395}
{"mode": "train", "epoch": 9, "iter": 1500, "lr": 0.00295, "memory": 18766, "data_time": 0.02626, "decode.loss_seg": 2.94482, "decode.acc_seg": 5.2613, "aux.loss_seg": 1.17808, "aux.acc_seg": 5.26164, "loss": 4.1229, "time": 0.5872}
{"mode": "train", "epoch": 9, "iter": 1550, "lr": 0.00269, "memory": 18766, "data_time": 0.03553, "decode.loss_seg": 2.94479, "decode.acc_seg": 5.26384, "aux.loss_seg": 1.17807, "aux.acc_seg": 5.26315, "loss": 4.12286, "time": 0.61501}
{"mode": "train", "epoch": 9, "iter": 1600, "lr": 0.00243, "memory": 18766, "data_time": 0.01871, "decode.loss_seg": 2.94479, "decode.acc_seg": 5.26457, "aux.loss_seg": 1.17807, "aux.acc_seg": 5.26026, "loss": 4.12286, "time": 0.54615}
{"mode": "train", "epoch": 9, "iter": 1650, "lr": 0.00217, "memory": 18766, "data_time": 0.0283, "decode.loss_seg": 2.94477, "decode.acc_seg": 5.2639, "aux.loss_seg": 1.17806, "aux.acc_seg": 5.26397, "loss": 4.12283, "time": 0.59111}
{"mode": "train", "epoch": 10, "iter": 1700, "lr": 0.0019, "memory": 18766, "data_time": 0.02546, "decode.loss_seg": 2.94477, "decode.acc_seg": 5.25729, "aux.loss_seg": 1.17807, "aux.acc_seg": 5.25972, "loss": 4.12283, "time": 0.54381}
{"mode": "train", "epoch": 10, "iter": 1750, "lr": 0.00163, "memory": 18766, "data_time": 0.01923, "decode.loss_seg": 2.94476, "decode.acc_seg": 5.26473, "aux.loss_seg": 1.17806, "aux.acc_seg": 5.26451, "loss": 4.12281, "time": 0.60712}
{"mode": "train", "epoch": 10, "iter": 1800, "lr": 0.00135, "memory": 18766, "data_time": 0.02402, "decode.loss_seg": 2.94476, "decode.acc_seg": 5.26427, "aux.loss_seg": 1.17805, "aux.acc_seg": 5.26489, "loss": 4.12281, "time": 0.61672}
{"mode": "train", "epoch": 10, "iter": 1850, "lr": 0.00107, "memory": 18766, "data_time": 0.04389, "decode.loss_seg": 2.94474, "decode.acc_seg": 5.26211, "aux.loss_seg": 1.17805, "aux.acc_seg": 5.26364, "loss": 4.1228, "time": 0.62614}
{"mode": "train", "epoch": 11, "iter": 1900, "lr": 0.00077, "memory": 18766, "data_time": 0.02338, "decode.loss_seg": 2.94474, "decode.acc_seg": 5.25993, "aux.loss_seg": 1.17805, "aux.acc_seg": 5.26428, "loss": 4.12279, "time": 0.55486}
{"mode": "train", "epoch": 11, "iter": 1950, "lr": 0.00046, "memory": 18766, "data_time": 0.0168, "decode.loss_seg": 2.94475, "decode.acc_seg": 5.26253, "aux.loss_seg": 1.17805, "aux.acc_seg": 5.26196, "loss": 4.1228, "time": 0.54712}
{"mode": "train", "epoch": 11, "iter": 2000, "lr": 0.00011, "memory": 18766, "data_time": 0.0272, "decode.loss_seg": 2.94474, "decode.acc_seg": 5.26491, "aux.loss_seg": 1.17805, "aux.acc_seg": 5.26227, "loss": 4.12279, "time": 0.61831}
