{"env_info": "sys.platform: linux\nPython: 3.7.10 (default, Feb 26 2021, 18:47:35) [GCC 7.3.0]\nCUDA available: True\nGPU 0,1,2,3,4,5,6,7: Tesla V100-SXM2-32GB\nCUDA_HOME: /mnt/cache/share/polaris/dep/cuda-10.1-cudnn7.6.5\nNVCC: Cuda compilation tools, release 10.1, V10.1.243\nGCC: gcc (GCC) 5.4.0\nPyTorch: 1.8.0\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) Math Kernel Library Version 2020.0.2 Product Build 20200624 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v1.7.0 (Git Hash 7aed236906b1f7a05c0917e5257a1af05e9ff683)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 10.1\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_37,code=compute_37\n  - CuDNN 7.6.3\n  - Magma 2.5.2\n  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=10.1, CUDNN_VERSION=7.6.3, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.8.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, \n\nTorchVision: 0.9.0\nOpenCV: 4.5.1\nMMCV: 1.3.8\nMMCV Compiler: GCC 7.3\nMMCV CUDA Compiler: 10.1\nMMSegmentation: 0.15.0+f48c6a1", "seed": null, "exp_name": "fcn_r50-d8_512x1024_2k_cityscapes.py", "mmseg_version": "0.15.0+f48c6a1", "config": "norm_cfg = dict(type='SyncBN', requires_grad=True)\nmodel = dict(\n    type='EncoderDecoder',\n    pretrained='open-mmlab://resnet50_v1c',\n    backbone=dict(\n        type='ResNetV1c',\n        depth=50,\n        num_stages=4,\n        out_indices=(0, 1, 2, 3),\n        dilations=(1, 1, 2, 4),\n        strides=(1, 2, 1, 1),\n        norm_cfg=dict(type='SyncBN', requires_grad=True),\n        norm_eval=False,\n        style='pytorch',\n        contract_dilation=True,\n        pretrained='open-mmlab://resnet50_v1c'),\n    decode_head=dict(\n        type='FCNHead',\n        in_channels=2048,\n        in_index=3,\n        channels=512,\n        num_convs=2,\n        concat_input=True,\n        dropout_ratio=0.1,\n        num_classes=19,\n        norm_cfg=dict(type='SyncBN', requires_grad=True),\n        align_corners=False,\n        loss_decode=dict(\n            type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0)),\n    auxiliary_head=dict(\n        type='FCNHead',\n        in_channels=1024,\n        in_index=2,\n        channels=256,\n        num_convs=1,\n        concat_input=False,\n        dropout_ratio=0.1,\n        num_classes=19,\n        norm_cfg=dict(type='SyncBN', requires_grad=True),\n        align_corners=False,\n        loss_decode=dict(\n            type='CrossEntropyLoss', use_sigmoid=False, loss_weight=0.4)),\n    train_cfg=dict(),\n    test_cfg=dict(mode='whole'))\ndataset_type = 'CityscapesDataset'\ndata_root = 'data/cityscapes/'\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ncrop_size = (512, 1024)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations'),\n    dict(type='Resize', img_scale=(2048, 1024), ratio_range=(0.5, 2.0)),\n    dict(type='RandomCrop', crop_size=(512, 1024), cat_max_ratio=0.75),\n    dict(type='RandomFlip', prob=0.5),\n    dict(type='PhotoMetricDistortion'),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='Pad', size=(512, 1024), pad_val=0, seg_pad_val=255),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_semantic_seg'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(2048, 1024),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=2,\n    workers_per_gpu=2,\n    train=dict(\n        type='CityscapesDataset',\n        data_root='data/cityscapes/',\n        img_dir='leftImg8bit/train',\n        ann_dir='gtFine/train',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations'),\n            dict(\n                type='Resize', img_scale=(2048, 1024), ratio_range=(0.5, 2.0)),\n            dict(type='RandomCrop', crop_size=(512, 1024), cat_max_ratio=0.75),\n            dict(type='RandomFlip', prob=0.5),\n            dict(type='PhotoMetricDistortion'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size=(512, 1024), pad_val=0, seg_pad_val=255),\n            dict(type='DefaultFormatBundle'),\n            dict(type='Collect', keys=['img', 'gt_semantic_seg'])\n        ]),\n    val=dict(\n        type='CityscapesDataset',\n        data_root='data/cityscapes/',\n        img_dir='leftImg8bit/val',\n        ann_dir='gtFine/val',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(2048, 1024),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]),\n    test=dict(\n        type='CityscapesDataset',\n        data_root='data/cityscapes/',\n        img_dir='leftImg8bit/val',\n        ann_dir='gtFine/val',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(2048, 1024),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]))\nlog_config = dict(\n    interval=50, hooks=[dict(type='TextLoggerHook', by_epoch=False)])\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = None\nresume_from = None\nworkflow = [('train', 1)]\ncudnn_benchmark = True\noptimizer = dict(type='SGD', lr=0.01, momentum=0.9, weight_decay=0.0005)\noptimizer_config = dict()\nlr_config = dict(policy='poly', power=0.9, min_lr=0.0001, by_epoch=False)\nrunner = dict(type='IterBasedRunner', max_iters=2000)\ncheckpoint_config = dict(by_epoch=False, interval=8000)\nevaluation = dict(interval=8000, metric='mIoU')\nwork_dir = 'work_dirs_1node_8gpu/fcn_r50-d8_512x1024_2k_cityscapes'\ngpu_ids = range(0, 1)\nseed = None\n", "CLASSES": ["road", "sidewalk", "building", "wall", "fence", "pole", "traffic light", "traffic sign", "vegetation", "terrain", "sky", "person", "rider", "car", "truck", "bus", "train", "motorcycle", "bicycle"], "PALETTE": [[128, 64, 128], [244, 35, 232], [70, 70, 70], [102, 102, 156], [190, 153, 153], [153, 153, 153], [250, 170, 30], [220, 220, 0], [107, 142, 35], [152, 251, 152], [70, 130, 180], [220, 20, 60], [255, 0, 0], [0, 0, 142], [0, 0, 70], [0, 60, 100], [0, 80, 100], [0, 0, 230], [119, 11, 32]]}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 0.00978, "memory": 18774, "data_time": 0.06317, "decode.loss_seg": 1.43328, "decode.acc_seg": 54.72732, "aux.loss_seg": 0.73225, "aux.acc_seg": 42.29359, "loss": 2.16553, "time": 0.93978}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 0.00956, "memory": 18774, "data_time": 0.02198, "decode.loss_seg": 0.75911, "decode.acc_seg": 73.42604, "aux.loss_seg": 0.42688, "aux.acc_seg": 67.17135, "loss": 1.18598, "time": 0.48935}
{"mode": "train", "epoch": 1, "iter": 150, "lr": 0.00933, "memory": 18774, "data_time": 0.01315, "decode.loss_seg": 0.58185, "decode.acc_seg": 77.52404, "aux.loss_seg": 0.31632, "aux.acc_seg": 73.45066, "loss": 0.89817, "time": 0.52312}
{"mode": "train", "epoch": 2, "iter": 200, "lr": 0.00911, "memory": 18774, "data_time": 0.02361, "decode.loss_seg": 0.51348, "decode.acc_seg": 78.80334, "aux.loss_seg": 0.27685, "aux.acc_seg": 75.09093, "loss": 0.79033, "time": 0.43805}
{"mode": "train", "epoch": 2, "iter": 250, "lr": 0.00888, "memory": 18774, "data_time": 0.01331, "decode.loss_seg": 0.48021, "decode.acc_seg": 79.8298, "aux.loss_seg": 0.26322, "aux.acc_seg": 76.22529, "loss": 0.74343, "time": 0.42291}
{"mode": "train", "epoch": 2, "iter": 300, "lr": 0.00866, "memory": 18774, "data_time": 0.01175, "decode.loss_seg": 0.47958, "decode.acc_seg": 80.22491, "aux.loss_seg": 0.26044, "aux.acc_seg": 77.13666, "loss": 0.74002, "time": 0.45761}
{"mode": "train", "epoch": 2, "iter": 350, "lr": 0.00843, "memory": 18774, "data_time": 0.01566, "decode.loss_seg": 0.43039, "decode.acc_seg": 81.18008, "aux.loss_seg": 0.23583, "aux.acc_seg": 78.22213, "loss": 0.66623, "time": 0.47482}
{"mode": "train", "epoch": 3, "iter": 400, "lr": 0.0082, "memory": 18774, "data_time": 0.01791, "decode.loss_seg": 0.40169, "decode.acc_seg": 81.70425, "aux.loss_seg": 0.21944, "aux.acc_seg": 78.95112, "loss": 0.62113, "time": 0.46153}
{"mode": "train", "epoch": 3, "iter": 450, "lr": 0.00798, "memory": 18774, "data_time": 0.01152, "decode.loss_seg": 0.37261, "decode.acc_seg": 82.64034, "aux.loss_seg": 0.20957, "aux.acc_seg": 79.68866, "loss": 0.58217, "time": 0.47151}
{"mode": "train", "epoch": 3, "iter": 500, "lr": 0.00775, "memory": 18774, "data_time": 0.01266, "decode.loss_seg": 0.36742, "decode.acc_seg": 82.94161, "aux.loss_seg": 0.20509, "aux.acc_seg": 80.064, "loss": 0.57251, "time": 0.4725}
{"mode": "train", "epoch": 3, "iter": 550, "lr": 0.00752, "memory": 18774, "data_time": 0.01289, "decode.loss_seg": 0.37265, "decode.acc_seg": 83.10791, "aux.loss_seg": 0.20562, "aux.acc_seg": 80.1657, "loss": 0.57827, "time": 0.44918}
{"mode": "train", "epoch": 4, "iter": 600, "lr": 0.00729, "memory": 18774, "data_time": 0.02525, "decode.loss_seg": 0.35786, "decode.acc_seg": 82.63591, "aux.loss_seg": 0.19607, "aux.acc_seg": 79.91855, "loss": 0.55393, "time": 0.45523}
{"mode": "train", "epoch": 4, "iter": 650, "lr": 0.00706, "memory": 18774, "data_time": 0.01337, "decode.loss_seg": 0.34058, "decode.acc_seg": 83.72508, "aux.loss_seg": 0.18885, "aux.acc_seg": 81.21072, "loss": 0.52943, "time": 0.42177}
{"mode": "train", "epoch": 4, "iter": 700, "lr": 0.00682, "memory": 18774, "data_time": 0.01239, "decode.loss_seg": 0.35849, "decode.acc_seg": 83.51134, "aux.loss_seg": 0.1978, "aux.acc_seg": 80.75327, "loss": 0.55629, "time": 0.44823}
{"mode": "train", "epoch": 5, "iter": 750, "lr": 0.00659, "memory": 18774, "data_time": 0.0336, "decode.loss_seg": 0.353, "decode.acc_seg": 83.37891, "aux.loss_seg": 0.19412, "aux.acc_seg": 80.63148, "loss": 0.54712, "time": 0.43924}
{"mode": "train", "epoch": 5, "iter": 800, "lr": 0.00636, "memory": 18774, "data_time": 0.01077, "decode.loss_seg": 0.32891, "decode.acc_seg": 83.77098, "aux.loss_seg": 0.18286, "aux.acc_seg": 81.21369, "loss": 0.51177, "time": 0.44025}
{"mode": "train", "epoch": 5, "iter": 850, "lr": 0.00612, "memory": 18774, "data_time": 0.01719, "decode.loss_seg": 0.32274, "decode.acc_seg": 84.248, "aux.loss_seg": 0.1792, "aux.acc_seg": 81.71879, "loss": 0.50194, "time": 0.44419}
{"mode": "train", "epoch": 5, "iter": 900, "lr": 0.00589, "memory": 18774, "data_time": 0.01372, "decode.loss_seg": 0.30387, "decode.acc_seg": 83.9189, "aux.loss_seg": 0.17165, "aux.acc_seg": 81.36409, "loss": 0.47551, "time": 0.42132}
{"mode": "train", "epoch": 6, "iter": 950, "lr": 0.00565, "memory": 18774, "data_time": 0.01998, "decode.loss_seg": 0.33242, "decode.acc_seg": 84.18634, "aux.loss_seg": 0.18361, "aux.acc_seg": 81.47228, "loss": 0.51603, "time": 0.46457}
{"mode": "train", "epoch": 6, "iter": 1000, "lr": 0.00541, "memory": 18774, "data_time": 0.02151, "decode.loss_seg": 0.32046, "decode.acc_seg": 84.03635, "aux.loss_seg": 0.17945, "aux.acc_seg": 81.24511, "loss": 0.49991, "time": 0.4653}
{"mode": "train", "epoch": 6, "iter": 1050, "lr": 0.00517, "memory": 18774, "data_time": 0.01153, "decode.loss_seg": 0.29702, "decode.acc_seg": 85.64332, "aux.loss_seg": 0.16375, "aux.acc_seg": 83.40642, "loss": 0.46078, "time": 0.46379}
{"mode": "train", "epoch": 6, "iter": 1100, "lr": 0.00493, "memory": 18774, "data_time": 0.01292, "decode.loss_seg": 0.30813, "decode.acc_seg": 84.39195, "aux.loss_seg": 0.16837, "aux.acc_seg": 81.94908, "loss": 0.47649, "time": 0.49094}
{"mode": "train", "epoch": 7, "iter": 1150, "lr": 0.00469, "memory": 18774, "data_time": 0.02535, "decode.loss_seg": 0.28635, "decode.acc_seg": 85.11898, "aux.loss_seg": 0.16057, "aux.acc_seg": 82.6444, "loss": 0.44692, "time": 0.47772}
{"mode": "train", "epoch": 7, "iter": 1200, "lr": 0.00444, "memory": 18774, "data_time": 0.01133, "decode.loss_seg": 0.27283, "decode.acc_seg": 85.19244, "aux.loss_seg": 0.15228, "aux.acc_seg": 82.76825, "loss": 0.42511, "time": 0.4562}
{"mode": "train", "epoch": 7, "iter": 1250, "lr": 0.0042, "memory": 18774, "data_time": 0.01227, "decode.loss_seg": 0.29432, "decode.acc_seg": 84.24351, "aux.loss_seg": 0.1649, "aux.acc_seg": 81.57061, "loss": 0.45922, "time": 0.48857}
{"mode": "train", "epoch": 7, "iter": 1300, "lr": 0.00395, "memory": 18774, "data_time": 0.01161, "decode.loss_seg": 0.315, "decode.acc_seg": 84.58584, "aux.loss_seg": 0.17493, "aux.acc_seg": 82.14173, "loss": 0.48992, "time": 0.48386}
{"mode": "train", "epoch": 8, "iter": 1350, "lr": 0.00371, "memory": 18774, "data_time": 0.03812, "decode.loss_seg": 0.27518, "decode.acc_seg": 85.57617, "aux.loss_seg": 0.15534, "aux.acc_seg": 82.96907, "loss": 0.43052, "time": 0.48604}
{"mode": "train", "epoch": 8, "iter": 1400, "lr": 0.00346, "memory": 18774, "data_time": 0.02732, "decode.loss_seg": 0.27745, "decode.acc_seg": 84.79088, "aux.loss_seg": 0.15547, "aux.acc_seg": 82.37525, "loss": 0.43292, "time": 0.47319}
{"mode": "train", "epoch": 8, "iter": 1450, "lr": 0.0032, "memory": 18774, "data_time": 0.01256, "decode.loss_seg": 0.27107, "decode.acc_seg": 85.11824, "aux.loss_seg": 0.15267, "aux.acc_seg": 82.62502, "loss": 0.42374, "time": 0.52888}
{"mode": "train", "epoch": 9, "iter": 1500, "lr": 0.00295, "memory": 18774, "data_time": 0.02193, "decode.loss_seg": 0.27278, "decode.acc_seg": 85.21858, "aux.loss_seg": 0.15152, "aux.acc_seg": 82.95936, "loss": 0.42431, "time": 0.48505}
{"mode": "train", "epoch": 9, "iter": 1550, "lr": 0.00269, "memory": 18774, "data_time": 0.01213, "decode.loss_seg": 0.27405, "decode.acc_seg": 85.28331, "aux.loss_seg": 0.15794, "aux.acc_seg": 82.47327, "loss": 0.43199, "time": 0.43695}
{"mode": "train", "epoch": 9, "iter": 1600, "lr": 0.00243, "memory": 18774, "data_time": 0.01143, "decode.loss_seg": 0.28249, "decode.acc_seg": 84.89861, "aux.loss_seg": 0.16197, "aux.acc_seg": 82.06438, "loss": 0.44446, "time": 0.47164}
{"mode": "train", "epoch": 9, "iter": 1650, "lr": 0.00217, "memory": 18774, "data_time": 0.01295, "decode.loss_seg": 0.27502, "decode.acc_seg": 85.46102, "aux.loss_seg": 0.15677, "aux.acc_seg": 82.8636, "loss": 0.4318, "time": 0.4475}
{"mode": "train", "epoch": 10, "iter": 1700, "lr": 0.0019, "memory": 18774, "data_time": 0.02318, "decode.loss_seg": 0.24322, "decode.acc_seg": 85.81981, "aux.loss_seg": 0.14227, "aux.acc_seg": 83.24964, "loss": 0.38549, "time": 0.46165}
{"mode": "train", "epoch": 10, "iter": 1750, "lr": 0.00163, "memory": 18774, "data_time": 0.0139, "decode.loss_seg": 0.27126, "decode.acc_seg": 85.39925, "aux.loss_seg": 0.15613, "aux.acc_seg": 82.6438, "loss": 0.42739, "time": 0.44075}
{"mode": "train", "epoch": 10, "iter": 1800, "lr": 0.00135, "memory": 18774, "data_time": 0.01276, "decode.loss_seg": 0.25836, "decode.acc_seg": 85.81797, "aux.loss_seg": 0.14701, "aux.acc_seg": 83.38171, "loss": 0.40537, "time": 0.45138}
{"mode": "train", "epoch": 10, "iter": 1850, "lr": 0.00107, "memory": 18774, "data_time": 0.02027, "decode.loss_seg": 0.26372, "decode.acc_seg": 85.63698, "aux.loss_seg": 0.14975, "aux.acc_seg": 83.0489, "loss": 0.41346, "time": 0.46657}
{"mode": "train", "epoch": 11, "iter": 1900, "lr": 0.00077, "memory": 18774, "data_time": 0.02545, "decode.loss_seg": 0.26374, "decode.acc_seg": 85.97103, "aux.loss_seg": 0.15631, "aux.acc_seg": 82.98786, "loss": 0.42005, "time": 0.45003}
{"mode": "train", "epoch": 11, "iter": 1950, "lr": 0.00046, "memory": 18774, "data_time": 0.01051, "decode.loss_seg": 0.24993, "decode.acc_seg": 85.88517, "aux.loss_seg": 0.14651, "aux.acc_seg": 83.08974, "loss": 0.39644, "time": 0.43897}
{"mode": "train", "epoch": 11, "iter": 2000, "lr": 0.00011, "memory": 18774, "data_time": 0.02278, "decode.loss_seg": 0.25224, "decode.acc_seg": 86.06787, "aux.loss_seg": 0.14458, "aux.acc_seg": 83.67968, "loss": 0.39682, "time": 0.49155}
