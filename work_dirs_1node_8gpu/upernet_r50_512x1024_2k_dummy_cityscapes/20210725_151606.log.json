{"env_info": "sys.platform: linux\nPython: 3.7.10 (default, Feb 26 2021, 18:47:35) [GCC 7.3.0]\nCUDA available: True\nGPU 0,1,2,3,4,5,6,7: Tesla V100-SXM2-32GB\nCUDA_HOME: /mnt/cache/share/polaris/dep/cuda-10.1-cudnn7.6.5\nNVCC: Cuda compilation tools, release 10.1, V10.1.243\nGCC: gcc (GCC) 5.4.0\nPyTorch: 1.8.0\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) Math Kernel Library Version 2020.0.2 Product Build 20200624 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v1.7.0 (Git Hash 7aed236906b1f7a05c0917e5257a1af05e9ff683)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 10.1\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_37,code=compute_37\n  - CuDNN 7.6.3\n  - Magma 2.5.2\n  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=10.1, CUDNN_VERSION=7.6.3, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.8.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, \n\nTorchVision: 0.9.0\nOpenCV: 4.5.1\nMMCV: 1.3.8\nMMCV Compiler: GCC 7.3\nMMCV CUDA Compiler: 10.1\nMMSegmentation: 0.15.0+f48c6a1", "seed": null, "exp_name": "upernet_r50_512x1024_2k_dummy_cityscapes.py", "mmseg_version": "0.15.0+f48c6a1", "config": "norm_cfg = dict(type='SyncBN', requires_grad=True)\nmodel = dict(\n    type='EncoderDecoder',\n    pretrained='open-mmlab://resnet50_v1c',\n    backbone=dict(\n        type='ResNetV1c',\n        depth=50,\n        num_stages=4,\n        out_indices=(0, 1, 2, 3),\n        dilations=(1, 1, 1, 1),\n        strides=(1, 2, 2, 2),\n        norm_cfg=dict(type='SyncBN', requires_grad=True),\n        norm_eval=False,\n        style='pytorch',\n        contract_dilation=True,\n        pretrained='open-mmlab://resnet50_v1c'),\n    decode_head=dict(\n        type='UPerHead',\n        in_channels=[256, 512, 1024, 2048],\n        in_index=[0, 1, 2, 3],\n        pool_scales=(1, 2, 3, 6),\n        channels=512,\n        dropout_ratio=0.1,\n        num_classes=19,\n        norm_cfg=dict(type='SyncBN', requires_grad=True),\n        align_corners=False,\n        loss_decode=dict(\n            type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0)),\n    auxiliary_head=dict(\n        type='FCNHead',\n        in_channels=1024,\n        in_index=2,\n        channels=256,\n        num_convs=1,\n        concat_input=False,\n        dropout_ratio=0.1,\n        num_classes=19,\n        norm_cfg=dict(type='SyncBN', requires_grad=True),\n        align_corners=False,\n        loss_decode=dict(\n            type='CrossEntropyLoss', use_sigmoid=False, loss_weight=0.4)),\n    train_cfg=dict(),\n    test_cfg=dict(mode='whole'))\ndataset_type = 'DummyCityscapes'\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ncrop_size = (512, 1024)\ntrain_pipeline = [\n    dict(type='Resize', img_scale=(2048, 1024), ratio_range=(0.5, 2.0)),\n    dict(type='RandomCrop', crop_size=(512, 1024), cat_max_ratio=0.75),\n    dict(type='RandomFlip', prob=0.5),\n    dict(type='PhotoMetricDistortion'),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_semantic_seg'])\n]\ntest_pipeline = [\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(2048, 1024),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=2,\n    workers_per_gpu=2,\n    train=dict(\n        type='DummyCityscapes',\n        pipeline=[\n            dict(\n                type='Resize', img_scale=(2048, 1024), ratio_range=(0.5, 2.0)),\n            dict(type='RandomCrop', crop_size=(512, 1024), cat_max_ratio=0.75),\n            dict(type='RandomFlip', prob=0.5),\n            dict(type='PhotoMetricDistortion'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='DefaultFormatBundle'),\n            dict(type='Collect', keys=['img', 'gt_semantic_seg'])\n        ]),\n    val=dict(\n        type='DummyCityscapes',\n        pipeline=[\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(2048, 1024),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]),\n    test=dict(\n        type='DummyCityscapes',\n        pipeline=[\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(2048, 1024),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]))\nlog_config = dict(\n    interval=50, hooks=[dict(type='TextLoggerHook', by_epoch=False)])\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = None\nresume_from = None\nworkflow = [('train', 1)]\ncudnn_benchmark = True\noptimizer = dict(type='SGD', lr=0.01, momentum=0.9, weight_decay=0.0005)\noptimizer_config = dict()\nlr_config = dict(policy='poly', power=0.9, min_lr=0.0001, by_epoch=False)\nrunner = dict(type='IterBasedRunner', max_iters=2000)\ncheckpoint_config = dict(by_epoch=False, interval=8000)\nevaluation = dict(interval=8000, metric='mIoU')\nwork_dir = 'work_dirs_1node_8gpu/upernet_r50_512x1024_2k_dummy_cityscapes'\ngpu_ids = range(0, 1)\nseed = None\n", "CLASSES": ["road", "sidewalk", "building", "wall", "fence", "pole", "traffic light", "traffic sign", "vegetation", "terrain", "sky", "person", "rider", "car", "truck", "bus", "train", "motorcycle", "bicycle"], "PALETTE": [[128, 64, 128], [244, 35, 232], [70, 70, 70], [102, 102, 156], [190, 153, 153], [153, 153, 153], [250, 170, 30], [220, 220, 0], [107, 142, 35], [152, 251, 152], [70, 130, 180], [220, 20, 60], [255, 0, 0], [0, 0, 142], [0, 0, 70], [0, 60, 100], [0, 80, 100], [0, 0, 230], [119, 11, 32]]}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 0.00978, "memory": 19973, "data_time": 0.04232, "decode.loss_seg": 2.95215, "decode.acc_seg": 5.26458, "aux.loss_seg": 1.17908, "aux.acc_seg": 5.26366, "loss": 4.13122, "time": 1.09287}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 0.00956, "memory": 19973, "data_time": 0.03816, "decode.loss_seg": 2.95015, "decode.acc_seg": 5.25793, "aux.loss_seg": 1.17882, "aux.acc_seg": 5.26473, "loss": 4.12897, "time": 0.57251}
{"mode": "train", "epoch": 1, "iter": 150, "lr": 0.00933, "memory": 19973, "data_time": 0.01573, "decode.loss_seg": 2.94905, "decode.acc_seg": 5.26123, "aux.loss_seg": 1.17873, "aux.acc_seg": 5.26466, "loss": 4.12779, "time": 0.52344}
{"mode": "train", "epoch": 2, "iter": 200, "lr": 0.00911, "memory": 19973, "data_time": 0.02243, "decode.loss_seg": 2.94822, "decode.acc_seg": 5.26385, "aux.loss_seg": 1.17866, "aux.acc_seg": 5.26303, "loss": 4.12688, "time": 0.51032}
{"mode": "train", "epoch": 2, "iter": 250, "lr": 0.00888, "memory": 19973, "data_time": 0.02622, "decode.loss_seg": 2.94761, "decode.acc_seg": 5.27257, "aux.loss_seg": 1.1786, "aux.acc_seg": 5.26236, "loss": 4.12621, "time": 0.49631}
{"mode": "train", "epoch": 2, "iter": 300, "lr": 0.00866, "memory": 19973, "data_time": 0.01846, "decode.loss_seg": 2.94714, "decode.acc_seg": 5.26473, "aux.loss_seg": 1.17854, "aux.acc_seg": 5.25929, "loss": 4.12568, "time": 0.51582}
{"mode": "train", "epoch": 2, "iter": 350, "lr": 0.00843, "memory": 19973, "data_time": 0.02205, "decode.loss_seg": 2.94675, "decode.acc_seg": 5.26428, "aux.loss_seg": 1.17848, "aux.acc_seg": 5.26469, "loss": 4.12523, "time": 0.46867}
{"mode": "train", "epoch": 3, "iter": 400, "lr": 0.0082, "memory": 19973, "data_time": 0.02437, "decode.loss_seg": 2.94642, "decode.acc_seg": 5.26114, "aux.loss_seg": 1.17844, "aux.acc_seg": 5.26462, "loss": 4.12486, "time": 0.46866}
{"mode": "train", "epoch": 3, "iter": 450, "lr": 0.00798, "memory": 19973, "data_time": 0.02337, "decode.loss_seg": 2.94615, "decode.acc_seg": 5.2637, "aux.loss_seg": 1.17839, "aux.acc_seg": 5.26794, "loss": 4.12454, "time": 0.57138}
{"mode": "train", "epoch": 3, "iter": 500, "lr": 0.00775, "memory": 19973, "data_time": 0.01641, "decode.loss_seg": 2.94592, "decode.acc_seg": 5.26352, "aux.loss_seg": 1.17835, "aux.acc_seg": 5.26533, "loss": 4.12427, "time": 0.46829}
{"mode": "train", "epoch": 3, "iter": 550, "lr": 0.00752, "memory": 19973, "data_time": 0.01879, "decode.loss_seg": 2.94572, "decode.acc_seg": 5.26411, "aux.loss_seg": 1.17832, "aux.acc_seg": 5.25894, "loss": 4.12404, "time": 0.51497}
{"mode": "train", "epoch": 4, "iter": 600, "lr": 0.00729, "memory": 19973, "data_time": 0.02448, "decode.loss_seg": 2.94553, "decode.acc_seg": 5.26464, "aux.loss_seg": 1.17828, "aux.acc_seg": 5.26862, "loss": 4.12381, "time": 0.51919}
{"mode": "train", "epoch": 4, "iter": 650, "lr": 0.00706, "memory": 19973, "data_time": 0.01883, "decode.loss_seg": 2.94541, "decode.acc_seg": 5.26433, "aux.loss_seg": 1.17825, "aux.acc_seg": 5.25881, "loss": 4.12366, "time": 0.47263}
{"mode": "train", "epoch": 4, "iter": 700, "lr": 0.00682, "memory": 19973, "data_time": 0.0148, "decode.loss_seg": 2.9453, "decode.acc_seg": 5.26328, "aux.loss_seg": 1.17822, "aux.acc_seg": 5.25986, "loss": 4.12353, "time": 0.47175}
{"mode": "train", "epoch": 5, "iter": 750, "lr": 0.00659, "memory": 19973, "data_time": 0.02447, "decode.loss_seg": 2.94522, "decode.acc_seg": 5.26156, "aux.loss_seg": 1.17821, "aux.acc_seg": 5.26118, "loss": 4.12343, "time": 0.4824}
{"mode": "train", "epoch": 5, "iter": 800, "lr": 0.00636, "memory": 19973, "data_time": 0.01728, "decode.loss_seg": 2.94514, "decode.acc_seg": 5.26295, "aux.loss_seg": 1.17818, "aux.acc_seg": 5.26471, "loss": 4.12332, "time": 0.50261}
{"mode": "train", "epoch": 5, "iter": 850, "lr": 0.00612, "memory": 19973, "data_time": 0.03356, "decode.loss_seg": 2.94508, "decode.acc_seg": 5.26521, "aux.loss_seg": 1.17816, "aux.acc_seg": 5.26931, "loss": 4.12325, "time": 0.60194}
{"mode": "train", "epoch": 5, "iter": 900, "lr": 0.00589, "memory": 19973, "data_time": 0.01946, "decode.loss_seg": 2.94503, "decode.acc_seg": 5.26707, "aux.loss_seg": 1.17815, "aux.acc_seg": 5.26471, "loss": 4.12318, "time": 0.48496}
{"mode": "train", "epoch": 6, "iter": 950, "lr": 0.00565, "memory": 19973, "data_time": 0.02301, "decode.loss_seg": 2.94499, "decode.acc_seg": 5.26068, "aux.loss_seg": 1.17814, "aux.acc_seg": 5.26472, "loss": 4.12313, "time": 0.52162}
{"mode": "train", "epoch": 6, "iter": 1000, "lr": 0.00541, "memory": 19973, "data_time": 0.01632, "decode.loss_seg": 2.94496, "decode.acc_seg": 5.26148, "aux.loss_seg": 1.17813, "aux.acc_seg": 5.2635, "loss": 4.12309, "time": 0.48588}
{"mode": "train", "epoch": 6, "iter": 1050, "lr": 0.00517, "memory": 19973, "data_time": 0.01526, "decode.loss_seg": 2.94493, "decode.acc_seg": 5.26199, "aux.loss_seg": 1.17811, "aux.acc_seg": 5.26342, "loss": 4.12305, "time": 0.48127}
{"mode": "train", "epoch": 6, "iter": 1100, "lr": 0.00493, "memory": 19973, "data_time": 0.02284, "decode.loss_seg": 2.9449, "decode.acc_seg": 5.26259, "aux.loss_seg": 1.1781, "aux.acc_seg": 5.26472, "loss": 4.12301, "time": 0.46321}
{"mode": "train", "epoch": 7, "iter": 1150, "lr": 0.00469, "memory": 19973, "data_time": 0.02463, "decode.loss_seg": 2.94487, "decode.acc_seg": 5.26465, "aux.loss_seg": 1.17809, "aux.acc_seg": 5.26339, "loss": 4.12297, "time": 0.49749}
{"mode": "train", "epoch": 7, "iter": 1200, "lr": 0.00444, "memory": 19973, "data_time": 0.01766, "decode.loss_seg": 2.94487, "decode.acc_seg": 5.26398, "aux.loss_seg": 1.17808, "aux.acc_seg": 5.26675, "loss": 4.12295, "time": 0.50742}
{"mode": "train", "epoch": 7, "iter": 1250, "lr": 0.0042, "memory": 19973, "data_time": 0.01568, "decode.loss_seg": 2.94484, "decode.acc_seg": 5.26262, "aux.loss_seg": 1.17808, "aux.acc_seg": 5.26299, "loss": 4.12292, "time": 0.52004}
{"mode": "train", "epoch": 7, "iter": 1300, "lr": 0.00395, "memory": 19973, "data_time": 0.02098, "decode.loss_seg": 2.94483, "decode.acc_seg": 5.26225, "aux.loss_seg": 1.17807, "aux.acc_seg": 5.26524, "loss": 4.1229, "time": 0.48197}
{"mode": "train", "epoch": 8, "iter": 1350, "lr": 0.00371, "memory": 19973, "data_time": 0.02093, "decode.loss_seg": 2.9448, "decode.acc_seg": 5.26123, "aux.loss_seg": 1.17806, "aux.acc_seg": 5.26403, "loss": 4.12286, "time": 0.53328}
{"mode": "train", "epoch": 8, "iter": 1400, "lr": 0.00346, "memory": 19973, "data_time": 0.02489, "decode.loss_seg": 2.94479, "decode.acc_seg": 5.26182, "aux.loss_seg": 1.17806, "aux.acc_seg": 5.2587, "loss": 4.12285, "time": 0.51377}
{"mode": "train", "epoch": 8, "iter": 1450, "lr": 0.0032, "memory": 19973, "data_time": 0.02618, "decode.loss_seg": 2.94478, "decode.acc_seg": 5.26366, "aux.loss_seg": 1.17805, "aux.acc_seg": 5.26312, "loss": 4.12283, "time": 0.51321}
{"mode": "train", "epoch": 9, "iter": 1500, "lr": 0.00295, "memory": 19973, "data_time": 0.02538, "decode.loss_seg": 2.94477, "decode.acc_seg": 5.26399, "aux.loss_seg": 1.17805, "aux.acc_seg": 5.26615, "loss": 4.12281, "time": 0.47581}
{"mode": "train", "epoch": 9, "iter": 1550, "lr": 0.00269, "memory": 19973, "data_time": 0.01477, "decode.loss_seg": 2.94476, "decode.acc_seg": 5.2645, "aux.loss_seg": 1.17804, "aux.acc_seg": 5.26069, "loss": 4.1228, "time": 0.49372}
{"mode": "train", "epoch": 9, "iter": 1600, "lr": 0.00243, "memory": 19973, "data_time": 0.0171, "decode.loss_seg": 2.94476, "decode.acc_seg": 5.25966, "aux.loss_seg": 1.17804, "aux.acc_seg": 5.26545, "loss": 4.1228, "time": 0.60272}
{"mode": "train", "epoch": 9, "iter": 1650, "lr": 0.00217, "memory": 19973, "data_time": 0.01827, "decode.loss_seg": 2.94475, "decode.acc_seg": 5.26447, "aux.loss_seg": 1.17804, "aux.acc_seg": 5.26242, "loss": 4.12279, "time": 0.45341}
{"mode": "train", "epoch": 10, "iter": 1700, "lr": 0.0019, "memory": 19973, "data_time": 0.04055, "decode.loss_seg": 2.94474, "decode.acc_seg": 5.26458, "aux.loss_seg": 1.17803, "aux.acc_seg": 5.26206, "loss": 4.12278, "time": 0.53479}
{"mode": "train", "epoch": 10, "iter": 1750, "lr": 0.00163, "memory": 19973, "data_time": 0.01818, "decode.loss_seg": 2.94473, "decode.acc_seg": 5.2638, "aux.loss_seg": 1.17803, "aux.acc_seg": 5.26549, "loss": 4.12276, "time": 0.46765}
{"mode": "train", "epoch": 10, "iter": 1800, "lr": 0.00135, "memory": 19973, "data_time": 0.01481, "decode.loss_seg": 2.94473, "decode.acc_seg": 5.26042, "aux.loss_seg": 1.17803, "aux.acc_seg": 5.26232, "loss": 4.12275, "time": 0.57241}
{"mode": "train", "epoch": 10, "iter": 1850, "lr": 0.00107, "memory": 19973, "data_time": 0.01611, "decode.loss_seg": 2.94472, "decode.acc_seg": 5.26507, "aux.loss_seg": 1.17803, "aux.acc_seg": 5.26687, "loss": 4.12275, "time": 0.49471}
{"mode": "train", "epoch": 11, "iter": 1900, "lr": 0.00077, "memory": 19973, "data_time": 0.01824, "decode.loss_seg": 2.94472, "decode.acc_seg": 5.26086, "aux.loss_seg": 1.17802, "aux.acc_seg": 5.26699, "loss": 4.12274, "time": 0.49826}
{"mode": "train", "epoch": 11, "iter": 1950, "lr": 0.00046, "memory": 19973, "data_time": 0.01692, "decode.loss_seg": 2.94471, "decode.acc_seg": 5.26514, "aux.loss_seg": 1.17803, "aux.acc_seg": 5.2603, "loss": 4.12274, "time": 0.47638}
{"mode": "train", "epoch": 11, "iter": 2000, "lr": 0.00011, "memory": 19973, "data_time": 0.03014, "decode.loss_seg": 2.94471, "decode.acc_seg": 5.26504, "aux.loss_seg": 1.17802, "aux.acc_seg": 5.26563, "loss": 4.12274, "time": 0.57828}
