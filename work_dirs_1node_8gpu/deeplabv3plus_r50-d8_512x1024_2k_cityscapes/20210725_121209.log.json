{"env_info": "sys.platform: linux\nPython: 3.7.10 (default, Feb 26 2021, 18:47:35) [GCC 7.3.0]\nCUDA available: True\nGPU 0,1,2,3,4,5,6,7: Tesla V100-SXM2-32GB\nCUDA_HOME: /mnt/cache/share/polaris/dep/cuda-10.1-cudnn7.6.5\nNVCC: Cuda compilation tools, release 10.1, V10.1.243\nGCC: gcc (GCC) 5.4.0\nPyTorch: 1.8.0\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) Math Kernel Library Version 2020.0.2 Product Build 20200624 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v1.7.0 (Git Hash 7aed236906b1f7a05c0917e5257a1af05e9ff683)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 10.1\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_37,code=compute_37\n  - CuDNN 7.6.3\n  - Magma 2.5.2\n  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=10.1, CUDNN_VERSION=7.6.3, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.8.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, \n\nTorchVision: 0.9.0\nOpenCV: 4.5.1\nMMCV: 1.3.8\nMMCV Compiler: GCC 7.3\nMMCV CUDA Compiler: 10.1\nMMSegmentation: 0.15.0+f48c6a1", "seed": null, "exp_name": "deeplabv3plus_r50-d8_512x1024_2k_cityscapes.py", "mmseg_version": "0.15.0+f48c6a1", "config": "norm_cfg = dict(type='SyncBN', requires_grad=True)\nmodel = dict(\n    type='EncoderDecoder',\n    pretrained='open-mmlab://resnet50_v1c',\n    backbone=dict(\n        type='ResNetV1c',\n        depth=50,\n        num_stages=4,\n        out_indices=(0, 1, 2, 3),\n        dilations=(1, 1, 2, 4),\n        strides=(1, 2, 1, 1),\n        norm_cfg=dict(type='SyncBN', requires_grad=True),\n        norm_eval=False,\n        style='pytorch',\n        contract_dilation=True,\n        pretrained='open-mmlab://resnet50_v1c'),\n    decode_head=dict(\n        type='DepthwiseSeparableASPPHead',\n        in_channels=2048,\n        in_index=3,\n        channels=512,\n        dilations=(1, 12, 24, 36),\n        c1_in_channels=256,\n        c1_channels=48,\n        dropout_ratio=0.1,\n        num_classes=19,\n        norm_cfg=dict(type='SyncBN', requires_grad=True),\n        align_corners=False,\n        loss_decode=dict(\n            type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0)),\n    auxiliary_head=dict(\n        type='FCNHead',\n        in_channels=1024,\n        in_index=2,\n        channels=256,\n        num_convs=1,\n        concat_input=False,\n        dropout_ratio=0.1,\n        num_classes=19,\n        norm_cfg=dict(type='SyncBN', requires_grad=True),\n        align_corners=False,\n        loss_decode=dict(\n            type='CrossEntropyLoss', use_sigmoid=False, loss_weight=0.4)),\n    train_cfg=dict(),\n    test_cfg=dict(mode='whole'))\ndataset_type = 'CityscapesDataset'\ndata_root = 'data/cityscapes/'\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ncrop_size = (512, 1024)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations'),\n    dict(type='Resize', img_scale=(2048, 1024), ratio_range=(0.5, 2.0)),\n    dict(type='RandomCrop', crop_size=(512, 1024), cat_max_ratio=0.75),\n    dict(type='RandomFlip', prob=0.5),\n    dict(type='PhotoMetricDistortion'),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='Pad', size=(512, 1024), pad_val=0, seg_pad_val=255),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_semantic_seg'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(2048, 1024),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=2,\n    workers_per_gpu=2,\n    train=dict(\n        type='CityscapesDataset',\n        data_root='data/cityscapes/',\n        img_dir='leftImg8bit/train',\n        ann_dir='gtFine/train',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations'),\n            dict(\n                type='Resize', img_scale=(2048, 1024), ratio_range=(0.5, 2.0)),\n            dict(type='RandomCrop', crop_size=(512, 1024), cat_max_ratio=0.75),\n            dict(type='RandomFlip', prob=0.5),\n            dict(type='PhotoMetricDistortion'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size=(512, 1024), pad_val=0, seg_pad_val=255),\n            dict(type='DefaultFormatBundle'),\n            dict(type='Collect', keys=['img', 'gt_semantic_seg'])\n        ]),\n    val=dict(\n        type='CityscapesDataset',\n        data_root='data/cityscapes/',\n        img_dir='leftImg8bit/val',\n        ann_dir='gtFine/val',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(2048, 1024),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]),\n    test=dict(\n        type='CityscapesDataset',\n        data_root='data/cityscapes/',\n        img_dir='leftImg8bit/val',\n        ann_dir='gtFine/val',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(2048, 1024),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]))\nlog_config = dict(\n    interval=50, hooks=[dict(type='TextLoggerHook', by_epoch=False)])\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = None\nresume_from = None\nworkflow = [('train', 1)]\ncudnn_benchmark = True\noptimizer = dict(type='SGD', lr=0.01, momentum=0.9, weight_decay=0.0005)\noptimizer_config = dict()\nlr_config = dict(policy='poly', power=0.9, min_lr=0.0001, by_epoch=False)\nrunner = dict(type='IterBasedRunner', max_iters=2000)\ncheckpoint_config = dict(by_epoch=False, interval=8000)\nevaluation = dict(interval=8000, metric='mIoU')\nwork_dir = 'work_dirs_1node_8gpu/deeplabv3plus_r50-d8_512x1024_2k_cityscapes'\ngpu_ids = range(0, 1)\nseed = None\n", "CLASSES": ["road", "sidewalk", "building", "wall", "fence", "pole", "traffic light", "traffic sign", "vegetation", "terrain", "sky", "person", "rider", "car", "truck", "bus", "train", "motorcycle", "bicycle"], "PALETTE": [[128, 64, 128], [244, 35, 232], [70, 70, 70], [102, 102, 156], [190, 153, 153], [153, 153, 153], [250, 170, 30], [220, 220, 0], [107, 142, 35], [152, 251, 152], [70, 130, 180], [220, 20, 60], [255, 0, 0], [0, 0, 142], [0, 0, 70], [0, 60, 100], [0, 80, 100], [0, 0, 230], [119, 11, 32]]}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 0.00978, "memory": 18770, "data_time": 0.09093, "decode.loss_seg": 1.60156, "decode.acc_seg": 47.97356, "aux.loss_seg": 0.77022, "aux.acc_seg": 41.58026, "loss": 2.37178, "time": 1.11128}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 0.00956, "memory": 18770, "data_time": 0.01375, "decode.loss_seg": 0.81409, "decode.acc_seg": 72.01671, "aux.loss_seg": 0.43544, "aux.acc_seg": 66.52931, "loss": 1.24953, "time": 0.58309}
{"mode": "train", "epoch": 1, "iter": 150, "lr": 0.00933, "memory": 18770, "data_time": 0.02596, "decode.loss_seg": 0.62705, "decode.acc_seg": 76.87057, "aux.loss_seg": 0.33401, "aux.acc_seg": 72.08187, "loss": 0.96106, "time": 0.6478}
{"mode": "train", "epoch": 2, "iter": 200, "lr": 0.00911, "memory": 18770, "data_time": 0.03068, "decode.loss_seg": 0.53885, "decode.acc_seg": 78.5638, "aux.loss_seg": 0.28805, "aux.acc_seg": 73.90909, "loss": 0.8269, "time": 0.59122}
{"mode": "train", "epoch": 2, "iter": 250, "lr": 0.00888, "memory": 18770, "data_time": 0.01188, "decode.loss_seg": 0.52457, "decode.acc_seg": 79.40567, "aux.loss_seg": 0.28656, "aux.acc_seg": 74.59182, "loss": 0.81113, "time": 0.53101}
{"mode": "train", "epoch": 2, "iter": 300, "lr": 0.00866, "memory": 18770, "data_time": 0.02945, "decode.loss_seg": 0.48264, "decode.acc_seg": 80.49406, "aux.loss_seg": 0.26417, "aux.acc_seg": 76.55212, "loss": 0.74681, "time": 0.58399}
{"mode": "train", "epoch": 2, "iter": 350, "lr": 0.00843, "memory": 18770, "data_time": 0.0124, "decode.loss_seg": 0.44445, "decode.acc_seg": 81.61551, "aux.loss_seg": 0.24725, "aux.acc_seg": 77.57747, "loss": 0.69169, "time": 0.57021}
{"mode": "train", "epoch": 3, "iter": 400, "lr": 0.0082, "memory": 18770, "data_time": 0.02935, "decode.loss_seg": 0.38388, "decode.acc_seg": 82.61494, "aux.loss_seg": 0.22084, "aux.acc_seg": 78.74677, "loss": 0.60472, "time": 0.59928}
{"mode": "train", "epoch": 3, "iter": 450, "lr": 0.00798, "memory": 18770, "data_time": 0.015, "decode.loss_seg": 0.37784, "decode.acc_seg": 82.71559, "aux.loss_seg": 0.22231, "aux.acc_seg": 78.98275, "loss": 0.60015, "time": 0.52608}
{"mode": "train", "epoch": 3, "iter": 500, "lr": 0.00775, "memory": 18770, "data_time": 0.01237, "decode.loss_seg": 0.37731, "decode.acc_seg": 82.84508, "aux.loss_seg": 0.2146, "aux.acc_seg": 79.47817, "loss": 0.59191, "time": 0.58479}
{"mode": "train", "epoch": 3, "iter": 550, "lr": 0.00752, "memory": 18770, "data_time": 0.01785, "decode.loss_seg": 0.37326, "decode.acc_seg": 82.82903, "aux.loss_seg": 0.22395, "aux.acc_seg": 78.93089, "loss": 0.59721, "time": 0.55076}
{"mode": "train", "epoch": 4, "iter": 600, "lr": 0.00729, "memory": 18770, "data_time": 0.02926, "decode.loss_seg": 0.34187, "decode.acc_seg": 83.42596, "aux.loss_seg": 0.20251, "aux.acc_seg": 79.60395, "loss": 0.54438, "time": 0.55732}
{"mode": "train", "epoch": 4, "iter": 650, "lr": 0.00706, "memory": 18770, "data_time": 0.01416, "decode.loss_seg": 0.34066, "decode.acc_seg": 83.6811, "aux.loss_seg": 0.20577, "aux.acc_seg": 79.84262, "loss": 0.54642, "time": 0.5339}
{"mode": "train", "epoch": 4, "iter": 700, "lr": 0.00682, "memory": 18770, "data_time": 0.01309, "decode.loss_seg": 0.35435, "decode.acc_seg": 83.06843, "aux.loss_seg": 0.2136, "aux.acc_seg": 79.12359, "loss": 0.56795, "time": 0.5258}
{"mode": "train", "epoch": 5, "iter": 750, "lr": 0.00659, "memory": 18770, "data_time": 0.02115, "decode.loss_seg": 0.32336, "decode.acc_seg": 84.22141, "aux.loss_seg": 0.1939, "aux.acc_seg": 80.39597, "loss": 0.51726, "time": 0.54152}
{"mode": "train", "epoch": 5, "iter": 800, "lr": 0.00636, "memory": 18770, "data_time": 0.01191, "decode.loss_seg": 0.33611, "decode.acc_seg": 83.79108, "aux.loss_seg": 0.19814, "aux.acc_seg": 80.23388, "loss": 0.53424, "time": 0.60542}
{"mode": "train", "epoch": 5, "iter": 850, "lr": 0.00612, "memory": 18770, "data_time": 0.03161, "decode.loss_seg": 0.3114, "decode.acc_seg": 84.43271, "aux.loss_seg": 0.18202, "aux.acc_seg": 81.12848, "loss": 0.49343, "time": 0.61357}
{"mode": "train", "epoch": 5, "iter": 900, "lr": 0.00589, "memory": 18770, "data_time": 0.02919, "decode.loss_seg": 0.29358, "decode.acc_seg": 84.55563, "aux.loss_seg": 0.18013, "aux.acc_seg": 81.13901, "loss": 0.47371, "time": 0.58159}
{"mode": "train", "epoch": 6, "iter": 950, "lr": 0.00565, "memory": 18770, "data_time": 0.02354, "decode.loss_seg": 0.30056, "decode.acc_seg": 84.52593, "aux.loss_seg": 0.18511, "aux.acc_seg": 80.62825, "loss": 0.48567, "time": 0.53234}
{"mode": "train", "epoch": 6, "iter": 1000, "lr": 0.00541, "memory": 18770, "data_time": 0.01874, "decode.loss_seg": 0.30421, "decode.acc_seg": 84.79632, "aux.loss_seg": 0.18559, "aux.acc_seg": 81.13888, "loss": 0.48981, "time": 0.55633}
{"mode": "train", "epoch": 6, "iter": 1050, "lr": 0.00517, "memory": 18770, "data_time": 0.01315, "decode.loss_seg": 0.27753, "decode.acc_seg": 86.0274, "aux.loss_seg": 0.17369, "aux.acc_seg": 82.4387, "loss": 0.45122, "time": 0.51824}
{"mode": "train", "epoch": 6, "iter": 1100, "lr": 0.00493, "memory": 18770, "data_time": 0.01486, "decode.loss_seg": 0.27524, "decode.acc_seg": 85.62265, "aux.loss_seg": 0.16957, "aux.acc_seg": 82.13075, "loss": 0.44481, "time": 0.57284}
{"mode": "train", "epoch": 7, "iter": 1150, "lr": 0.00469, "memory": 18770, "data_time": 0.03097, "decode.loss_seg": 0.28022, "decode.acc_seg": 85.19448, "aux.loss_seg": 0.1693, "aux.acc_seg": 81.89692, "loss": 0.44952, "time": 0.59815}
{"mode": "train", "epoch": 7, "iter": 1200, "lr": 0.00444, "memory": 18770, "data_time": 0.01509, "decode.loss_seg": 0.26501, "decode.acc_seg": 85.70611, "aux.loss_seg": 0.16795, "aux.acc_seg": 81.90055, "loss": 0.43296, "time": 0.5962}
{"mode": "train", "epoch": 7, "iter": 1250, "lr": 0.0042, "memory": 18770, "data_time": 0.0177, "decode.loss_seg": 0.27663, "decode.acc_seg": 84.67255, "aux.loss_seg": 0.17138, "aux.acc_seg": 81.06705, "loss": 0.44801, "time": 0.55734}
{"mode": "train", "epoch": 7, "iter": 1300, "lr": 0.00395, "memory": 18770, "data_time": 0.01513, "decode.loss_seg": 0.26571, "decode.acc_seg": 85.82899, "aux.loss_seg": 0.17021, "aux.acc_seg": 82.1436, "loss": 0.43593, "time": 0.55076}
{"mode": "train", "epoch": 8, "iter": 1350, "lr": 0.00371, "memory": 18770, "data_time": 0.0223, "decode.loss_seg": 0.25641, "decode.acc_seg": 85.74896, "aux.loss_seg": 0.16233, "aux.acc_seg": 82.04971, "loss": 0.41874, "time": 0.53451}
{"mode": "train", "epoch": 8, "iter": 1400, "lr": 0.00346, "memory": 18770, "data_time": 0.02237, "decode.loss_seg": 0.28119, "decode.acc_seg": 85.10884, "aux.loss_seg": 0.17793, "aux.acc_seg": 81.16611, "loss": 0.45912, "time": 0.5653}
{"mode": "train", "epoch": 8, "iter": 1450, "lr": 0.0032, "memory": 18770, "data_time": 0.01746, "decode.loss_seg": 0.27229, "decode.acc_seg": 85.31773, "aux.loss_seg": 0.16321, "aux.acc_seg": 82.08023, "loss": 0.43549, "time": 0.57589}
{"mode": "train", "epoch": 9, "iter": 1500, "lr": 0.00295, "memory": 18770, "data_time": 0.03048, "decode.loss_seg": 0.25512, "decode.acc_seg": 85.9435, "aux.loss_seg": 0.16099, "aux.acc_seg": 82.31706, "loss": 0.41612, "time": 0.60532}
{"mode": "train", "epoch": 9, "iter": 1550, "lr": 0.00269, "memory": 18770, "data_time": 0.01344, "decode.loss_seg": 0.25125, "decode.acc_seg": 85.67713, "aux.loss_seg": 0.15574, "aux.acc_seg": 82.2548, "loss": 0.40699, "time": 0.57393}
{"mode": "train", "epoch": 9, "iter": 1600, "lr": 0.00243, "memory": 18770, "data_time": 0.01604, "decode.loss_seg": 0.2578, "decode.acc_seg": 85.72972, "aux.loss_seg": 0.16198, "aux.acc_seg": 82.12988, "loss": 0.41978, "time": 0.55289}
{"mode": "train", "epoch": 9, "iter": 1650, "lr": 0.00217, "memory": 18770, "data_time": 0.01027, "decode.loss_seg": 0.24954, "decode.acc_seg": 86.1338, "aux.loss_seg": 0.15569, "aux.acc_seg": 82.69951, "loss": 0.40523, "time": 0.52398}
{"mode": "train", "epoch": 10, "iter": 1700, "lr": 0.0019, "memory": 18770, "data_time": 0.02192, "decode.loss_seg": 0.24759, "decode.acc_seg": 86.37893, "aux.loss_seg": 0.15612, "aux.acc_seg": 82.83747, "loss": 0.40372, "time": 0.56983}
{"mode": "train", "epoch": 10, "iter": 1750, "lr": 0.00163, "memory": 18770, "data_time": 0.0271, "decode.loss_seg": 0.25841, "decode.acc_seg": 86.46943, "aux.loss_seg": 0.1649, "aux.acc_seg": 82.64692, "loss": 0.42331, "time": 0.57523}
{"mode": "train", "epoch": 10, "iter": 1800, "lr": 0.00135, "memory": 18770, "data_time": 0.01549, "decode.loss_seg": 0.26183, "decode.acc_seg": 85.74452, "aux.loss_seg": 0.16317, "aux.acc_seg": 82.02745, "loss": 0.425, "time": 0.57052}
{"mode": "train", "epoch": 10, "iter": 1850, "lr": 0.00107, "memory": 18770, "data_time": 0.01889, "decode.loss_seg": 0.24308, "decode.acc_seg": 86.55391, "aux.loss_seg": 0.1514, "aux.acc_seg": 83.08636, "loss": 0.39448, "time": 0.55474}
{"mode": "train", "epoch": 11, "iter": 1900, "lr": 0.00077, "memory": 18770, "data_time": 0.03271, "decode.loss_seg": 0.24835, "decode.acc_seg": 86.50299, "aux.loss_seg": 0.16398, "aux.acc_seg": 82.48808, "loss": 0.41233, "time": 0.65927}
{"mode": "train", "epoch": 11, "iter": 1950, "lr": 0.00046, "memory": 18770, "data_time": 0.02779, "decode.loss_seg": 0.23855, "decode.acc_seg": 85.87259, "aux.loss_seg": 0.15166, "aux.acc_seg": 82.30859, "loss": 0.39021, "time": 0.58458}
{"mode": "train", "epoch": 11, "iter": 2000, "lr": 0.00011, "memory": 18770, "data_time": 0.01577, "decode.loss_seg": 0.24273, "decode.acc_seg": 86.60827, "aux.loss_seg": 0.15293, "aux.acc_seg": 83.31922, "loss": 0.39566, "time": 0.5696}
