{"env_info": "sys.platform: linux\nPython: 3.7.10 (default, Feb 26 2021, 18:47:35) [GCC 7.3.0]\nCUDA available: True\nGPU 0,1,2,3,4,5,6,7: Tesla V100-SXM2-32GB\nCUDA_HOME: /mnt/cache/share/polaris/dep/cuda-10.1-cudnn7.6.5\nNVCC: Cuda compilation tools, release 10.1, V10.1.243\nGCC: gcc (GCC) 5.4.0\nPyTorch: 1.8.0\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) Math Kernel Library Version 2020.0.2 Product Build 20200624 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v1.7.0 (Git Hash 7aed236906b1f7a05c0917e5257a1af05e9ff683)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 10.1\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_37,code=compute_37\n  - CuDNN 7.6.3\n  - Magma 2.5.2\n  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=10.1, CUDNN_VERSION=7.6.3, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.8.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, \n\nTorchVision: 0.9.0\nOpenCV: 4.5.1\nMMCV: 1.3.8\nMMCV Compiler: GCC 7.3\nMMCV CUDA Compiler: 10.1\nMMSegmentation: 0.15.0+f48c6a1", "seed": null, "exp_name": "deeplabv3_r50-d8_512x1024_2k_dummy_cityscapes.py", "mmseg_version": "0.15.0+f48c6a1", "config": "norm_cfg = dict(type='SyncBN', requires_grad=True)\nmodel = dict(\n    type='EncoderDecoder',\n    pretrained='open-mmlab://resnet50_v1c',\n    backbone=dict(\n        type='ResNetV1c',\n        depth=50,\n        num_stages=4,\n        out_indices=(0, 1, 2, 3),\n        dilations=(1, 1, 2, 4),\n        strides=(1, 2, 1, 1),\n        norm_cfg=dict(type='SyncBN', requires_grad=True),\n        norm_eval=False,\n        style='pytorch',\n        contract_dilation=True,\n        pretrained='open-mmlab://resnet50_v1c'),\n    decode_head=dict(\n        type='ASPPHead',\n        in_channels=2048,\n        in_index=3,\n        channels=512,\n        dilations=(1, 12, 24, 36),\n        dropout_ratio=0.1,\n        num_classes=19,\n        norm_cfg=dict(type='SyncBN', requires_grad=True),\n        align_corners=False,\n        loss_decode=dict(\n            type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0)),\n    auxiliary_head=dict(\n        type='FCNHead',\n        in_channels=1024,\n        in_index=2,\n        channels=256,\n        num_convs=1,\n        concat_input=False,\n        dropout_ratio=0.1,\n        num_classes=19,\n        norm_cfg=dict(type='SyncBN', requires_grad=True),\n        align_corners=False,\n        loss_decode=dict(\n            type='CrossEntropyLoss', use_sigmoid=False, loss_weight=0.4)),\n    train_cfg=dict(),\n    test_cfg=dict(mode='whole'))\ndataset_type = 'CityscapesDataset'\ndata_root = 'data/cityscapes/'\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ncrop_size = (512, 1024)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations'),\n    dict(type='Resize', img_scale=(2048, 1024), ratio_range=(0.5, 2.0)),\n    dict(type='RandomCrop', crop_size=(512, 1024), cat_max_ratio=0.75),\n    dict(type='RandomFlip', prob=0.5),\n    dict(type='PhotoMetricDistortion'),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='Pad', size=(512, 1024), pad_val=0, seg_pad_val=255),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_semantic_seg'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(2048, 1024),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=2,\n    workers_per_gpu=2,\n    train=dict(\n        type='CityscapesDataset',\n        data_root='data/cityscapes/',\n        img_dir='leftImg8bit/train',\n        ann_dir='gtFine/train',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations'),\n            dict(\n                type='Resize', img_scale=(2048, 1024), ratio_range=(0.5, 2.0)),\n            dict(type='RandomCrop', crop_size=(512, 1024), cat_max_ratio=0.75),\n            dict(type='RandomFlip', prob=0.5),\n            dict(type='PhotoMetricDistortion'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size=(512, 1024), pad_val=0, seg_pad_val=255),\n            dict(type='DefaultFormatBundle'),\n            dict(type='Collect', keys=['img', 'gt_semantic_seg'])\n        ]),\n    val=dict(\n        type='CityscapesDataset',\n        data_root='data/cityscapes/',\n        img_dir='leftImg8bit/val',\n        ann_dir='gtFine/val',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(2048, 1024),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]),\n    test=dict(\n        type='CityscapesDataset',\n        data_root='data/cityscapes/',\n        img_dir='leftImg8bit/val',\n        ann_dir='gtFine/val',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(2048, 1024),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]))\nlog_config = dict(\n    interval=50, hooks=[dict(type='TextLoggerHook', by_epoch=False)])\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = None\nresume_from = None\nworkflow = [('train', 1)]\ncudnn_benchmark = True\noptimizer = dict(type='SGD', lr=0.01, momentum=0.9, weight_decay=0.0005)\noptimizer_config = dict()\nlr_config = dict(policy='poly', power=0.9, min_lr=0.0001, by_epoch=False)\nrunner = dict(type='IterBasedRunner', max_iters=2000)\ncheckpoint_config = dict(by_epoch=False, interval=8000)\nevaluation = dict(interval=8000, metric='mIoU')\nwork_dir = 'work_dirs_1node_8gpu/deeplabv3_r50-d8_512x1024_2k_dummy_cityscapes'\ngpu_ids = range(0, 1)\nseed = None\n", "CLASSES": ["road", "sidewalk", "building", "wall", "fence", "pole", "traffic light", "traffic sign", "vegetation", "terrain", "sky", "person", "rider", "car", "truck", "bus", "train", "motorcycle", "bicycle"], "PALETTE": [[128, 64, 128], [244, 35, 232], [70, 70, 70], [102, 102, 156], [190, 153, 153], [153, 153, 153], [250, 170, 30], [220, 220, 0], [107, 142, 35], [152, 251, 152], [70, 130, 180], [220, 20, 60], [255, 0, 0], [0, 0, 142], [0, 0, 70], [0, 60, 100], [0, 80, 100], [0, 0, 230], [119, 11, 32]]}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 0.00978, "memory": 18985, "data_time": 0.03721, "decode.loss_seg": 1.46899, "decode.acc_seg": 52.69659, "aux.loss_seg": 0.73557, "aux.acc_seg": 43.23086, "loss": 2.20456, "time": 1.16858}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 0.00956, "memory": 18985, "data_time": 0.02035, "decode.loss_seg": 0.77285, "decode.acc_seg": 73.16874, "aux.loss_seg": 0.42137, "aux.acc_seg": 67.41649, "loss": 1.19422, "time": 0.79365}
{"mode": "train", "epoch": 1, "iter": 150, "lr": 0.00933, "memory": 18985, "data_time": 0.01802, "decode.loss_seg": 0.60785, "decode.acc_seg": 77.30769, "aux.loss_seg": 0.33546, "aux.acc_seg": 72.18911, "loss": 0.94332, "time": 0.7495}
{"mode": "train", "epoch": 2, "iter": 200, "lr": 0.00911, "memory": 18985, "data_time": 0.04013, "decode.loss_seg": 0.50595, "decode.acc_seg": 79.5492, "aux.loss_seg": 0.28138, "aux.acc_seg": 75.08248, "loss": 0.78733, "time": 0.79916}
{"mode": "train", "epoch": 2, "iter": 250, "lr": 0.00888, "memory": 18985, "data_time": 0.02378, "decode.loss_seg": 0.45781, "decode.acc_seg": 80.4239, "aux.loss_seg": 0.26173, "aux.acc_seg": 76.28345, "loss": 0.71954, "time": 0.72296}
{"mode": "train", "epoch": 2, "iter": 300, "lr": 0.00866, "memory": 18985, "data_time": 0.01437, "decode.loss_seg": 0.44607, "decode.acc_seg": 81.49397, "aux.loss_seg": 0.25298, "aux.acc_seg": 77.43306, "loss": 0.69905, "time": 0.72257}
{"mode": "train", "epoch": 2, "iter": 350, "lr": 0.00843, "memory": 18985, "data_time": 0.01532, "decode.loss_seg": 0.40397, "decode.acc_seg": 82.33007, "aux.loss_seg": 0.23387, "aux.acc_seg": 78.45661, "loss": 0.63784, "time": 0.78755}
{"mode": "train", "epoch": 3, "iter": 400, "lr": 0.0082, "memory": 18985, "data_time": 0.05153, "decode.loss_seg": 0.41711, "decode.acc_seg": 81.29586, "aux.loss_seg": 0.23868, "aux.acc_seg": 77.6191, "loss": 0.65579, "time": 0.74642}
{"mode": "train", "epoch": 3, "iter": 450, "lr": 0.00798, "memory": 18985, "data_time": 0.01307, "decode.loss_seg": 0.37298, "decode.acc_seg": 82.55281, "aux.loss_seg": 0.22027, "aux.acc_seg": 78.77305, "loss": 0.59326, "time": 0.70597}
{"mode": "train", "epoch": 3, "iter": 500, "lr": 0.00775, "memory": 18985, "data_time": 0.01328, "decode.loss_seg": 0.35999, "decode.acc_seg": 82.41559, "aux.loss_seg": 0.2155, "aux.acc_seg": 78.55133, "loss": 0.57549, "time": 0.75289}
{"mode": "train", "epoch": 3, "iter": 550, "lr": 0.00752, "memory": 18985, "data_time": 0.01309, "decode.loss_seg": 0.35061, "decode.acc_seg": 83.31663, "aux.loss_seg": 0.20939, "aux.acc_seg": 79.69615, "loss": 0.56, "time": 0.74812}
{"mode": "train", "epoch": 4, "iter": 600, "lr": 0.00729, "memory": 18985, "data_time": 0.03929, "decode.loss_seg": 0.3278, "decode.acc_seg": 83.55321, "aux.loss_seg": 0.19798, "aux.acc_seg": 79.95661, "loss": 0.52578, "time": 0.78183}
{"mode": "train", "epoch": 4, "iter": 650, "lr": 0.00706, "memory": 18985, "data_time": 0.01341, "decode.loss_seg": 0.31636, "decode.acc_seg": 84.46555, "aux.loss_seg": 0.19211, "aux.acc_seg": 80.99694, "loss": 0.50847, "time": 0.75851}
{"mode": "train", "epoch": 4, "iter": 700, "lr": 0.00682, "memory": 18985, "data_time": 0.01215, "decode.loss_seg": 0.33026, "decode.acc_seg": 83.69854, "aux.loss_seg": 0.19542, "aux.acc_seg": 80.10749, "loss": 0.52569, "time": 0.72942}
{"mode": "train", "epoch": 5, "iter": 750, "lr": 0.00659, "memory": 18985, "data_time": 0.03784, "decode.loss_seg": 0.31498, "decode.acc_seg": 84.0305, "aux.loss_seg": 0.19253, "aux.acc_seg": 80.49831, "loss": 0.50751, "time": 0.76902}
{"mode": "train", "epoch": 5, "iter": 800, "lr": 0.00636, "memory": 18985, "data_time": 0.01115, "decode.loss_seg": 0.31249, "decode.acc_seg": 84.42049, "aux.loss_seg": 0.19082, "aux.acc_seg": 80.85072, "loss": 0.5033, "time": 0.77666}
{"mode": "train", "epoch": 5, "iter": 850, "lr": 0.00612, "memory": 18985, "data_time": 0.01041, "decode.loss_seg": 0.29447, "decode.acc_seg": 85.09029, "aux.loss_seg": 0.17609, "aux.acc_seg": 81.78088, "loss": 0.47055, "time": 0.70828}
{"mode": "train", "epoch": 5, "iter": 900, "lr": 0.00589, "memory": 18985, "data_time": 0.02063, "decode.loss_seg": 0.27707, "decode.acc_seg": 84.94312, "aux.loss_seg": 0.17226, "aux.acc_seg": 81.42913, "loss": 0.44933, "time": 0.74908}
{"mode": "train", "epoch": 6, "iter": 950, "lr": 0.00565, "memory": 18985, "data_time": 0.03118, "decode.loss_seg": 0.30389, "decode.acc_seg": 84.52984, "aux.loss_seg": 0.18136, "aux.acc_seg": 81.23512, "loss": 0.48526, "time": 0.75422}
{"mode": "train", "epoch": 6, "iter": 1000, "lr": 0.00541, "memory": 18985, "data_time": 0.01067, "decode.loss_seg": 0.28191, "decode.acc_seg": 84.98686, "aux.loss_seg": 0.17331, "aux.acc_seg": 81.53657, "loss": 0.45522, "time": 0.71489}
{"mode": "train", "epoch": 6, "iter": 1050, "lr": 0.00517, "memory": 18985, "data_time": 0.02612, "decode.loss_seg": 0.26715, "decode.acc_seg": 86.30268, "aux.loss_seg": 0.16333, "aux.acc_seg": 83.20028, "loss": 0.43048, "time": 0.7587}
{"mode": "train", "epoch": 6, "iter": 1100, "lr": 0.00493, "memory": 18985, "data_time": 0.01489, "decode.loss_seg": 0.27685, "decode.acc_seg": 85.11732, "aux.loss_seg": 0.17145, "aux.acc_seg": 81.49971, "loss": 0.44831, "time": 0.76973}
{"mode": "train", "epoch": 7, "iter": 1150, "lr": 0.00469, "memory": 18985, "data_time": 0.02344, "decode.loss_seg": 0.29231, "decode.acc_seg": 85.02272, "aux.loss_seg": 0.17609, "aux.acc_seg": 81.46356, "loss": 0.4684, "time": 0.78505}
{"mode": "train", "epoch": 7, "iter": 1200, "lr": 0.00444, "memory": 18985, "data_time": 0.01191, "decode.loss_seg": 0.25373, "decode.acc_seg": 86.10069, "aux.loss_seg": 0.16096, "aux.acc_seg": 82.63238, "loss": 0.41469, "time": 0.76059}
{"mode": "train", "epoch": 7, "iter": 1250, "lr": 0.0042, "memory": 18985, "data_time": 0.01245, "decode.loss_seg": 0.27464, "decode.acc_seg": 85.34293, "aux.loss_seg": 0.16691, "aux.acc_seg": 82.18596, "loss": 0.44155, "time": 0.86256}
{"mode": "train", "epoch": 7, "iter": 1300, "lr": 0.00395, "memory": 18985, "data_time": 0.01279, "decode.loss_seg": 0.27696, "decode.acc_seg": 85.40385, "aux.loss_seg": 0.17199, "aux.acc_seg": 81.82606, "loss": 0.44896, "time": 0.71416}
{"mode": "train", "epoch": 8, "iter": 1350, "lr": 0.00371, "memory": 18985, "data_time": 0.02462, "decode.loss_seg": 0.26567, "decode.acc_seg": 85.54883, "aux.loss_seg": 0.16191, "aux.acc_seg": 82.16713, "loss": 0.42758, "time": 0.79012}
{"mode": "train", "epoch": 8, "iter": 1400, "lr": 0.00346, "memory": 18985, "data_time": 0.01842, "decode.loss_seg": 0.2561, "decode.acc_seg": 85.66181, "aux.loss_seg": 0.16235, "aux.acc_seg": 82.13813, "loss": 0.41846, "time": 0.81013}
{"mode": "train", "epoch": 8, "iter": 1450, "lr": 0.0032, "memory": 18985, "data_time": 0.02541, "decode.loss_seg": 0.25563, "decode.acc_seg": 85.58386, "aux.loss_seg": 0.1584, "aux.acc_seg": 82.30434, "loss": 0.41403, "time": 0.7908}
{"mode": "train", "epoch": 9, "iter": 1500, "lr": 0.00295, "memory": 18985, "data_time": 0.02672, "decode.loss_seg": 0.26446, "decode.acc_seg": 85.81551, "aux.loss_seg": 0.16162, "aux.acc_seg": 82.35951, "loss": 0.42608, "time": 0.78568}
{"mode": "train", "epoch": 9, "iter": 1550, "lr": 0.00269, "memory": 18985, "data_time": 0.01312, "decode.loss_seg": 0.25538, "decode.acc_seg": 85.81493, "aux.loss_seg": 0.15728, "aux.acc_seg": 82.50204, "loss": 0.41266, "time": 0.83985}
{"mode": "train", "epoch": 9, "iter": 1600, "lr": 0.00243, "memory": 18985, "data_time": 0.01873, "decode.loss_seg": 0.25748, "decode.acc_seg": 86.16679, "aux.loss_seg": 0.1604, "aux.acc_seg": 82.62744, "loss": 0.41789, "time": 0.73862}
{"mode": "train", "epoch": 9, "iter": 1650, "lr": 0.00217, "memory": 18985, "data_time": 0.02394, "decode.loss_seg": 0.25436, "decode.acc_seg": 85.9898, "aux.loss_seg": 0.16026, "aux.acc_seg": 82.46504, "loss": 0.41462, "time": 0.76348}
{"mode": "train", "epoch": 10, "iter": 1700, "lr": 0.0019, "memory": 18985, "data_time": 0.02267, "decode.loss_seg": 0.25535, "decode.acc_seg": 85.29076, "aux.loss_seg": 0.15971, "aux.acc_seg": 81.94098, "loss": 0.41506, "time": 0.7344}
{"mode": "train", "epoch": 10, "iter": 1750, "lr": 0.00163, "memory": 18985, "data_time": 0.00975, "decode.loss_seg": 0.25897, "decode.acc_seg": 86.15335, "aux.loss_seg": 0.16446, "aux.acc_seg": 82.39645, "loss": 0.42343, "time": 0.71727}
{"mode": "train", "epoch": 10, "iter": 1800, "lr": 0.00135, "memory": 18985, "data_time": 0.02482, "decode.loss_seg": 0.24817, "decode.acc_seg": 85.78295, "aux.loss_seg": 0.15544, "aux.acc_seg": 82.35142, "loss": 0.40361, "time": 0.74461}
{"mode": "train", "epoch": 10, "iter": 1850, "lr": 0.00107, "memory": 18985, "data_time": 0.01385, "decode.loss_seg": 0.2428, "decode.acc_seg": 86.05122, "aux.loss_seg": 0.15124, "aux.acc_seg": 82.65626, "loss": 0.39404, "time": 0.7652}
{"mode": "train", "epoch": 11, "iter": 1900, "lr": 0.00077, "memory": 18985, "data_time": 0.02784, "decode.loss_seg": 0.2507, "decode.acc_seg": 85.95012, "aux.loss_seg": 0.16093, "aux.acc_seg": 82.19905, "loss": 0.41163, "time": 0.75388}
{"mode": "train", "epoch": 11, "iter": 1950, "lr": 0.00046, "memory": 18985, "data_time": 0.01533, "decode.loss_seg": 0.23198, "decode.acc_seg": 86.26013, "aux.loss_seg": 0.14763, "aux.acc_seg": 82.95623, "loss": 0.37961, "time": 0.74908}
{"mode": "train", "epoch": 11, "iter": 2000, "lr": 0.00011, "memory": 18985, "data_time": 0.01598, "decode.loss_seg": 0.25518, "decode.acc_seg": 86.27678, "aux.loss_seg": 0.15609, "aux.acc_seg": 83.07251, "loss": 0.41127, "time": 0.8336}
