{"env_info": "sys.platform: linux\nPython: 3.7.10 (default, Feb 26 2021, 18:47:35) [GCC 7.3.0]\nCUDA available: True\nGPU 0,1,2,3,4,5,6,7: Tesla V100-SXM2-32GB\nCUDA_HOME: /mnt/cache/share/polaris/dep/cuda-10.1-cudnn7.6.5\nNVCC: Cuda compilation tools, release 10.1, V10.1.243\nGCC: gcc (GCC) 5.4.0\nPyTorch: 1.8.0\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) Math Kernel Library Version 2020.0.2 Product Build 20200624 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v1.7.0 (Git Hash 7aed236906b1f7a05c0917e5257a1af05e9ff683)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 10.1\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_37,code=compute_37\n  - CuDNN 7.6.3\n  - Magma 2.5.2\n  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=10.1, CUDNN_VERSION=7.6.3, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.8.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, \n\nTorchVision: 0.9.0\nOpenCV: 4.5.1\nMMCV: 1.3.8\nMMCV Compiler: GCC 7.3\nMMCV CUDA Compiler: 10.1\nMMSegmentation: 0.15.0+f48c6a1", "seed": null, "exp_name": "deeplabv3_r50-d8_512x1024_2k_cityscapes.py", "mmseg_version": "0.15.0+f48c6a1", "config": "norm_cfg = dict(type='SyncBN', requires_grad=True)\nmodel = dict(\n    type='EncoderDecoder',\n    pretrained='open-mmlab://resnet50_v1c',\n    backbone=dict(\n        type='ResNetV1c',\n        depth=50,\n        num_stages=4,\n        out_indices=(0, 1, 2, 3),\n        dilations=(1, 1, 2, 4),\n        strides=(1, 2, 1, 1),\n        norm_cfg=dict(type='SyncBN', requires_grad=True),\n        norm_eval=False,\n        style='pytorch',\n        contract_dilation=True,\n        pretrained='open-mmlab://resnet50_v1c'),\n    decode_head=dict(\n        type='ASPPHead',\n        in_channels=2048,\n        in_index=3,\n        channels=512,\n        dilations=(1, 12, 24, 36),\n        dropout_ratio=0.1,\n        num_classes=19,\n        norm_cfg=dict(type='SyncBN', requires_grad=True),\n        align_corners=False,\n        loss_decode=dict(\n            type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0)),\n    auxiliary_head=dict(\n        type='FCNHead',\n        in_channels=1024,\n        in_index=2,\n        channels=256,\n        num_convs=1,\n        concat_input=False,\n        dropout_ratio=0.1,\n        num_classes=19,\n        norm_cfg=dict(type='SyncBN', requires_grad=True),\n        align_corners=False,\n        loss_decode=dict(\n            type='CrossEntropyLoss', use_sigmoid=False, loss_weight=0.4)),\n    train_cfg=dict(),\n    test_cfg=dict(mode='whole'))\ndataset_type = 'CityscapesDataset'\ndata_root = 'data/cityscapes/'\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ncrop_size = (512, 1024)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations'),\n    dict(type='Resize', img_scale=(2048, 1024), ratio_range=(0.5, 2.0)),\n    dict(type='RandomCrop', crop_size=(512, 1024), cat_max_ratio=0.75),\n    dict(type='RandomFlip', prob=0.5),\n    dict(type='PhotoMetricDistortion'),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='Pad', size=(512, 1024), pad_val=0, seg_pad_val=255),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_semantic_seg'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(2048, 1024),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=2,\n    workers_per_gpu=2,\n    train=dict(\n        type='CityscapesDataset',\n        data_root='data/cityscapes/',\n        img_dir='leftImg8bit/train',\n        ann_dir='gtFine/train',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations'),\n            dict(\n                type='Resize', img_scale=(2048, 1024), ratio_range=(0.5, 2.0)),\n            dict(type='RandomCrop', crop_size=(512, 1024), cat_max_ratio=0.75),\n            dict(type='RandomFlip', prob=0.5),\n            dict(type='PhotoMetricDistortion'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size=(512, 1024), pad_val=0, seg_pad_val=255),\n            dict(type='DefaultFormatBundle'),\n            dict(type='Collect', keys=['img', 'gt_semantic_seg'])\n        ]),\n    val=dict(\n        type='CityscapesDataset',\n        data_root='data/cityscapes/',\n        img_dir='leftImg8bit/val',\n        ann_dir='gtFine/val',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(2048, 1024),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]),\n    test=dict(\n        type='CityscapesDataset',\n        data_root='data/cityscapes/',\n        img_dir='leftImg8bit/val',\n        ann_dir='gtFine/val',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(2048, 1024),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]))\nlog_config = dict(\n    interval=50, hooks=[dict(type='TextLoggerHook', by_epoch=False)])\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = None\nresume_from = None\nworkflow = [('train', 1)]\ncudnn_benchmark = True\noptimizer = dict(type='SGD', lr=0.01, momentum=0.9, weight_decay=0.0005)\noptimizer_config = dict()\nlr_config = dict(policy='poly', power=0.9, min_lr=0.0001, by_epoch=False)\nrunner = dict(type='IterBasedRunner', max_iters=2000)\ncheckpoint_config = dict(by_epoch=False, interval=8000)\nevaluation = dict(interval=8000, metric='mIoU')\nwork_dir = 'work_dirs_1node_8gpu/deeplabv3_r50-d8_512x1024_2k_cityscapes'\ngpu_ids = range(0, 1)\nseed = None\n", "CLASSES": ["road", "sidewalk", "building", "wall", "fence", "pole", "traffic light", "traffic sign", "vegetation", "terrain", "sky", "person", "rider", "car", "truck", "bus", "train", "motorcycle", "bicycle"], "PALETTE": [[128, 64, 128], [244, 35, 232], [70, 70, 70], [102, 102, 156], [190, 153, 153], [153, 153, 153], [250, 170, 30], [220, 220, 0], [107, 142, 35], [152, 251, 152], [70, 130, 180], [220, 20, 60], [255, 0, 0], [0, 0, 142], [0, 0, 70], [0, 60, 100], [0, 80, 100], [0, 0, 230], [119, 11, 32]]}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 0.00978, "memory": 18985, "data_time": 0.04078, "decode.loss_seg": 1.46275, "decode.acc_seg": 54.12541, "aux.loss_seg": 0.73868, "aux.acc_seg": 43.80989, "loss": 2.20143, "time": 1.2562}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 0.00956, "memory": 18985, "data_time": 0.01216, "decode.loss_seg": 0.75072, "decode.acc_seg": 73.64239, "aux.loss_seg": 0.41883, "aux.acc_seg": 67.40199, "loss": 1.16955, "time": 0.75726}
{"mode": "train", "epoch": 1, "iter": 150, "lr": 0.00933, "memory": 18985, "data_time": 0.02018, "decode.loss_seg": 0.60229, "decode.acc_seg": 77.4259, "aux.loss_seg": 0.33268, "aux.acc_seg": 72.37294, "loss": 0.93497, "time": 0.77055}
{"mode": "train", "epoch": 2, "iter": 200, "lr": 0.00911, "memory": 18985, "data_time": 0.02506, "decode.loss_seg": 0.50021, "decode.acc_seg": 79.35858, "aux.loss_seg": 0.28351, "aux.acc_seg": 74.4827, "loss": 0.78372, "time": 0.76044}
{"mode": "train", "epoch": 2, "iter": 250, "lr": 0.00888, "memory": 18985, "data_time": 0.01503, "decode.loss_seg": 0.43259, "decode.acc_seg": 81.49669, "aux.loss_seg": 0.25595, "aux.acc_seg": 76.8185, "loss": 0.68854, "time": 0.78204}
{"mode": "train", "epoch": 2, "iter": 300, "lr": 0.00866, "memory": 18985, "data_time": 0.01558, "decode.loss_seg": 0.44955, "decode.acc_seg": 80.80588, "aux.loss_seg": 0.25833, "aux.acc_seg": 76.88789, "loss": 0.70788, "time": 0.69652}
{"mode": "train", "epoch": 2, "iter": 350, "lr": 0.00843, "memory": 18985, "data_time": 0.01313, "decode.loss_seg": 0.42149, "decode.acc_seg": 81.77265, "aux.loss_seg": 0.24356, "aux.acc_seg": 77.8654, "loss": 0.66506, "time": 0.74066}
{"mode": "train", "epoch": 3, "iter": 400, "lr": 0.0082, "memory": 18985, "data_time": 0.05062, "decode.loss_seg": 0.3916, "decode.acc_seg": 81.836, "aux.loss_seg": 0.23403, "aux.acc_seg": 77.74052, "loss": 0.62563, "time": 0.83955}
{"mode": "train", "epoch": 3, "iter": 450, "lr": 0.00798, "memory": 18985, "data_time": 0.02533, "decode.loss_seg": 0.36606, "decode.acc_seg": 83.18393, "aux.loss_seg": 0.21983, "aux.acc_seg": 79.19298, "loss": 0.58588, "time": 0.81}
{"mode": "train", "epoch": 3, "iter": 500, "lr": 0.00775, "memory": 18985, "data_time": 0.02493, "decode.loss_seg": 0.36995, "decode.acc_seg": 82.89634, "aux.loss_seg": 0.22063, "aux.acc_seg": 78.88806, "loss": 0.59057, "time": 0.81796}
{"mode": "train", "epoch": 3, "iter": 550, "lr": 0.00752, "memory": 18985, "data_time": 0.0141, "decode.loss_seg": 0.35845, "decode.acc_seg": 83.12371, "aux.loss_seg": 0.22127, "aux.acc_seg": 78.7341, "loss": 0.57972, "time": 0.76169}
{"mode": "train", "epoch": 4, "iter": 600, "lr": 0.00729, "memory": 18985, "data_time": 0.02261, "decode.loss_seg": 0.30939, "decode.acc_seg": 84.01758, "aux.loss_seg": 0.19295, "aux.acc_seg": 80.0858, "loss": 0.50234, "time": 0.76459}
{"mode": "train", "epoch": 4, "iter": 650, "lr": 0.00706, "memory": 18985, "data_time": 0.0167, "decode.loss_seg": 0.33953, "decode.acc_seg": 83.57119, "aux.loss_seg": 0.204, "aux.acc_seg": 79.91142, "loss": 0.54352, "time": 0.7989}
{"mode": "train", "epoch": 4, "iter": 700, "lr": 0.00682, "memory": 18985, "data_time": 0.0127, "decode.loss_seg": 0.32219, "decode.acc_seg": 83.8885, "aux.loss_seg": 0.19687, "aux.acc_seg": 80.01278, "loss": 0.51906, "time": 0.80821}
{"mode": "train", "epoch": 5, "iter": 750, "lr": 0.00659, "memory": 18985, "data_time": 0.03276, "decode.loss_seg": 0.32329, "decode.acc_seg": 83.89978, "aux.loss_seg": 0.1998, "aux.acc_seg": 80.00763, "loss": 0.52309, "time": 0.74875}
{"mode": "train", "epoch": 5, "iter": 800, "lr": 0.00636, "memory": 18985, "data_time": 0.02381, "decode.loss_seg": 0.31755, "decode.acc_seg": 84.44498, "aux.loss_seg": 0.19454, "aux.acc_seg": 80.81478, "loss": 0.51209, "time": 0.76209}
{"mode": "train", "epoch": 5, "iter": 850, "lr": 0.00612, "memory": 18985, "data_time": 0.01828, "decode.loss_seg": 0.30646, "decode.acc_seg": 84.82634, "aux.loss_seg": 0.18453, "aux.acc_seg": 81.3887, "loss": 0.49099, "time": 0.78776}
{"mode": "train", "epoch": 5, "iter": 900, "lr": 0.00589, "memory": 18985, "data_time": 0.01336, "decode.loss_seg": 0.28874, "decode.acc_seg": 84.84957, "aux.loss_seg": 0.17526, "aux.acc_seg": 81.56481, "loss": 0.46399, "time": 0.76152}
{"mode": "train", "epoch": 6, "iter": 950, "lr": 0.00565, "memory": 18985, "data_time": 0.0183, "decode.loss_seg": 0.29941, "decode.acc_seg": 84.94941, "aux.loss_seg": 0.18522, "aux.acc_seg": 81.28761, "loss": 0.48463, "time": 0.79943}
{"mode": "train", "epoch": 6, "iter": 1000, "lr": 0.00541, "memory": 18985, "data_time": 0.0128, "decode.loss_seg": 0.28492, "decode.acc_seg": 85.02766, "aux.loss_seg": 0.17373, "aux.acc_seg": 81.63668, "loss": 0.45865, "time": 0.72267}
{"mode": "train", "epoch": 6, "iter": 1050, "lr": 0.00517, "memory": 18985, "data_time": 0.0129, "decode.loss_seg": 0.27169, "decode.acc_seg": 86.03492, "aux.loss_seg": 0.16502, "aux.acc_seg": 82.83047, "loss": 0.43671, "time": 0.72592}
{"mode": "train", "epoch": 6, "iter": 1100, "lr": 0.00493, "memory": 18985, "data_time": 0.01301, "decode.loss_seg": 0.27941, "decode.acc_seg": 84.98323, "aux.loss_seg": 0.17273, "aux.acc_seg": 81.52525, "loss": 0.45214, "time": 0.72755}
{"mode": "train", "epoch": 7, "iter": 1150, "lr": 0.00469, "memory": 18985, "data_time": 0.02629, "decode.loss_seg": 0.26968, "decode.acc_seg": 85.34762, "aux.loss_seg": 0.16492, "aux.acc_seg": 82.01429, "loss": 0.43459, "time": 0.73359}
{"mode": "train", "epoch": 7, "iter": 1200, "lr": 0.00444, "memory": 18985, "data_time": 0.01314, "decode.loss_seg": 0.26366, "decode.acc_seg": 86.20275, "aux.loss_seg": 0.16674, "aux.acc_seg": 82.5665, "loss": 0.4304, "time": 0.71147}
{"mode": "train", "epoch": 7, "iter": 1250, "lr": 0.0042, "memory": 18985, "data_time": 0.0316, "decode.loss_seg": 0.26244, "decode.acc_seg": 85.24045, "aux.loss_seg": 0.16499, "aux.acc_seg": 81.71752, "loss": 0.42743, "time": 0.89568}
{"mode": "train", "epoch": 7, "iter": 1300, "lr": 0.00395, "memory": 18985, "data_time": 0.01422, "decode.loss_seg": 0.27549, "decode.acc_seg": 85.06913, "aux.loss_seg": 0.17437, "aux.acc_seg": 81.30805, "loss": 0.44986, "time": 0.79109}
{"mode": "train", "epoch": 8, "iter": 1350, "lr": 0.00371, "memory": 18985, "data_time": 0.0431, "decode.loss_seg": 0.25333, "decode.acc_seg": 85.69687, "aux.loss_seg": 0.16058, "aux.acc_seg": 82.05646, "loss": 0.41391, "time": 0.80018}
{"mode": "train", "epoch": 8, "iter": 1400, "lr": 0.00346, "memory": 18985, "data_time": 0.02219, "decode.loss_seg": 0.27352, "decode.acc_seg": 85.17777, "aux.loss_seg": 0.17032, "aux.acc_seg": 81.49111, "loss": 0.44384, "time": 0.77415}
{"mode": "train", "epoch": 8, "iter": 1450, "lr": 0.0032, "memory": 18985, "data_time": 0.01188, "decode.loss_seg": 0.25962, "decode.acc_seg": 85.65213, "aux.loss_seg": 0.1622, "aux.acc_seg": 82.19486, "loss": 0.42181, "time": 0.79204}
{"mode": "train", "epoch": 9, "iter": 1500, "lr": 0.00295, "memory": 18985, "data_time": 0.03788, "decode.loss_seg": 0.25069, "decode.acc_seg": 86.17394, "aux.loss_seg": 0.15781, "aux.acc_seg": 82.66699, "loss": 0.40851, "time": 0.81362}
{"mode": "train", "epoch": 9, "iter": 1550, "lr": 0.00269, "memory": 18985, "data_time": 0.02708, "decode.loss_seg": 0.25581, "decode.acc_seg": 85.82699, "aux.loss_seg": 0.15927, "aux.acc_seg": 82.41447, "loss": 0.41508, "time": 0.75025}
{"mode": "train", "epoch": 9, "iter": 1600, "lr": 0.00243, "memory": 18985, "data_time": 0.02145, "decode.loss_seg": 0.24697, "decode.acc_seg": 86.14921, "aux.loss_seg": 0.15412, "aux.acc_seg": 82.89815, "loss": 0.40109, "time": 0.81749}
{"mode": "train", "epoch": 9, "iter": 1650, "lr": 0.00217, "memory": 18985, "data_time": 0.02502, "decode.loss_seg": 0.25023, "decode.acc_seg": 85.95595, "aux.loss_seg": 0.15667, "aux.acc_seg": 82.59869, "loss": 0.4069, "time": 0.78565}
{"mode": "train", "epoch": 10, "iter": 1700, "lr": 0.0019, "memory": 18985, "data_time": 0.05767, "decode.loss_seg": 0.23769, "decode.acc_seg": 85.67682, "aux.loss_seg": 0.14992, "aux.acc_seg": 82.55421, "loss": 0.38761, "time": 0.8125}
{"mode": "train", "epoch": 10, "iter": 1750, "lr": 0.00163, "memory": 18985, "data_time": 0.03673, "decode.loss_seg": 0.24808, "decode.acc_seg": 86.73151, "aux.loss_seg": 0.15947, "aux.acc_seg": 83.04667, "loss": 0.40754, "time": 0.80886}
{"mode": "train", "epoch": 10, "iter": 1800, "lr": 0.00135, "memory": 18985, "data_time": 0.01454, "decode.loss_seg": 0.2374, "decode.acc_seg": 86.16837, "aux.loss_seg": 0.15052, "aux.acc_seg": 82.90421, "loss": 0.38792, "time": 0.77515}
{"mode": "train", "epoch": 10, "iter": 1850, "lr": 0.00107, "memory": 18985, "data_time": 0.01552, "decode.loss_seg": 0.24224, "decode.acc_seg": 85.90467, "aux.loss_seg": 0.15022, "aux.acc_seg": 82.75401, "loss": 0.39247, "time": 0.8409}
{"mode": "train", "epoch": 11, "iter": 1900, "lr": 0.00077, "memory": 18985, "data_time": 0.02493, "decode.loss_seg": 0.25702, "decode.acc_seg": 85.99215, "aux.loss_seg": 0.16946, "aux.acc_seg": 81.793, "loss": 0.42648, "time": 0.75449}
{"mode": "train", "epoch": 11, "iter": 1950, "lr": 0.00046, "memory": 18985, "data_time": 0.01511, "decode.loss_seg": 0.22516, "decode.acc_seg": 86.82358, "aux.loss_seg": 0.14241, "aux.acc_seg": 83.65128, "loss": 0.36757, "time": 0.69006}
{"mode": "train", "epoch": 11, "iter": 2000, "lr": 0.00011, "memory": 18985, "data_time": 0.01627, "decode.loss_seg": 0.23333, "decode.acc_seg": 86.73624, "aux.loss_seg": 0.14704, "aux.acc_seg": 83.34231, "loss": 0.38037, "time": 0.80625}
