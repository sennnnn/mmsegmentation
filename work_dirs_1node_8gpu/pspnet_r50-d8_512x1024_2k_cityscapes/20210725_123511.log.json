{"env_info": "sys.platform: linux\nPython: 3.7.10 (default, Feb 26 2021, 18:47:35) [GCC 7.3.0]\nCUDA available: True\nGPU 0,1,2,3,4,5,6,7: Tesla V100-SXM2-32GB\nCUDA_HOME: /mnt/cache/share/polaris/dep/cuda-10.1-cudnn7.6.5\nNVCC: Cuda compilation tools, release 10.1, V10.1.243\nGCC: gcc (GCC) 5.4.0\nPyTorch: 1.8.0\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) Math Kernel Library Version 2020.0.2 Product Build 20200624 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v1.7.0 (Git Hash 7aed236906b1f7a05c0917e5257a1af05e9ff683)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 10.1\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_37,code=compute_37\n  - CuDNN 7.6.3\n  - Magma 2.5.2\n  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=10.1, CUDNN_VERSION=7.6.3, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.8.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, \n\nTorchVision: 0.9.0\nOpenCV: 4.5.1\nMMCV: 1.3.8\nMMCV Compiler: GCC 7.3\nMMCV CUDA Compiler: 10.1\nMMSegmentation: 0.15.0+f48c6a1", "seed": null, "exp_name": "pspnet_r50-d8_512x1024_2k_cityscapes.py", "mmseg_version": "0.15.0+f48c6a1", "config": "norm_cfg = dict(type='SyncBN', requires_grad=True)\nmodel = dict(\n    type='EncoderDecoder',\n    pretrained='open-mmlab://resnet50_v1c',\n    backbone=dict(\n        type='ResNetV1c',\n        depth=50,\n        num_stages=4,\n        out_indices=(0, 1, 2, 3),\n        dilations=(1, 1, 2, 4),\n        strides=(1, 2, 1, 1),\n        norm_cfg=dict(type='SyncBN', requires_grad=True),\n        norm_eval=False,\n        style='pytorch',\n        contract_dilation=True,\n        pretrained='open-mmlab://resnet50_v1c'),\n    decode_head=dict(\n        type='PSPHead',\n        in_channels=2048,\n        in_index=3,\n        channels=512,\n        pool_scales=(1, 2, 3, 6),\n        dropout_ratio=0.1,\n        num_classes=19,\n        norm_cfg=dict(type='SyncBN', requires_grad=True),\n        align_corners=False,\n        loss_decode=dict(\n            type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0)),\n    auxiliary_head=dict(\n        type='FCNHead',\n        in_channels=1024,\n        in_index=2,\n        channels=256,\n        num_convs=1,\n        concat_input=False,\n        dropout_ratio=0.1,\n        num_classes=19,\n        norm_cfg=dict(type='SyncBN', requires_grad=True),\n        align_corners=False,\n        loss_decode=dict(\n            type='CrossEntropyLoss', use_sigmoid=False, loss_weight=0.4)),\n    train_cfg=dict(),\n    test_cfg=dict(mode='whole'))\ndataset_type = 'CityscapesDataset'\ndata_root = 'data/cityscapes/'\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ncrop_size = (512, 1024)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations'),\n    dict(type='Resize', img_scale=(2048, 1024), ratio_range=(0.5, 2.0)),\n    dict(type='RandomCrop', crop_size=(512, 1024), cat_max_ratio=0.75),\n    dict(type='RandomFlip', prob=0.5),\n    dict(type='PhotoMetricDistortion'),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='Pad', size=(512, 1024), pad_val=0, seg_pad_val=255),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_semantic_seg'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(2048, 1024),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=2,\n    workers_per_gpu=2,\n    train=dict(\n        type='CityscapesDataset',\n        data_root='data/cityscapes/',\n        img_dir='leftImg8bit/train',\n        ann_dir='gtFine/train',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations'),\n            dict(\n                type='Resize', img_scale=(2048, 1024), ratio_range=(0.5, 2.0)),\n            dict(type='RandomCrop', crop_size=(512, 1024), cat_max_ratio=0.75),\n            dict(type='RandomFlip', prob=0.5),\n            dict(type='PhotoMetricDistortion'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size=(512, 1024), pad_val=0, seg_pad_val=255),\n            dict(type='DefaultFormatBundle'),\n            dict(type='Collect', keys=['img', 'gt_semantic_seg'])\n        ]),\n    val=dict(\n        type='CityscapesDataset',\n        data_root='data/cityscapes/',\n        img_dir='leftImg8bit/val',\n        ann_dir='gtFine/val',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(2048, 1024),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]),\n    test=dict(\n        type='CityscapesDataset',\n        data_root='data/cityscapes/',\n        img_dir='leftImg8bit/val',\n        ann_dir='gtFine/val',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(2048, 1024),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]))\nlog_config = dict(\n    interval=50, hooks=[dict(type='TextLoggerHook', by_epoch=False)])\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = None\nresume_from = None\nworkflow = [('train', 1)]\ncudnn_benchmark = True\noptimizer = dict(type='SGD', lr=0.01, momentum=0.9, weight_decay=0.0005)\noptimizer_config = dict()\nlr_config = dict(policy='poly', power=0.9, min_lr=0.0001, by_epoch=False)\nrunner = dict(type='IterBasedRunner', max_iters=2000)\ncheckpoint_config = dict(by_epoch=False, interval=8000)\nevaluation = dict(interval=8000, metric='mIoU')\nwork_dir = 'work_dirs_1node_8gpu/pspnet_r50-d8_512x1024_2k_cityscapes'\ngpu_ids = range(0, 1)\nseed = None\n", "CLASSES": ["road", "sidewalk", "building", "wall", "fence", "pole", "traffic light", "traffic sign", "vegetation", "terrain", "sky", "person", "rider", "car", "truck", "bus", "train", "motorcycle", "bicycle"], "PALETTE": [[128, 64, 128], [244, 35, 232], [70, 70, 70], [102, 102, 156], [190, 153, 153], [153, 153, 153], [250, 170, 30], [220, 220, 0], [107, 142, 35], [152, 251, 152], [70, 130, 180], [220, 20, 60], [255, 0, 0], [0, 0, 142], [0, 0, 70], [0, 60, 100], [0, 80, 100], [0, 0, 230], [119, 11, 32]]}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 0.00978, "memory": 18766, "data_time": 0.03888, "decode.loss_seg": 1.33771, "decode.acc_seg": 58.80678, "aux.loss_seg": 0.73404, "aux.acc_seg": 44.50905, "loss": 2.07175, "time": 0.97966}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 0.00956, "memory": 18766, "data_time": 0.01947, "decode.loss_seg": 0.68785, "decode.acc_seg": 75.21518, "aux.loss_seg": 0.41154, "aux.acc_seg": 67.57737, "loss": 1.09939, "time": 0.58209}
{"mode": "train", "epoch": 1, "iter": 150, "lr": 0.00933, "memory": 18766, "data_time": 0.01233, "decode.loss_seg": 0.56773, "decode.acc_seg": 77.76024, "aux.loss_seg": 0.33323, "aux.acc_seg": 72.27325, "loss": 0.90096, "time": 0.55302}
{"mode": "train", "epoch": 2, "iter": 200, "lr": 0.00911, "memory": 18766, "data_time": 0.02659, "decode.loss_seg": 0.49848, "decode.acc_seg": 79.18507, "aux.loss_seg": 0.29251, "aux.acc_seg": 74.09416, "loss": 0.79098, "time": 0.50961}
{"mode": "train", "epoch": 2, "iter": 250, "lr": 0.00888, "memory": 18766, "data_time": 0.01173, "decode.loss_seg": 0.44198, "decode.acc_seg": 81.11586, "aux.loss_seg": 0.26917, "aux.acc_seg": 75.99564, "loss": 0.71114, "time": 0.56799}
{"mode": "train", "epoch": 2, "iter": 300, "lr": 0.00866, "memory": 18766, "data_time": 0.01333, "decode.loss_seg": 0.39486, "decode.acc_seg": 82.6998, "aux.loss_seg": 0.24343, "aux.acc_seg": 78.34046, "loss": 0.6383, "time": 0.54946}
{"mode": "train", "epoch": 2, "iter": 350, "lr": 0.00843, "memory": 18766, "data_time": 0.01303, "decode.loss_seg": 0.38921, "decode.acc_seg": 82.83021, "aux.loss_seg": 0.23742, "aux.acc_seg": 78.5009, "loss": 0.62663, "time": 0.5272}
{"mode": "train", "epoch": 3, "iter": 400, "lr": 0.0082, "memory": 18766, "data_time": 0.04208, "decode.loss_seg": 0.37498, "decode.acc_seg": 82.03417, "aux.loss_seg": 0.22872, "aux.acc_seg": 78.16066, "loss": 0.60369, "time": 0.56128}
{"mode": "train", "epoch": 3, "iter": 450, "lr": 0.00798, "memory": 18766, "data_time": 0.01498, "decode.loss_seg": 0.35812, "decode.acc_seg": 83.34918, "aux.loss_seg": 0.22372, "aux.acc_seg": 79.14098, "loss": 0.58184, "time": 0.55798}
{"mode": "train", "epoch": 3, "iter": 500, "lr": 0.00775, "memory": 18766, "data_time": 0.0134, "decode.loss_seg": 0.35266, "decode.acc_seg": 82.99663, "aux.loss_seg": 0.21668, "aux.acc_seg": 78.94295, "loss": 0.56934, "time": 0.49373}
{"mode": "train", "epoch": 3, "iter": 550, "lr": 0.00752, "memory": 18766, "data_time": 0.01506, "decode.loss_seg": 0.33822, "decode.acc_seg": 83.62553, "aux.loss_seg": 0.21189, "aux.acc_seg": 79.63313, "loss": 0.55011, "time": 0.60338}
{"mode": "train", "epoch": 4, "iter": 600, "lr": 0.00729, "memory": 18766, "data_time": 0.02789, "decode.loss_seg": 0.30928, "decode.acc_seg": 83.99356, "aux.loss_seg": 0.19231, "aux.acc_seg": 80.17059, "loss": 0.50159, "time": 0.5508}
{"mode": "train", "epoch": 4, "iter": 650, "lr": 0.00706, "memory": 18766, "data_time": 0.01244, "decode.loss_seg": 0.30546, "decode.acc_seg": 84.41323, "aux.loss_seg": 0.19451, "aux.acc_seg": 80.53758, "loss": 0.49997, "time": 0.53709}
{"mode": "train", "epoch": 4, "iter": 700, "lr": 0.00682, "memory": 18766, "data_time": 0.01178, "decode.loss_seg": 0.32269, "decode.acc_seg": 83.92413, "aux.loss_seg": 0.20413, "aux.acc_seg": 79.92411, "loss": 0.52683, "time": 0.55902}
{"mode": "train", "epoch": 5, "iter": 750, "lr": 0.00659, "memory": 18766, "data_time": 0.02441, "decode.loss_seg": 0.29341, "decode.acc_seg": 84.34708, "aux.loss_seg": 0.18508, "aux.acc_seg": 80.57912, "loss": 0.47848, "time": 0.56319}
{"mode": "train", "epoch": 5, "iter": 800, "lr": 0.00636, "memory": 18766, "data_time": 0.02522, "decode.loss_seg": 0.31019, "decode.acc_seg": 84.48268, "aux.loss_seg": 0.18961, "aux.acc_seg": 81.10905, "loss": 0.49981, "time": 0.57141}
{"mode": "train", "epoch": 5, "iter": 850, "lr": 0.00612, "memory": 18766, "data_time": 0.01885, "decode.loss_seg": 0.29498, "decode.acc_seg": 85.26645, "aux.loss_seg": 0.1843, "aux.acc_seg": 81.63291, "loss": 0.47928, "time": 0.50186}
{"mode": "train", "epoch": 5, "iter": 900, "lr": 0.00589, "memory": 18766, "data_time": 0.01096, "decode.loss_seg": 0.2734, "decode.acc_seg": 84.55867, "aux.loss_seg": 0.17284, "aux.acc_seg": 81.11985, "loss": 0.44625, "time": 0.48995}
{"mode": "train", "epoch": 6, "iter": 950, "lr": 0.00565, "memory": 18766, "data_time": 0.02182, "decode.loss_seg": 0.29488, "decode.acc_seg": 84.64663, "aux.loss_seg": 0.18285, "aux.acc_seg": 80.99667, "loss": 0.47773, "time": 0.57925}
{"mode": "train", "epoch": 6, "iter": 1000, "lr": 0.00541, "memory": 18766, "data_time": 0.02877, "decode.loss_seg": 0.29644, "decode.acc_seg": 84.30936, "aux.loss_seg": 0.18554, "aux.acc_seg": 80.66721, "loss": 0.48198, "time": 0.52798}
{"mode": "train", "epoch": 6, "iter": 1050, "lr": 0.00517, "memory": 18766, "data_time": 0.01364, "decode.loss_seg": 0.2632, "decode.acc_seg": 85.97288, "aux.loss_seg": 0.16518, "aux.acc_seg": 82.80861, "loss": 0.42838, "time": 0.49369}
{"mode": "train", "epoch": 6, "iter": 1100, "lr": 0.00493, "memory": 18766, "data_time": 0.01496, "decode.loss_seg": 0.2717, "decode.acc_seg": 85.57982, "aux.loss_seg": 0.17234, "aux.acc_seg": 81.88186, "loss": 0.44405, "time": 0.54173}
{"mode": "train", "epoch": 7, "iter": 1150, "lr": 0.00469, "memory": 18766, "data_time": 0.02304, "decode.loss_seg": 0.25954, "decode.acc_seg": 85.90066, "aux.loss_seg": 0.16108, "aux.acc_seg": 82.49654, "loss": 0.42063, "time": 0.50853}
{"mode": "train", "epoch": 7, "iter": 1200, "lr": 0.00444, "memory": 18766, "data_time": 0.02369, "decode.loss_seg": 0.25665, "decode.acc_seg": 86.03321, "aux.loss_seg": 0.16174, "aux.acc_seg": 82.62963, "loss": 0.41839, "time": 0.51139}
{"mode": "train", "epoch": 7, "iter": 1250, "lr": 0.0042, "memory": 18766, "data_time": 0.0157, "decode.loss_seg": 0.25645, "decode.acc_seg": 85.55306, "aux.loss_seg": 0.16418, "aux.acc_seg": 81.69106, "loss": 0.42062, "time": 0.56232}
{"mode": "train", "epoch": 7, "iter": 1300, "lr": 0.00395, "memory": 18766, "data_time": 0.01029, "decode.loss_seg": 0.26439, "decode.acc_seg": 85.42185, "aux.loss_seg": 0.17085, "aux.acc_seg": 81.64836, "loss": 0.43524, "time": 0.49391}
{"mode": "train", "epoch": 8, "iter": 1350, "lr": 0.00371, "memory": 18766, "data_time": 0.02421, "decode.loss_seg": 0.25863, "decode.acc_seg": 85.81597, "aux.loss_seg": 0.1622, "aux.acc_seg": 82.43151, "loss": 0.42084, "time": 0.57663}
{"mode": "train", "epoch": 8, "iter": 1400, "lr": 0.00346, "memory": 18766, "data_time": 0.01322, "decode.loss_seg": 0.25125, "decode.acc_seg": 86.13717, "aux.loss_seg": 0.16403, "aux.acc_seg": 82.43852, "loss": 0.41528, "time": 0.53757}
{"mode": "train", "epoch": 8, "iter": 1450, "lr": 0.0032, "memory": 18766, "data_time": 0.01284, "decode.loss_seg": 0.25382, "decode.acc_seg": 85.70059, "aux.loss_seg": 0.16236, "aux.acc_seg": 82.12141, "loss": 0.41618, "time": 0.51064}
{"mode": "train", "epoch": 9, "iter": 1500, "lr": 0.00295, "memory": 18766, "data_time": 0.0208, "decode.loss_seg": 0.24211, "decode.acc_seg": 86.57949, "aux.loss_seg": 0.15646, "aux.acc_seg": 82.95978, "loss": 0.39856, "time": 0.54888}
{"mode": "train", "epoch": 9, "iter": 1550, "lr": 0.00269, "memory": 18766, "data_time": 0.01129, "decode.loss_seg": 0.24998, "decode.acc_seg": 86.22049, "aux.loss_seg": 0.15785, "aux.acc_seg": 82.78578, "loss": 0.40783, "time": 0.57264}
{"mode": "train", "epoch": 9, "iter": 1600, "lr": 0.00243, "memory": 18766, "data_time": 0.02205, "decode.loss_seg": 0.23289, "decode.acc_seg": 87.17312, "aux.loss_seg": 0.15249, "aux.acc_seg": 83.63268, "loss": 0.38538, "time": 0.54947}
{"mode": "train", "epoch": 9, "iter": 1650, "lr": 0.00217, "memory": 18766, "data_time": 0.01458, "decode.loss_seg": 0.23637, "decode.acc_seg": 86.47574, "aux.loss_seg": 0.15383, "aux.acc_seg": 82.95387, "loss": 0.39021, "time": 0.49384}
{"mode": "train", "epoch": 10, "iter": 1700, "lr": 0.0019, "memory": 18766, "data_time": 0.02525, "decode.loss_seg": 0.24178, "decode.acc_seg": 85.43119, "aux.loss_seg": 0.1513, "aux.acc_seg": 82.35245, "loss": 0.39308, "time": 0.58157}
{"mode": "train", "epoch": 10, "iter": 1750, "lr": 0.00163, "memory": 18766, "data_time": 0.01835, "decode.loss_seg": 0.23459, "decode.acc_seg": 86.64295, "aux.loss_seg": 0.15297, "aux.acc_seg": 83.00925, "loss": 0.38755, "time": 0.57519}
{"mode": "train", "epoch": 10, "iter": 1800, "lr": 0.00135, "memory": 18766, "data_time": 0.02361, "decode.loss_seg": 0.22667, "decode.acc_seg": 85.88586, "aux.loss_seg": 0.14798, "aux.acc_seg": 82.49548, "loss": 0.37465, "time": 0.53619}
{"mode": "train", "epoch": 10, "iter": 1850, "lr": 0.00107, "memory": 18766, "data_time": 0.01604, "decode.loss_seg": 0.2314, "decode.acc_seg": 86.34416, "aux.loss_seg": 0.14755, "aux.acc_seg": 83.03585, "loss": 0.37896, "time": 0.56889}
{"mode": "train", "epoch": 11, "iter": 1900, "lr": 0.00077, "memory": 18766, "data_time": 0.02609, "decode.loss_seg": 0.23185, "decode.acc_seg": 86.51648, "aux.loss_seg": 0.15217, "aux.acc_seg": 83.02631, "loss": 0.38402, "time": 0.56535}
{"mode": "train", "epoch": 11, "iter": 1950, "lr": 0.00046, "memory": 18766, "data_time": 0.01355, "decode.loss_seg": 0.2234, "decode.acc_seg": 86.58095, "aux.loss_seg": 0.14918, "aux.acc_seg": 82.96973, "loss": 0.37258, "time": 0.59021}
{"mode": "train", "epoch": 11, "iter": 2000, "lr": 0.00011, "memory": 18766, "data_time": 0.01875, "decode.loss_seg": 0.22586, "decode.acc_seg": 86.66693, "aux.loss_seg": 0.14417, "aux.acc_seg": 83.51176, "loss": 0.37003, "time": 0.55919}
