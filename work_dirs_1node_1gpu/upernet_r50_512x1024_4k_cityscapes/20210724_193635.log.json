{"env_info": "sys.platform: linux\nPython: 3.7.10 (default, Feb 26 2021, 18:47:35) [GCC 7.3.0]\nCUDA available: True\nGPU 0: Tesla V100-SXM2-32GB\nCUDA_HOME: /mnt/cache/share/polaris/dep/cuda-10.1-cudnn7.6.5\nNVCC: Cuda compilation tools, release 10.1, V10.1.243\nGCC: gcc (GCC) 5.4.0\nPyTorch: 1.8.0\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) Math Kernel Library Version 2020.0.2 Product Build 20200624 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v1.7.0 (Git Hash 7aed236906b1f7a05c0917e5257a1af05e9ff683)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 10.1\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_37,code=compute_37\n  - CuDNN 7.6.3\n  - Magma 2.5.2\n  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=10.1, CUDNN_VERSION=7.6.3, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.8.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, \n\nTorchVision: 0.9.0\nOpenCV: 4.5.1\nMMCV: 1.3.8\nMMCV Compiler: GCC 7.3\nMMCV CUDA Compiler: 10.1\nMMSegmentation: 0.15.0+4d34581", "seed": null, "exp_name": "upernet_r50_512x1024_4k_cityscapes.py", "mmseg_version": "0.15.0+4d34581", "config": "norm_cfg = dict(type='SyncBN', requires_grad=True)\nmodel = dict(\n    type='EncoderDecoder',\n    pretrained='open-mmlab://resnet50_v1c',\n    backbone=dict(\n        type='ResNetV1c',\n        depth=50,\n        num_stages=4,\n        out_indices=(0, 1, 2, 3),\n        dilations=(1, 1, 1, 1),\n        strides=(1, 2, 2, 2),\n        norm_cfg=dict(type='SyncBN', requires_grad=True),\n        norm_eval=False,\n        style='pytorch',\n        contract_dilation=True,\n        pretrained='open-mmlab://resnet50_v1c'),\n    decode_head=dict(\n        type='UPerHead',\n        in_channels=[256, 512, 1024, 2048],\n        in_index=[0, 1, 2, 3],\n        pool_scales=(1, 2, 3, 6),\n        channels=512,\n        dropout_ratio=0.1,\n        num_classes=19,\n        norm_cfg=dict(type='SyncBN', requires_grad=True),\n        align_corners=False,\n        loss_decode=dict(\n            type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0)),\n    auxiliary_head=dict(\n        type='FCNHead',\n        in_channels=1024,\n        in_index=2,\n        channels=256,\n        num_convs=1,\n        concat_input=False,\n        dropout_ratio=0.1,\n        num_classes=19,\n        norm_cfg=dict(type='SyncBN', requires_grad=True),\n        align_corners=False,\n        loss_decode=dict(\n            type='CrossEntropyLoss', use_sigmoid=False, loss_weight=0.4)),\n    train_cfg=dict(),\n    test_cfg=dict(mode='whole'))\ndataset_type = 'CityscapesDataset'\ndata_root = 'data/cityscapes/'\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ncrop_size = (512, 1024)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations'),\n    dict(type='Resize', img_scale=(2048, 1024), ratio_range=(0.5, 2.0)),\n    dict(type='RandomCrop', crop_size=(512, 1024), cat_max_ratio=0.75),\n    dict(type='RandomFlip', prob=0.5),\n    dict(type='PhotoMetricDistortion'),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='Pad', size=(512, 1024), pad_val=0, seg_pad_val=255),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_semantic_seg'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(2048, 1024),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=2,\n    workers_per_gpu=2,\n    train=dict(\n        type='CityscapesDataset',\n        data_root='data/cityscapes/',\n        img_dir='leftImg8bit/train',\n        ann_dir='gtFine/train',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations'),\n            dict(\n                type='Resize', img_scale=(2048, 1024), ratio_range=(0.5, 2.0)),\n            dict(type='RandomCrop', crop_size=(512, 1024), cat_max_ratio=0.75),\n            dict(type='RandomFlip', prob=0.5),\n            dict(type='PhotoMetricDistortion'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size=(512, 1024), pad_val=0, seg_pad_val=255),\n            dict(type='DefaultFormatBundle'),\n            dict(type='Collect', keys=['img', 'gt_semantic_seg'])\n        ]),\n    val=dict(\n        type='CityscapesDataset',\n        data_root='data/cityscapes/',\n        img_dir='leftImg8bit/val',\n        ann_dir='gtFine/val',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(2048, 1024),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]),\n    test=dict(\n        type='CityscapesDataset',\n        data_root='data/cityscapes/',\n        img_dir='leftImg8bit/val',\n        ann_dir='gtFine/val',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(2048, 1024),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]))\nlog_config = dict(\n    interval=50, hooks=[dict(type='TextLoggerHook', by_epoch=False)])\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = None\nresume_from = None\nworkflow = [('train', 1)]\ncudnn_benchmark = True\noptimizer = dict(type='SGD', lr=0.01, momentum=0.9, weight_decay=0.0005)\noptimizer_config = dict()\nlr_config = dict(policy='poly', power=0.9, min_lr=0.0001, by_epoch=False)\nrunner = dict(type='IterBasedRunner', max_iters=4000)\ncheckpoint_config = dict(by_epoch=False, interval=2000)\nevaluation = dict(interval=2000, metric='mIoU')\nwork_dir = 'work_dirs_1node_1gpu/upernet_r50_512x1024_4k_cityscapes'\ngpu_ids = range(0, 1)\nseed = None\n", "CLASSES": ["road", "sidewalk", "building", "wall", "fence", "pole", "traffic light", "traffic sign", "vegetation", "terrain", "sky", "person", "rider", "car", "truck", "bus", "train", "motorcycle", "bicycle"], "PALETTE": [[128, 64, 128], [244, 35, 232], [70, 70, 70], [102, 102, 156], [190, 153, 153], [153, 153, 153], [250, 170, 30], [220, 220, 0], [107, 142, 35], [152, 251, 152], [70, 130, 180], [220, 20, 60], [255, 0, 0], [0, 0, 142], [0, 0, 70], [0, 60, 100], [0, 80, 100], [0, 0, 230], [119, 11, 32]]}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 0.00989, "memory": 19971, "data_time": 0.17085, "decode.loss_seg": 1.85257, "decode.acc_seg": 39.62951, "aux.loss_seg": 0.8154, "aux.acc_seg": 33.78227, "loss": 2.66797, "time": 0.81136}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 0.00978, "memory": 19971, "data_time": 0.01585, "decode.loss_seg": 1.38664, "decode.acc_seg": 54.06018, "aux.loss_seg": 0.60533, "aux.acc_seg": 50.73623, "loss": 1.99197, "time": 0.41966}
{"mode": "train", "epoch": 1, "iter": 150, "lr": 0.00967, "memory": 19971, "data_time": 0.0106, "decode.loss_seg": 1.34382, "decode.acc_seg": 55.15415, "aux.loss_seg": 0.56916, "aux.acc_seg": 53.14175, "loss": 1.91298, "time": 0.35728}
{"mode": "train", "epoch": 1, "iter": 200, "lr": 0.00956, "memory": 19971, "data_time": 0.02914, "decode.loss_seg": 1.24172, "decode.acc_seg": 59.85911, "aux.loss_seg": 0.51519, "aux.acc_seg": 58.99743, "loss": 1.75691, "time": 0.4069}
{"mode": "train", "epoch": 1, "iter": 250, "lr": 0.00944, "memory": 19971, "data_time": 0.01121, "decode.loss_seg": 1.10996, "decode.acc_seg": 63.01725, "aux.loss_seg": 0.48348, "aux.acc_seg": 60.29259, "loss": 1.59344, "time": 0.39997}
{"mode": "train", "epoch": 1, "iter": 300, "lr": 0.00933, "memory": 19971, "data_time": 0.0097, "decode.loss_seg": 1.15212, "decode.acc_seg": 61.03494, "aux.loss_seg": 0.48532, "aux.acc_seg": 59.61164, "loss": 1.63744, "time": 0.41441}
{"mode": "train", "epoch": 1, "iter": 350, "lr": 0.00922, "memory": 19971, "data_time": 0.0139, "decode.loss_seg": 1.07062, "decode.acc_seg": 63.29672, "aux.loss_seg": 0.45016, "aux.acc_seg": 62.04227, "loss": 1.52078, "time": 0.37882}
{"mode": "train", "epoch": 1, "iter": 400, "lr": 0.00911, "memory": 19971, "data_time": 0.01437, "decode.loss_seg": 0.9963, "decode.acc_seg": 63.93793, "aux.loss_seg": 0.42484, "aux.acc_seg": 61.49233, "loss": 1.42115, "time": 0.36754}
{"mode": "train", "epoch": 1, "iter": 450, "lr": 0.00899, "memory": 19971, "data_time": 0.0226, "decode.loss_seg": 0.85185, "decode.acc_seg": 69.10527, "aux.loss_seg": 0.38464, "aux.acc_seg": 66.98033, "loss": 1.23649, "time": 0.37796}
{"mode": "train", "epoch": 1, "iter": 500, "lr": 0.00888, "memory": 19971, "data_time": 0.01043, "decode.loss_seg": 0.89438, "decode.acc_seg": 69.11066, "aux.loss_seg": 0.40063, "aux.acc_seg": 66.12131, "loss": 1.29501, "time": 0.39071}
{"mode": "train", "epoch": 1, "iter": 550, "lr": 0.00877, "memory": 19971, "data_time": 0.01617, "decode.loss_seg": 0.92357, "decode.acc_seg": 69.01984, "aux.loss_seg": 0.4182, "aux.acc_seg": 65.73413, "loss": 1.34177, "time": 0.38435}
{"mode": "train", "epoch": 1, "iter": 600, "lr": 0.00866, "memory": 19971, "data_time": 0.01457, "decode.loss_seg": 0.88042, "decode.acc_seg": 68.40391, "aux.loss_seg": 0.39133, "aux.acc_seg": 66.35406, "loss": 1.27175, "time": 0.36226}
{"mode": "train", "epoch": 1, "iter": 650, "lr": 0.00854, "memory": 19971, "data_time": 0.00849, "decode.loss_seg": 1.0157, "decode.acc_seg": 66.77678, "aux.loss_seg": 0.43459, "aux.acc_seg": 64.64597, "loss": 1.45029, "time": 0.36035}
{"mode": "train", "epoch": 1, "iter": 700, "lr": 0.00843, "memory": 19971, "data_time": 0.01889, "decode.loss_seg": 0.93479, "decode.acc_seg": 66.07073, "aux.loss_seg": 0.41295, "aux.acc_seg": 63.79394, "loss": 1.34774, "time": 0.41149}
{"mode": "train", "epoch": 1, "iter": 750, "lr": 0.00831, "memory": 19971, "data_time": 0.01178, "decode.loss_seg": 0.84143, "decode.acc_seg": 67.9866, "aux.loss_seg": 0.3756, "aux.acc_seg": 66.09572, "loss": 1.21702, "time": 0.39654}
{"mode": "train", "epoch": 1, "iter": 800, "lr": 0.0082, "memory": 19971, "data_time": 0.01675, "decode.loss_seg": 0.98819, "decode.acc_seg": 63.41561, "aux.loss_seg": 0.43526, "aux.acc_seg": 61.89782, "loss": 1.42345, "time": 0.37263}
{"mode": "train", "epoch": 1, "iter": 850, "lr": 0.00809, "memory": 19971, "data_time": 0.01803, "decode.loss_seg": 0.82287, "decode.acc_seg": 69.70932, "aux.loss_seg": 0.36648, "aux.acc_seg": 67.95979, "loss": 1.18935, "time": 0.39409}
{"mode": "train", "epoch": 1, "iter": 900, "lr": 0.00797, "memory": 19971, "data_time": 0.0139, "decode.loss_seg": 0.84206, "decode.acc_seg": 69.59464, "aux.loss_seg": 0.37611, "aux.acc_seg": 66.43512, "loss": 1.21818, "time": 0.37814}
{"mode": "train", "epoch": 1, "iter": 950, "lr": 0.00786, "memory": 19971, "data_time": 0.02538, "decode.loss_seg": 0.72335, "decode.acc_seg": 72.07707, "aux.loss_seg": 0.34288, "aux.acc_seg": 68.54692, "loss": 1.06623, "time": 0.41132}
{"mode": "train", "epoch": 1, "iter": 1000, "lr": 0.00774, "memory": 19971, "data_time": 0.01304, "decode.loss_seg": 0.8342, "decode.acc_seg": 70.41268, "aux.loss_seg": 0.38664, "aux.acc_seg": 67.06661, "loss": 1.22085, "time": 0.36174}
{"mode": "train", "epoch": 1, "iter": 1050, "lr": 0.00763, "memory": 19971, "data_time": 0.01775, "decode.loss_seg": 0.79519, "decode.acc_seg": 71.43676, "aux.loss_seg": 0.35529, "aux.acc_seg": 69.12516, "loss": 1.15048, "time": 0.40785}
{"mode": "train", "epoch": 1, "iter": 1100, "lr": 0.00751, "memory": 19971, "data_time": 0.02507, "decode.loss_seg": 0.78555, "decode.acc_seg": 70.96109, "aux.loss_seg": 0.3716, "aux.acc_seg": 67.18509, "loss": 1.15716, "time": 0.39938}
{"mode": "train", "epoch": 1, "iter": 1150, "lr": 0.0074, "memory": 19971, "data_time": 0.01948, "decode.loss_seg": 0.71362, "decode.acc_seg": 74.72973, "aux.loss_seg": 0.34045, "aux.acc_seg": 70.82726, "loss": 1.05407, "time": 0.40653}
{"mode": "train", "epoch": 1, "iter": 1200, "lr": 0.00728, "memory": 19971, "data_time": 0.03009, "decode.loss_seg": 0.77213, "decode.acc_seg": 72.82505, "aux.loss_seg": 0.36859, "aux.acc_seg": 69.56677, "loss": 1.14072, "time": 0.40313}
{"mode": "train", "epoch": 1, "iter": 1250, "lr": 0.00717, "memory": 19971, "data_time": 0.01218, "decode.loss_seg": 0.63751, "decode.acc_seg": 75.67075, "aux.loss_seg": 0.31786, "aux.acc_seg": 71.69461, "loss": 0.95536, "time": 0.40358}
{"mode": "train", "epoch": 1, "iter": 1300, "lr": 0.00705, "memory": 19971, "data_time": 0.01235, "decode.loss_seg": 0.78618, "decode.acc_seg": 69.03788, "aux.loss_seg": 0.35345, "aux.acc_seg": 66.58215, "loss": 1.13963, "time": 0.36022}
{"mode": "train", "epoch": 1, "iter": 1350, "lr": 0.00694, "memory": 19971, "data_time": 0.0292, "decode.loss_seg": 0.66551, "decode.acc_seg": 71.80215, "aux.loss_seg": 0.30035, "aux.acc_seg": 70.36712, "loss": 0.96586, "time": 0.40791}
{"mode": "train", "epoch": 1, "iter": 1400, "lr": 0.00682, "memory": 19971, "data_time": 0.01142, "decode.loss_seg": 0.70731, "decode.acc_seg": 73.63527, "aux.loss_seg": 0.33312, "aux.acc_seg": 70.51149, "loss": 1.04043, "time": 0.35775}
{"mode": "train", "epoch": 1, "iter": 1450, "lr": 0.0067, "memory": 19971, "data_time": 0.027, "decode.loss_seg": 0.58514, "decode.acc_seg": 76.02227, "aux.loss_seg": 0.29033, "aux.acc_seg": 72.07368, "loss": 0.87547, "time": 0.45256}
{"mode": "train", "epoch": 2, "iter": 1500, "lr": 0.00659, "memory": 19971, "data_time": 0.02271, "decode.loss_seg": 0.76223, "decode.acc_seg": 71.4121, "aux.loss_seg": 0.3585, "aux.acc_seg": 67.59569, "loss": 1.12073, "time": 0.37155}
{"mode": "train", "epoch": 2, "iter": 1550, "lr": 0.00647, "memory": 19971, "data_time": 0.03691, "decode.loss_seg": 0.67499, "decode.acc_seg": 74.16382, "aux.loss_seg": 0.31032, "aux.acc_seg": 71.72158, "loss": 0.98532, "time": 0.41779}
{"mode": "train", "epoch": 2, "iter": 1600, "lr": 0.00635, "memory": 19971, "data_time": 0.03779, "decode.loss_seg": 0.63741, "decode.acc_seg": 75.02492, "aux.loss_seg": 0.30603, "aux.acc_seg": 71.63079, "loss": 0.94344, "time": 0.44026}
{"mode": "train", "epoch": 2, "iter": 1650, "lr": 0.00624, "memory": 19971, "data_time": 0.01353, "decode.loss_seg": 0.67197, "decode.acc_seg": 74.70242, "aux.loss_seg": 0.31411, "aux.acc_seg": 72.0315, "loss": 0.98608, "time": 0.36156}
{"mode": "train", "epoch": 2, "iter": 1700, "lr": 0.00612, "memory": 19971, "data_time": 0.02034, "decode.loss_seg": 0.70233, "decode.acc_seg": 74.14287, "aux.loss_seg": 0.33164, "aux.acc_seg": 70.58703, "loss": 1.03396, "time": 0.39171}
{"mode": "train", "epoch": 2, "iter": 1750, "lr": 0.006, "memory": 19971, "data_time": 0.01175, "decode.loss_seg": 0.63429, "decode.acc_seg": 75.89421, "aux.loss_seg": 0.30604, "aux.acc_seg": 72.57905, "loss": 0.94032, "time": 0.3583}
{"mode": "train", "epoch": 2, "iter": 1800, "lr": 0.00588, "memory": 19971, "data_time": 0.0259, "decode.loss_seg": 0.50708, "decode.acc_seg": 79.17442, "aux.loss_seg": 0.25125, "aux.acc_seg": 76.07502, "loss": 0.75833, "time": 0.41634}
{"mode": "train", "epoch": 2, "iter": 1850, "lr": 0.00576, "memory": 19971, "data_time": 0.02021, "decode.loss_seg": 0.56878, "decode.acc_seg": 77.74611, "aux.loss_seg": 0.27806, "aux.acc_seg": 74.45718, "loss": 0.84684, "time": 0.3688}
{"mode": "train", "epoch": 2, "iter": 1900, "lr": 0.00565, "memory": 19971, "data_time": 0.01413, "decode.loss_seg": 0.51028, "decode.acc_seg": 79.24649, "aux.loss_seg": 0.26378, "aux.acc_seg": 75.21293, "loss": 0.77406, "time": 0.37505}
{"mode": "train", "epoch": 2, "iter": 1950, "lr": 0.00553, "memory": 19971, "data_time": 0.01702, "decode.loss_seg": 0.52508, "decode.acc_seg": 78.32442, "aux.loss_seg": 0.2706, "aux.acc_seg": 74.38093, "loss": 0.79568, "time": 0.39874}
