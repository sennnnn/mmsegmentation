{"env_info": "sys.platform: linux\nPython: 3.7.10 (default, Feb 26 2021, 18:47:35) [GCC 7.3.0]\nCUDA available: True\nGPU 0: Tesla V100-SXM2-32GB\nCUDA_HOME: /mnt/cache/share/polaris/dep/cuda-10.1-cudnn7.6.5\nNVCC: Cuda compilation tools, release 10.1, V10.1.243\nGCC: gcc (GCC) 5.4.0\nPyTorch: 1.8.0\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) Math Kernel Library Version 2020.0.2 Product Build 20200624 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v1.7.0 (Git Hash 7aed236906b1f7a05c0917e5257a1af05e9ff683)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 10.1\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_37,code=compute_37\n  - CuDNN 7.6.3\n  - Magma 2.5.2\n  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=10.1, CUDNN_VERSION=7.6.3, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.8.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, \n\nTorchVision: 0.9.0\nOpenCV: 4.5.1\nMMCV: 1.3.8\nMMCV Compiler: GCC 7.3\nMMCV CUDA Compiler: 10.1\nMMSegmentation: 0.15.0+eb03a01", "seed": null, "exp_name": "deeplabv3_r50-d8_512x1024_2k_cityscapes.py", "mmseg_version": "0.15.0+eb03a01", "config": "norm_cfg = dict(type='SyncBN', requires_grad=True)\nmodel = dict(\n    type='EncoderDecoder',\n    pretrained='open-mmlab://resnet50_v1c',\n    backbone=dict(\n        type='ResNetV1c',\n        depth=50,\n        num_stages=4,\n        out_indices=(0, 1, 2, 3),\n        dilations=(1, 1, 2, 4),\n        strides=(1, 2, 1, 1),\n        norm_cfg=dict(type='SyncBN', requires_grad=True),\n        norm_eval=False,\n        style='pytorch',\n        contract_dilation=True,\n        pretrained='open-mmlab://resnet50_v1c'),\n    decode_head=dict(\n        type='ASPPHead',\n        in_channels=2048,\n        in_index=3,\n        channels=512,\n        dilations=(1, 12, 24, 36),\n        dropout_ratio=0.1,\n        num_classes=19,\n        norm_cfg=dict(type='SyncBN', requires_grad=True),\n        align_corners=False,\n        loss_decode=dict(\n            type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0)),\n    auxiliary_head=dict(\n        type='FCNHead',\n        in_channels=1024,\n        in_index=2,\n        channels=256,\n        num_convs=1,\n        concat_input=False,\n        dropout_ratio=0.1,\n        num_classes=19,\n        norm_cfg=dict(type='SyncBN', requires_grad=True),\n        align_corners=False,\n        loss_decode=dict(\n            type='CrossEntropyLoss', use_sigmoid=False, loss_weight=0.4)),\n    train_cfg=dict(),\n    test_cfg=dict(mode='whole'))\ndataset_type = 'CityscapesDataset'\ndata_root = 'data/cityscapes/'\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ncrop_size = (512, 1024)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations'),\n    dict(type='Resize', img_scale=(2048, 1024), ratio_range=(0.5, 2.0)),\n    dict(type='RandomCrop', crop_size=(512, 1024), cat_max_ratio=0.75),\n    dict(type='RandomFlip', prob=0.5),\n    dict(type='PhotoMetricDistortion'),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='Pad', size=(512, 1024), pad_val=0, seg_pad_val=255),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_semantic_seg'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(2048, 1024),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=2,\n    workers_per_gpu=2,\n    train=dict(\n        type='CityscapesDataset',\n        data_root='data/cityscapes/',\n        img_dir='leftImg8bit/train',\n        ann_dir='gtFine/train',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations'),\n            dict(\n                type='Resize', img_scale=(2048, 1024), ratio_range=(0.5, 2.0)),\n            dict(type='RandomCrop', crop_size=(512, 1024), cat_max_ratio=0.75),\n            dict(type='RandomFlip', prob=0.5),\n            dict(type='PhotoMetricDistortion'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size=(512, 1024), pad_val=0, seg_pad_val=255),\n            dict(type='DefaultFormatBundle'),\n            dict(type='Collect', keys=['img', 'gt_semantic_seg'])\n        ]),\n    val=dict(\n        type='CityscapesDataset',\n        data_root='data/cityscapes/',\n        img_dir='leftImg8bit/val',\n        ann_dir='gtFine/val',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(2048, 1024),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]),\n    test=dict(\n        type='CityscapesDataset',\n        data_root='data/cityscapes/',\n        img_dir='leftImg8bit/val',\n        ann_dir='gtFine/val',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(2048, 1024),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]))\nlog_config = dict(\n    interval=50, hooks=[dict(type='TextLoggerHook', by_epoch=False)])\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = None\nresume_from = None\nworkflow = [('train', 1)]\ncudnn_benchmark = True\noptimizer = dict(type='SGD', lr=0.01, momentum=0.9, weight_decay=0.0005)\noptimizer_config = dict()\nlr_config = dict(policy='poly', power=0.9, min_lr=0.0001, by_epoch=False)\nrunner = dict(type='IterBasedRunner', max_iters=2000)\ncheckpoint_config = dict(by_epoch=False, interval=8000)\nevaluation = dict(interval=8000, metric='mIoU')\nwork_dir = 'work_dirs_1node_1gpu/deeplabv3_r50-d8_512x1024_2k_cityscapes'\ngpu_ids = range(0, 1)\nseed = None\n", "CLASSES": ["road", "sidewalk", "building", "wall", "fence", "pole", "traffic light", "traffic sign", "vegetation", "terrain", "sky", "person", "rider", "car", "truck", "bus", "train", "motorcycle", "bicycle"], "PALETTE": [[128, 64, 128], [244, 35, 232], [70, 70, 70], [102, 102, 156], [190, 153, 153], [153, 153, 153], [250, 170, 30], [220, 220, 0], [107, 142, 35], [152, 251, 152], [70, 130, 180], [220, 20, 60], [255, 0, 0], [0, 0, 142], [0, 0, 70], [0, 60, 100], [0, 80, 100], [0, 0, 230], [119, 11, 32]]}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 0.00978, "memory": 18984, "data_time": 0.01791, "decode.loss_seg": 1.78833, "decode.acc_seg": 38.5057, "aux.loss_seg": 0.78668, "aux.acc_seg": 35.07243, "loss": 2.57501, "time": 0.82495}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 0.00956, "memory": 18984, "data_time": 0.01995, "decode.loss_seg": 1.72452, "decode.acc_seg": 41.57859, "aux.loss_seg": 0.66939, "aux.acc_seg": 43.23535, "loss": 2.39391, "time": 0.6548}
{"mode": "train", "epoch": 1, "iter": 150, "lr": 0.00933, "memory": 18984, "data_time": 0.0183, "decode.loss_seg": 1.91305, "decode.acc_seg": 35.75488, "aux.loss_seg": 0.71255, "aux.acc_seg": 39.75532, "loss": 2.6256, "time": 0.65488}
{"mode": "train", "epoch": 1, "iter": 200, "lr": 0.00911, "memory": 18984, "data_time": 0.02098, "decode.loss_seg": 2.03486, "decode.acc_seg": 27.72825, "aux.loss_seg": 0.77911, "aux.acc_seg": 29.21009, "loss": 2.81397, "time": 0.66707}
{"mode": "train", "epoch": 1, "iter": 250, "lr": 0.00888, "memory": 18984, "data_time": 0.01439, "decode.loss_seg": 2.02414, "decode.acc_seg": 25.56321, "aux.loss_seg": 0.73611, "aux.acc_seg": 30.34655, "loss": 2.76025, "time": 0.63238}
{"mode": "train", "epoch": 1, "iter": 300, "lr": 0.00866, "memory": 18984, "data_time": 0.01126, "decode.loss_seg": 1.98986, "decode.acc_seg": 31.48647, "aux.loss_seg": 0.73879, "aux.acc_seg": 36.03696, "loss": 2.72865, "time": 0.66644}
{"mode": "train", "epoch": 1, "iter": 350, "lr": 0.00843, "memory": 18984, "data_time": 0.01928, "decode.loss_seg": 1.90027, "decode.acc_seg": 33.55792, "aux.loss_seg": 0.68568, "aux.acc_seg": 40.50146, "loss": 2.58595, "time": 0.67299}
{"mode": "train", "epoch": 1, "iter": 400, "lr": 0.0082, "memory": 18984, "data_time": 0.00903, "decode.loss_seg": 1.82866, "decode.acc_seg": 32.82491, "aux.loss_seg": 0.67296, "aux.acc_seg": 36.59551, "loss": 2.50162, "time": 0.66965}
{"mode": "train", "epoch": 1, "iter": 450, "lr": 0.00798, "memory": 18984, "data_time": 0.02587, "decode.loss_seg": 1.63479, "decode.acc_seg": 38.59914, "aux.loss_seg": 0.62563, "aux.acc_seg": 42.36432, "loss": 2.26042, "time": 0.7111}
{"mode": "train", "epoch": 1, "iter": 500, "lr": 0.00775, "memory": 18984, "data_time": 0.02175, "decode.loss_seg": 1.73512, "decode.acc_seg": 34.43624, "aux.loss_seg": 0.64319, "aux.acc_seg": 41.54736, "loss": 2.37831, "time": 0.6629}
{"mode": "train", "epoch": 1, "iter": 550, "lr": 0.00752, "memory": 18984, "data_time": 0.00782, "decode.loss_seg": 1.76439, "decode.acc_seg": 38.24561, "aux.loss_seg": 0.674, "aux.acc_seg": 40.89116, "loss": 2.43839, "time": 0.66461}
{"mode": "train", "epoch": 1, "iter": 600, "lr": 0.00729, "memory": 18984, "data_time": 0.02585, "decode.loss_seg": 1.762, "decode.acc_seg": 37.69377, "aux.loss_seg": 0.67088, "aux.acc_seg": 41.675, "loss": 2.43288, "time": 0.66592}
{"mode": "train", "epoch": 1, "iter": 650, "lr": 0.00706, "memory": 18984, "data_time": 0.03423, "decode.loss_seg": 1.66169, "decode.acc_seg": 40.2906, "aux.loss_seg": 0.6501, "aux.acc_seg": 42.81687, "loss": 2.31179, "time": 0.9913}
{"mode": "train", "epoch": 1, "iter": 700, "lr": 0.00682, "memory": 18984, "data_time": 0.03178, "decode.loss_seg": 1.75486, "decode.acc_seg": 35.49762, "aux.loss_seg": 0.66591, "aux.acc_seg": 41.23295, "loss": 2.42077, "time": 0.79686}
{"mode": "train", "epoch": 1, "iter": 750, "lr": 0.00659, "memory": 18984, "data_time": 0.01967, "decode.loss_seg": 1.65239, "decode.acc_seg": 37.34925, "aux.loss_seg": 0.62142, "aux.acc_seg": 41.13344, "loss": 2.27381, "time": 0.75333}
{"mode": "train", "epoch": 1, "iter": 800, "lr": 0.00636, "memory": 18984, "data_time": 0.02271, "decode.loss_seg": 1.75353, "decode.acc_seg": 36.90569, "aux.loss_seg": 0.66291, "aux.acc_seg": 39.94195, "loss": 2.41644, "time": 0.75802}
{"mode": "train", "epoch": 1, "iter": 850, "lr": 0.00612, "memory": 18984, "data_time": 0.02511, "decode.loss_seg": 1.62285, "decode.acc_seg": 40.89505, "aux.loss_seg": 0.64246, "aux.acc_seg": 39.97285, "loss": 2.26531, "time": 0.79233}
{"mode": "train", "epoch": 1, "iter": 900, "lr": 0.00589, "memory": 18984, "data_time": 0.01911, "decode.loss_seg": 1.63814, "decode.acc_seg": 41.04849, "aux.loss_seg": 0.65776, "aux.acc_seg": 39.73214, "loss": 2.2959, "time": 0.64402}
{"mode": "train", "epoch": 1, "iter": 950, "lr": 0.00565, "memory": 18984, "data_time": 0.01918, "decode.loss_seg": 1.68829, "decode.acc_seg": 40.45848, "aux.loss_seg": 0.64264, "aux.acc_seg": 42.42558, "loss": 2.33093, "time": 0.66393}
{"mode": "train", "epoch": 1, "iter": 1000, "lr": 0.00541, "memory": 18984, "data_time": 0.00918, "decode.loss_seg": 1.60274, "decode.acc_seg": 44.25462, "aux.loss_seg": 0.64687, "aux.acc_seg": 44.31234, "loss": 2.24961, "time": 0.65397}
{"mode": "train", "epoch": 1, "iter": 1050, "lr": 0.00517, "memory": 18984, "data_time": 0.01548, "decode.loss_seg": 1.54581, "decode.acc_seg": 43.95183, "aux.loss_seg": 0.62458, "aux.acc_seg": 42.86936, "loss": 2.17039, "time": 0.65586}
{"mode": "train", "epoch": 1, "iter": 1100, "lr": 0.00493, "memory": 18984, "data_time": 0.01092, "decode.loss_seg": 1.51206, "decode.acc_seg": 44.97979, "aux.loss_seg": 0.62292, "aux.acc_seg": 42.52115, "loss": 2.13498, "time": 0.63423}
{"mode": "train", "epoch": 1, "iter": 1150, "lr": 0.00469, "memory": 18984, "data_time": 0.00923, "decode.loss_seg": 1.51023, "decode.acc_seg": 44.49519, "aux.loss_seg": 0.61787, "aux.acc_seg": 43.34141, "loss": 2.1281, "time": 0.6519}
{"mode": "train", "epoch": 1, "iter": 1200, "lr": 0.00444, "memory": 18984, "data_time": 0.00779, "decode.loss_seg": 1.5007, "decode.acc_seg": 46.005, "aux.loss_seg": 0.61659, "aux.acc_seg": 44.83849, "loss": 2.11729, "time": 0.64692}
{"mode": "train", "epoch": 1, "iter": 1250, "lr": 0.0042, "memory": 18984, "data_time": 0.02227, "decode.loss_seg": 1.46014, "decode.acc_seg": 45.97795, "aux.loss_seg": 0.60412, "aux.acc_seg": 45.1683, "loss": 2.06425, "time": 0.67151}
{"mode": "train", "epoch": 1, "iter": 1300, "lr": 0.00395, "memory": 18984, "data_time": 0.01476, "decode.loss_seg": 1.58937, "decode.acc_seg": 42.36384, "aux.loss_seg": 0.66945, "aux.acc_seg": 39.92747, "loss": 2.25882, "time": 0.63929}
{"mode": "train", "epoch": 1, "iter": 1350, "lr": 0.00371, "memory": 18984, "data_time": 0.01625, "decode.loss_seg": 1.53581, "decode.acc_seg": 44.56058, "aux.loss_seg": 0.62822, "aux.acc_seg": 42.81941, "loss": 2.16403, "time": 0.64317}
{"mode": "train", "epoch": 1, "iter": 1400, "lr": 0.00346, "memory": 18984, "data_time": 0.02862, "decode.loss_seg": 1.50615, "decode.acc_seg": 43.43795, "aux.loss_seg": 0.62715, "aux.acc_seg": 42.33646, "loss": 2.1333, "time": 0.68808}
{"mode": "train", "epoch": 1, "iter": 1450, "lr": 0.0032, "memory": 18984, "data_time": 0.03276, "decode.loss_seg": 1.47806, "decode.acc_seg": 44.82206, "aux.loss_seg": 0.62892, "aux.acc_seg": 42.80517, "loss": 2.10697, "time": 0.66478}
{"mode": "train", "epoch": 2, "iter": 1500, "lr": 0.00295, "memory": 18984, "data_time": 0.02203, "decode.loss_seg": 1.44048, "decode.acc_seg": 46.94249, "aux.loss_seg": 0.60559, "aux.acc_seg": 45.22884, "loss": 2.04607, "time": 0.67253}
{"mode": "train", "epoch": 2, "iter": 1550, "lr": 0.00269, "memory": 18984, "data_time": 0.01806, "decode.loss_seg": 1.49076, "decode.acc_seg": 44.29482, "aux.loss_seg": 0.62027, "aux.acc_seg": 43.99278, "loss": 2.11103, "time": 0.66353}
{"mode": "train", "epoch": 2, "iter": 1600, "lr": 0.00243, "memory": 18984, "data_time": 0.03521, "decode.loss_seg": 1.54232, "decode.acc_seg": 44.61433, "aux.loss_seg": 0.64239, "aux.acc_seg": 42.73882, "loss": 2.18471, "time": 0.70139}
{"mode": "train", "epoch": 2, "iter": 1650, "lr": 0.00217, "memory": 18984, "data_time": 0.0156, "decode.loss_seg": 1.54611, "decode.acc_seg": 43.97044, "aux.loss_seg": 0.63666, "aux.acc_seg": 44.01455, "loss": 2.18277, "time": 0.66789}
{"mode": "train", "epoch": 2, "iter": 1700, "lr": 0.0019, "memory": 18984, "data_time": 0.03509, "decode.loss_seg": 1.48685, "decode.acc_seg": 46.90813, "aux.loss_seg": 0.61727, "aux.acc_seg": 46.33101, "loss": 2.10412, "time": 0.68598}
{"mode": "train", "epoch": 2, "iter": 1750, "lr": 0.00163, "memory": 18984, "data_time": 0.0264, "decode.loss_seg": 1.49406, "decode.acc_seg": 46.25482, "aux.loss_seg": 0.62118, "aux.acc_seg": 45.61893, "loss": 2.11524, "time": 0.66497}
{"mode": "train", "epoch": 2, "iter": 1800, "lr": 0.00135, "memory": 18984, "data_time": 0.00772, "decode.loss_seg": 1.32176, "decode.acc_seg": 50.80679, "aux.loss_seg": 0.56116, "aux.acc_seg": 48.59961, "loss": 1.88292, "time": 0.66351}
{"mode": "train", "epoch": 2, "iter": 1850, "lr": 0.00107, "memory": 18984, "data_time": 0.03458, "decode.loss_seg": 1.4477, "decode.acc_seg": 48.83637, "aux.loss_seg": 0.61547, "aux.acc_seg": 45.81613, "loss": 2.06317, "time": 0.67036}
{"mode": "train", "epoch": 2, "iter": 1900, "lr": 0.00077, "memory": 18984, "data_time": 0.01082, "decode.loss_seg": 1.27038, "decode.acc_seg": 52.07901, "aux.loss_seg": 0.55555, "aux.acc_seg": 47.77225, "loss": 1.82592, "time": 0.6376}
{"mode": "train", "epoch": 2, "iter": 1950, "lr": 0.00046, "memory": 18984, "data_time": 0.0205, "decode.loss_seg": 1.3974, "decode.acc_seg": 49.29632, "aux.loss_seg": 0.60595, "aux.acc_seg": 46.37204, "loss": 2.00334, "time": 0.65967}
{"mode": "train", "epoch": 2, "iter": 2000, "lr": 0.00011, "memory": 18984, "data_time": 0.01463, "decode.loss_seg": 1.38376, "decode.acc_seg": 51.07481, "aux.loss_seg": 0.57832, "aux.acc_seg": 50.20611, "loss": 1.96208, "time": 0.68136}
