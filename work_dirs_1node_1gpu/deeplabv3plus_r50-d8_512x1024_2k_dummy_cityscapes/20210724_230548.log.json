{"env_info": "sys.platform: linux\nPython: 3.7.10 (default, Feb 26 2021, 18:47:35) [GCC 7.3.0]\nCUDA available: True\nGPU 0: Tesla V100-SXM2-32GB\nCUDA_HOME: /mnt/cache/share/polaris/dep/cuda-10.1-cudnn7.6.5\nNVCC: Cuda compilation tools, release 10.1, V10.1.243\nGCC: gcc (GCC) 5.4.0\nPyTorch: 1.8.0\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) Math Kernel Library Version 2020.0.2 Product Build 20200624 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v1.7.0 (Git Hash 7aed236906b1f7a05c0917e5257a1af05e9ff683)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 10.1\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_37,code=compute_37\n  - CuDNN 7.6.3\n  - Magma 2.5.2\n  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=10.1, CUDNN_VERSION=7.6.3, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.8.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, \n\nTorchVision: 0.9.0\nOpenCV: 4.5.1\nMMCV: 1.3.8\nMMCV Compiler: GCC 7.3\nMMCV CUDA Compiler: 10.1\nMMSegmentation: 0.15.0+eb03a01", "seed": null, "exp_name": "deeplabv3plus_r50-d8_512x1024_2k_dummy_cityscapes.py", "mmseg_version": "0.15.0+eb03a01", "config": "norm_cfg = dict(type='SyncBN', requires_grad=True)\nmodel = dict(\n    type='EncoderDecoder',\n    pretrained='open-mmlab://resnet50_v1c',\n    backbone=dict(\n        type='ResNetV1c',\n        depth=50,\n        num_stages=4,\n        out_indices=(0, 1, 2, 3),\n        dilations=(1, 1, 2, 4),\n        strides=(1, 2, 1, 1),\n        norm_cfg=dict(type='SyncBN', requires_grad=True),\n        norm_eval=False,\n        style='pytorch',\n        contract_dilation=True,\n        pretrained='open-mmlab://resnet50_v1c'),\n    decode_head=dict(\n        type='DepthwiseSeparableASPPHead',\n        in_channels=2048,\n        in_index=3,\n        channels=512,\n        dilations=(1, 12, 24, 36),\n        c1_in_channels=256,\n        c1_channels=48,\n        dropout_ratio=0.1,\n        num_classes=19,\n        norm_cfg=dict(type='SyncBN', requires_grad=True),\n        align_corners=False,\n        loss_decode=dict(\n            type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0)),\n    auxiliary_head=dict(\n        type='FCNHead',\n        in_channels=1024,\n        in_index=2,\n        channels=256,\n        num_convs=1,\n        concat_input=False,\n        dropout_ratio=0.1,\n        num_classes=19,\n        norm_cfg=dict(type='SyncBN', requires_grad=True),\n        align_corners=False,\n        loss_decode=dict(\n            type='CrossEntropyLoss', use_sigmoid=False, loss_weight=0.4)),\n    train_cfg=dict(),\n    test_cfg=dict(mode='whole'))\ndataset_type = 'DummyCityscapes'\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ncrop_size = (512, 1024)\ntrain_pipeline = [\n    dict(type='Resize', img_scale=(2048, 1024), ratio_range=(0.5, 2.0)),\n    dict(type='RandomCrop', crop_size=(512, 1024), cat_max_ratio=0.75),\n    dict(type='RandomFlip', prob=0.5),\n    dict(type='PhotoMetricDistortion'),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_semantic_seg'])\n]\ntest_pipeline = [\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(2048, 1024),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=2,\n    workers_per_gpu=2,\n    train=dict(\n        type='DummyCityscapes',\n        pipeline=[\n            dict(\n                type='Resize', img_scale=(2048, 1024), ratio_range=(0.5, 2.0)),\n            dict(type='RandomCrop', crop_size=(512, 1024), cat_max_ratio=0.75),\n            dict(type='RandomFlip', prob=0.5),\n            dict(type='PhotoMetricDistortion'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='DefaultFormatBundle'),\n            dict(type='Collect', keys=['img', 'gt_semantic_seg'])\n        ]),\n    val=dict(\n        type='DummyCityscapes',\n        pipeline=[\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(2048, 1024),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]),\n    test=dict(\n        type='DummyCityscapes',\n        pipeline=[\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(2048, 1024),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]))\nlog_config = dict(\n    interval=50, hooks=[dict(type='TextLoggerHook', by_epoch=False)])\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = None\nresume_from = None\nworkflow = [('train', 1)]\ncudnn_benchmark = True\noptimizer = dict(type='SGD', lr=0.01, momentum=0.9, weight_decay=0.0005)\noptimizer_config = dict()\nlr_config = dict(policy='poly', power=0.9, min_lr=0.0001, by_epoch=False)\nrunner = dict(type='IterBasedRunner', max_iters=2000)\ncheckpoint_config = dict(by_epoch=False, interval=8000)\nevaluation = dict(interval=8000, metric='mIoU')\nwork_dir = 'work_dirs_1node_1gpu/deeplabv3plus_r50-d8_512x1024_2k_dummy_cityscapes'\ngpu_ids = range(0, 1)\nseed = None\n", "CLASSES": ["road", "sidewalk", "building", "wall", "fence", "pole", "traffic light", "traffic sign", "vegetation", "terrain", "sky", "person", "rider", "car", "truck", "bus", "train", "motorcycle", "bicycle"], "PALETTE": [[128, 64, 128], [244, 35, 232], [70, 70, 70], [102, 102, 156], [190, 153, 153], [153, 153, 153], [250, 170, 30], [220, 220, 0], [107, 142, 35], [152, 251, 152], [70, 130, 180], [220, 20, 60], [255, 0, 0], [0, 0, 142], [0, 0, 70], [0, 60, 100], [0, 80, 100], [0, 0, 230], [119, 11, 32]]}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 0.00978, "memory": 18769, "data_time": 0.0212, "decode.loss_seg": 2.95074, "decode.acc_seg": 5.26402, "aux.loss_seg": 1.17915, "aux.acc_seg": 5.26438, "loss": 4.1299, "time": 0.64729}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 0.00956, "memory": 18769, "data_time": 0.01961, "decode.loss_seg": 2.94913, "decode.acc_seg": 5.26384, "aux.loss_seg": 1.17889, "aux.acc_seg": 5.26401, "loss": 4.12802, "time": 0.52471}
{"mode": "train", "epoch": 1, "iter": 150, "lr": 0.00933, "memory": 18769, "data_time": 0.017, "decode.loss_seg": 2.94832, "decode.acc_seg": 5.25034, "aux.loss_seg": 1.17881, "aux.acc_seg": 5.26177, "loss": 4.12713, "time": 0.52211}
{"mode": "train", "epoch": 1, "iter": 200, "lr": 0.00911, "memory": 18769, "data_time": 0.01573, "decode.loss_seg": 2.94761, "decode.acc_seg": 5.26711, "aux.loss_seg": 1.17876, "aux.acc_seg": 5.25888, "loss": 4.12637, "time": 0.4995}
{"mode": "train", "epoch": 1, "iter": 250, "lr": 0.00888, "memory": 18769, "data_time": 0.01033, "decode.loss_seg": 2.9472, "decode.acc_seg": 5.25746, "aux.loss_seg": 1.17867, "aux.acc_seg": 5.25889, "loss": 4.12587, "time": 0.4836}
{"mode": "train", "epoch": 1, "iter": 300, "lr": 0.00866, "memory": 18769, "data_time": 0.03063, "decode.loss_seg": 2.94684, "decode.acc_seg": 5.26796, "aux.loss_seg": 1.17861, "aux.acc_seg": 5.26162, "loss": 4.12546, "time": 0.52702}
{"mode": "train", "epoch": 1, "iter": 350, "lr": 0.00843, "memory": 18769, "data_time": 0.01813, "decode.loss_seg": 2.94651, "decode.acc_seg": 5.26296, "aux.loss_seg": 1.17855, "aux.acc_seg": 5.27221, "loss": 4.12506, "time": 0.52202}
{"mode": "train", "epoch": 1, "iter": 400, "lr": 0.0082, "memory": 18769, "data_time": 0.01677, "decode.loss_seg": 2.94632, "decode.acc_seg": 5.27085, "aux.loss_seg": 1.17852, "aux.acc_seg": 5.26488, "loss": 4.12484, "time": 0.51523}
{"mode": "train", "epoch": 1, "iter": 450, "lr": 0.00798, "memory": 18769, "data_time": 0.01065, "decode.loss_seg": 2.94612, "decode.acc_seg": 5.26846, "aux.loss_seg": 1.17848, "aux.acc_seg": 5.26138, "loss": 4.1246, "time": 0.49279}
{"mode": "train", "epoch": 1, "iter": 500, "lr": 0.00775, "memory": 18769, "data_time": 0.01, "decode.loss_seg": 2.94594, "decode.acc_seg": 5.26328, "aux.loss_seg": 1.17844, "aux.acc_seg": 5.27666, "loss": 4.12438, "time": 0.49555}
{"mode": "train", "epoch": 1, "iter": 550, "lr": 0.00752, "memory": 18769, "data_time": 0.01839, "decode.loss_seg": 2.94583, "decode.acc_seg": 5.26806, "aux.loss_seg": 1.1784, "aux.acc_seg": 5.2586, "loss": 4.12424, "time": 0.54539}
{"mode": "train", "epoch": 1, "iter": 600, "lr": 0.00729, "memory": 18769, "data_time": 0.01088, "decode.loss_seg": 2.94574, "decode.acc_seg": 5.26923, "aux.loss_seg": 1.17838, "aux.acc_seg": 5.26242, "loss": 4.12412, "time": 0.49184}
{"mode": "train", "epoch": 1, "iter": 650, "lr": 0.00706, "memory": 18769, "data_time": 0.00997, "decode.loss_seg": 2.94565, "decode.acc_seg": 5.25747, "aux.loss_seg": 1.17835, "aux.acc_seg": 5.25245, "loss": 4.124, "time": 0.52615}
{"mode": "train", "epoch": 1, "iter": 700, "lr": 0.00682, "memory": 18769, "data_time": 0.01801, "decode.loss_seg": 2.94554, "decode.acc_seg": 5.26907, "aux.loss_seg": 1.17833, "aux.acc_seg": 5.25691, "loss": 4.12386, "time": 0.52698}
{"mode": "train", "epoch": 1, "iter": 750, "lr": 0.00659, "memory": 18769, "data_time": 0.00775, "decode.loss_seg": 2.94548, "decode.acc_seg": 5.25521, "aux.loss_seg": 1.1783, "aux.acc_seg": 5.266, "loss": 4.12378, "time": 0.51917}
{"mode": "train", "epoch": 1, "iter": 800, "lr": 0.00636, "memory": 18769, "data_time": 0.01895, "decode.loss_seg": 2.94542, "decode.acc_seg": 5.25062, "aux.loss_seg": 1.17829, "aux.acc_seg": 5.25745, "loss": 4.12371, "time": 0.53613}
{"mode": "train", "epoch": 1, "iter": 850, "lr": 0.00612, "memory": 18769, "data_time": 0.00966, "decode.loss_seg": 2.94533, "decode.acc_seg": 5.25939, "aux.loss_seg": 1.17826, "aux.acc_seg": 5.26467, "loss": 4.12359, "time": 0.51823}
{"mode": "train", "epoch": 1, "iter": 900, "lr": 0.00589, "memory": 18769, "data_time": 0.00947, "decode.loss_seg": 2.94531, "decode.acc_seg": 5.24867, "aux.loss_seg": 1.17825, "aux.acc_seg": 5.26197, "loss": 4.12356, "time": 0.51267}
{"mode": "train", "epoch": 1, "iter": 950, "lr": 0.00565, "memory": 18769, "data_time": 0.02081, "decode.loss_seg": 2.94531, "decode.acc_seg": 5.25605, "aux.loss_seg": 1.17822, "aux.acc_seg": 5.27139, "loss": 4.12353, "time": 0.52755}
{"mode": "train", "epoch": 1, "iter": 1000, "lr": 0.00541, "memory": 18769, "data_time": 0.0239, "decode.loss_seg": 2.94519, "decode.acc_seg": 5.27044, "aux.loss_seg": 1.17822, "aux.acc_seg": 5.26368, "loss": 4.1234, "time": 0.53566}
{"mode": "train", "epoch": 1, "iter": 1050, "lr": 0.00517, "memory": 18769, "data_time": 0.02671, "decode.loss_seg": 2.94519, "decode.acc_seg": 5.25766, "aux.loss_seg": 1.17821, "aux.acc_seg": 5.25581, "loss": 4.1234, "time": 0.5187}
{"mode": "train", "epoch": 1, "iter": 1100, "lr": 0.00493, "memory": 18769, "data_time": 0.01074, "decode.loss_seg": 2.94515, "decode.acc_seg": 5.25974, "aux.loss_seg": 1.17818, "aux.acc_seg": 5.27824, "loss": 4.12333, "time": 0.49156}
{"mode": "train", "epoch": 1, "iter": 1150, "lr": 0.00469, "memory": 18769, "data_time": 0.00957, "decode.loss_seg": 2.94511, "decode.acc_seg": 5.26062, "aux.loss_seg": 1.17818, "aux.acc_seg": 5.24743, "loss": 4.1233, "time": 0.52943}
{"mode": "train", "epoch": 1, "iter": 1200, "lr": 0.00444, "memory": 18769, "data_time": 0.01659, "decode.loss_seg": 2.94511, "decode.acc_seg": 5.25266, "aux.loss_seg": 1.17817, "aux.acc_seg": 5.26072, "loss": 4.12328, "time": 0.50909}
{"mode": "train", "epoch": 1, "iter": 1250, "lr": 0.0042, "memory": 18769, "data_time": 0.01177, "decode.loss_seg": 2.94506, "decode.acc_seg": 5.26633, "aux.loss_seg": 1.17815, "aux.acc_seg": 5.27392, "loss": 4.12321, "time": 0.52383}
{"mode": "train", "epoch": 1, "iter": 1300, "lr": 0.00395, "memory": 18769, "data_time": 0.01622, "decode.loss_seg": 2.94502, "decode.acc_seg": 5.26931, "aux.loss_seg": 1.17814, "aux.acc_seg": 5.25474, "loss": 4.12316, "time": 0.50609}
{"mode": "train", "epoch": 1, "iter": 1350, "lr": 0.00371, "memory": 18769, "data_time": 0.0108, "decode.loss_seg": 2.94498, "decode.acc_seg": 5.26317, "aux.loss_seg": 1.17814, "aux.acc_seg": 5.26019, "loss": 4.12312, "time": 0.48779}
{"mode": "train", "epoch": 1, "iter": 1400, "lr": 0.00346, "memory": 18769, "data_time": 0.02752, "decode.loss_seg": 2.94498, "decode.acc_seg": 5.26685, "aux.loss_seg": 1.17813, "aux.acc_seg": 5.25888, "loss": 4.12311, "time": 0.54839}
{"mode": "train", "epoch": 1, "iter": 1450, "lr": 0.0032, "memory": 18769, "data_time": 0.00803, "decode.loss_seg": 2.94497, "decode.acc_seg": 5.27562, "aux.loss_seg": 1.17812, "aux.acc_seg": 5.26846, "loss": 4.12309, "time": 0.51391}
{"mode": "train", "epoch": 2, "iter": 1500, "lr": 0.00295, "memory": 18769, "data_time": 0.02665, "decode.loss_seg": 2.94499, "decode.acc_seg": 5.25865, "aux.loss_seg": 1.17812, "aux.acc_seg": 5.27099, "loss": 4.12311, "time": 0.54429}
{"mode": "train", "epoch": 2, "iter": 1550, "lr": 0.00269, "memory": 18769, "data_time": 0.01194, "decode.loss_seg": 2.94495, "decode.acc_seg": 5.26259, "aux.loss_seg": 1.17812, "aux.acc_seg": 5.26951, "loss": 4.12307, "time": 0.49593}
{"mode": "train", "epoch": 2, "iter": 1600, "lr": 0.00243, "memory": 18769, "data_time": 0.0123, "decode.loss_seg": 2.94494, "decode.acc_seg": 5.24102, "aux.loss_seg": 1.17811, "aux.acc_seg": 5.26807, "loss": 4.12305, "time": 0.49247}
{"mode": "train", "epoch": 2, "iter": 1650, "lr": 0.00217, "memory": 18769, "data_time": 0.01615, "decode.loss_seg": 2.94494, "decode.acc_seg": 5.2635, "aux.loss_seg": 1.17811, "aux.acc_seg": 5.25814, "loss": 4.12305, "time": 0.52183}
{"mode": "train", "epoch": 2, "iter": 1700, "lr": 0.0019, "memory": 18769, "data_time": 0.02962, "decode.loss_seg": 2.94493, "decode.acc_seg": 5.26309, "aux.loss_seg": 1.1781, "aux.acc_seg": 5.26961, "loss": 4.12303, "time": 0.51814}
{"mode": "train", "epoch": 2, "iter": 1750, "lr": 0.00163, "memory": 18769, "data_time": 0.01848, "decode.loss_seg": 2.94491, "decode.acc_seg": 5.26395, "aux.loss_seg": 1.17808, "aux.acc_seg": 5.26232, "loss": 4.12299, "time": 0.52258}
{"mode": "train", "epoch": 2, "iter": 1800, "lr": 0.00135, "memory": 18769, "data_time": 0.01229, "decode.loss_seg": 2.94491, "decode.acc_seg": 5.26161, "aux.loss_seg": 1.17809, "aux.acc_seg": 5.2678, "loss": 4.123, "time": 0.49055}
{"mode": "train", "epoch": 2, "iter": 1850, "lr": 0.00107, "memory": 18769, "data_time": 0.02024, "decode.loss_seg": 2.9449, "decode.acc_seg": 5.26323, "aux.loss_seg": 1.1781, "aux.acc_seg": 5.25498, "loss": 4.12299, "time": 0.7304}
{"mode": "train", "epoch": 2, "iter": 1900, "lr": 0.00077, "memory": 18769, "data_time": 0.01454, "decode.loss_seg": 2.94488, "decode.acc_seg": 5.26723, "aux.loss_seg": 1.17808, "aux.acc_seg": 5.26091, "loss": 4.12296, "time": 0.53411}
{"mode": "train", "epoch": 2, "iter": 1950, "lr": 0.00046, "memory": 18769, "data_time": 0.02381, "decode.loss_seg": 2.9449, "decode.acc_seg": 5.26287, "aux.loss_seg": 1.17809, "aux.acc_seg": 5.2542, "loss": 4.12299, "time": 0.70016}
{"mode": "train", "epoch": 2, "iter": 2000, "lr": 0.00011, "memory": 18769, "data_time": 0.01765, "decode.loss_seg": 2.94488, "decode.acc_seg": 5.25948, "aux.loss_seg": 1.17809, "aux.acc_seg": 5.27188, "loss": 4.12297, "time": 0.74443}
