{"env_info": "sys.platform: linux\nPython: 3.7.10 (default, Feb 26 2021, 18:47:35) [GCC 7.3.0]\nCUDA available: True\nGPU 0: Tesla V100-SXM2-32GB\nCUDA_HOME: /mnt/cache/share/polaris/dep/cuda-10.1-cudnn7.6.5\nNVCC: Cuda compilation tools, release 10.1, V10.1.243\nGCC: gcc (GCC) 5.4.0\nPyTorch: 1.8.0\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) Math Kernel Library Version 2020.0.2 Product Build 20200624 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v1.7.0 (Git Hash 7aed236906b1f7a05c0917e5257a1af05e9ff683)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 10.1\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_37,code=compute_37\n  - CuDNN 7.6.3\n  - Magma 2.5.2\n  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=10.1, CUDNN_VERSION=7.6.3, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.8.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, \n\nTorchVision: 0.9.0\nOpenCV: 4.5.1\nMMCV: 1.3.8\nMMCV Compiler: GCC 7.3\nMMCV CUDA Compiler: 10.1\nMMSegmentation: 0.14.1+9988853", "seed": null, "exp_name": "deeplabv3_r50-d8_512x1024_4k_dummy_cityscapes.py", "mmseg_version": "0.14.1+9988853", "config": "norm_cfg = dict(type='SyncBN', requires_grad=True)\nmodel = dict(\n    type='EncoderDecoder',\n    pretrained='open-mmlab://resnet50_v1c',\n    backbone=dict(\n        type='ResNetV1c',\n        depth=50,\n        num_stages=4,\n        out_indices=(0, 1, 2, 3),\n        dilations=(1, 1, 2, 4),\n        strides=(1, 2, 1, 1),\n        norm_cfg=dict(type='SyncBN', requires_grad=True),\n        norm_eval=False,\n        style='pytorch',\n        contract_dilation=True,\n        pretrained='open-mmlab://resnet50_v1c'),\n    decode_head=dict(\n        type='ASPPHead',\n        in_channels=2048,\n        in_index=3,\n        channels=512,\n        dilations=(1, 12, 24, 36),\n        dropout_ratio=0.1,\n        num_classes=19,\n        norm_cfg=dict(type='SyncBN', requires_grad=True),\n        align_corners=False,\n        loss_decode=dict(\n            type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0)),\n    auxiliary_head=dict(\n        type='FCNHead',\n        in_channels=1024,\n        in_index=2,\n        channels=256,\n        num_convs=1,\n        concat_input=False,\n        dropout_ratio=0.1,\n        num_classes=19,\n        norm_cfg=dict(type='SyncBN', requires_grad=True),\n        align_corners=False,\n        loss_decode=dict(\n            type='CrossEntropyLoss', use_sigmoid=False, loss_weight=0.4)),\n    train_cfg=dict(),\n    test_cfg=dict(mode='whole'))\ndataset_type = 'DummyCityscapes'\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ncrop_size = (512, 1024)\ntrain_pipeline = [\n    dict(type='Resize', img_scale=(2048, 1024), ratio_range=(0.5, 2.0)),\n    dict(type='RandomCrop', crop_size=(512, 1024), cat_max_ratio=0.75),\n    dict(type='RandomFlip', prob=0.5),\n    dict(type='PhotoMetricDistortion'),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_semantic_seg'])\n]\ntest_pipeline = [\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(2048, 1024),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=2,\n    workers_per_gpu=2,\n    train=dict(\n        type='DummyCityscapes',\n        pipeline=[\n            dict(\n                type='Resize', img_scale=(2048, 1024), ratio_range=(0.5, 2.0)),\n            dict(type='RandomCrop', crop_size=(512, 1024), cat_max_ratio=0.75),\n            dict(type='RandomFlip', prob=0.5),\n            dict(type='PhotoMetricDistortion'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='DefaultFormatBundle'),\n            dict(type='Collect', keys=['img', 'gt_semantic_seg'])\n        ]),\n    val=dict(\n        type='DummyCityscapes',\n        pipeline=[\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(2048, 1024),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]),\n    test=dict(\n        type='DummyCityscapes',\n        pipeline=[\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(2048, 1024),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]))\nlog_config = dict(\n    interval=50, hooks=[dict(type='TextLoggerHook', by_epoch=False)])\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = None\nresume_from = None\nworkflow = [('train', 1)]\ncudnn_benchmark = True\noptimizer = dict(type='SGD', lr=0.01, momentum=0.9, weight_decay=0.0005)\noptimizer_config = dict()\nlr_config = dict(policy='poly', power=0.9, min_lr=0.0001, by_epoch=False)\nrunner = dict(type='IterBasedRunner', max_iters=4000)\ncheckpoint_config = dict(by_epoch=False, interval=2000)\nevaluation = dict(interval=2000, metric='mIoU')\nwork_dir = 'work_dirs_1node_1gpu/deeplabv3_r50-d8_512x1024_4k_dummy_cityscapes'\ngpu_ids = range(0, 1)\nseed = None\n", "CLASSES": ["road", "sidewalk", "building", "wall", "fence", "pole", "traffic light", "traffic sign", "vegetation", "terrain", "sky", "person", "rider", "car", "truck", "bus", "train", "motorcycle", "bicycle"], "PALETTE": [[128, 64, 128], [244, 35, 232], [70, 70, 70], [102, 102, 156], [190, 153, 153], [153, 153, 153], [250, 170, 30], [220, 220, 0], [107, 142, 35], [152, 251, 152], [70, 130, 180], [220, 20, 60], [255, 0, 0], [0, 0, 142], [0, 0, 70], [0, 60, 100], [0, 80, 100], [0, 0, 230], [119, 11, 32]]}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 0.00989, "memory": 18984, "data_time": 0.02918, "decode.loss_seg": 2.9505, "decode.acc_seg": 5.25975, "aux.loss_seg": 1.17915, "aux.acc_seg": 5.26109, "loss": 4.12965, "time": 0.87172}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 0.00978, "memory": 18984, "data_time": 0.01819, "decode.loss_seg": 2.94896, "decode.acc_seg": 5.26182, "aux.loss_seg": 1.17889, "aux.acc_seg": 5.25881, "loss": 4.12785, "time": 0.66853}
{"mode": "train", "epoch": 1, "iter": 150, "lr": 0.00967, "memory": 18984, "data_time": 0.01609, "decode.loss_seg": 2.94828, "decode.acc_seg": 5.2722, "aux.loss_seg": 1.17879, "aux.acc_seg": 5.26101, "loss": 4.12708, "time": 0.66975}
{"mode": "train", "epoch": 1, "iter": 200, "lr": 0.00956, "memory": 18984, "data_time": 0.01667, "decode.loss_seg": 2.94785, "decode.acc_seg": 5.26305, "aux.loss_seg": 1.17872, "aux.acc_seg": 5.26226, "loss": 4.12657, "time": 0.67036}
{"mode": "train", "epoch": 1, "iter": 250, "lr": 0.00944, "memory": 18984, "data_time": 0.01953, "decode.loss_seg": 2.94742, "decode.acc_seg": 5.26278, "aux.loss_seg": 1.17865, "aux.acc_seg": 5.26195, "loss": 4.12607, "time": 0.6766}
{"mode": "train", "epoch": 1, "iter": 300, "lr": 0.00933, "memory": 18984, "data_time": 0.01959, "decode.loss_seg": 2.94711, "decode.acc_seg": 5.25586, "aux.loss_seg": 1.17858, "aux.acc_seg": 5.26094, "loss": 4.1257, "time": 0.67129}
{"mode": "train", "epoch": 1, "iter": 350, "lr": 0.00922, "memory": 18984, "data_time": 0.01776, "decode.loss_seg": 2.94682, "decode.acc_seg": 5.26402, "aux.loss_seg": 1.17852, "aux.acc_seg": 5.26556, "loss": 4.12534, "time": 0.67066}
{"mode": "train", "epoch": 1, "iter": 400, "lr": 0.00911, "memory": 18984, "data_time": 0.02003, "decode.loss_seg": 2.94655, "decode.acc_seg": 5.26445, "aux.loss_seg": 1.17848, "aux.acc_seg": 5.26439, "loss": 4.12503, "time": 0.67484}
{"mode": "train", "epoch": 1, "iter": 450, "lr": 0.00899, "memory": 18984, "data_time": 0.02319, "decode.loss_seg": 2.94633, "decode.acc_seg": 5.26628, "aux.loss_seg": 1.17844, "aux.acc_seg": 5.26079, "loss": 4.12476, "time": 0.67653}
{"mode": "train", "epoch": 1, "iter": 500, "lr": 0.00888, "memory": 18984, "data_time": 0.01876, "decode.loss_seg": 2.9461, "decode.acc_seg": 5.26776, "aux.loss_seg": 1.1784, "aux.acc_seg": 5.2649, "loss": 4.12451, "time": 0.66554}
{"mode": "train", "epoch": 1, "iter": 550, "lr": 0.00877, "memory": 18984, "data_time": 0.01149, "decode.loss_seg": 2.94598, "decode.acc_seg": 5.26604, "aux.loss_seg": 1.17836, "aux.acc_seg": 5.26753, "loss": 4.12433, "time": 0.65485}
{"mode": "train", "epoch": 1, "iter": 600, "lr": 0.00866, "memory": 18984, "data_time": 0.02402, "decode.loss_seg": 2.9458, "decode.acc_seg": 5.25711, "aux.loss_seg": 1.17833, "aux.acc_seg": 5.26308, "loss": 4.12413, "time": 0.67737}
{"mode": "train", "epoch": 1, "iter": 650, "lr": 0.00854, "memory": 18984, "data_time": 0.01451, "decode.loss_seg": 2.94568, "decode.acc_seg": 5.2626, "aux.loss_seg": 1.1783, "aux.acc_seg": 5.26557, "loss": 4.12398, "time": 0.66236}
{"mode": "train", "epoch": 1, "iter": 700, "lr": 0.00843, "memory": 18984, "data_time": 0.01613, "decode.loss_seg": 2.94557, "decode.acc_seg": 5.26096, "aux.loss_seg": 1.17827, "aux.acc_seg": 5.26355, "loss": 4.12384, "time": 0.66649}
{"mode": "train", "epoch": 1, "iter": 750, "lr": 0.00831, "memory": 18984, "data_time": 0.01233, "decode.loss_seg": 2.94546, "decode.acc_seg": 5.26484, "aux.loss_seg": 1.17824, "aux.acc_seg": 5.25709, "loss": 4.12371, "time": 0.65939}
{"mode": "train", "epoch": 1, "iter": 800, "lr": 0.0082, "memory": 18984, "data_time": 0.03368, "decode.loss_seg": 2.94538, "decode.acc_seg": 5.26451, "aux.loss_seg": 1.17822, "aux.acc_seg": 5.26248, "loss": 4.1236, "time": 0.7068}
{"mode": "train", "epoch": 1, "iter": 850, "lr": 0.00809, "memory": 18984, "data_time": 0.01587, "decode.loss_seg": 2.9453, "decode.acc_seg": 5.26651, "aux.loss_seg": 1.17819, "aux.acc_seg": 5.26294, "loss": 4.12349, "time": 0.66808}
{"mode": "train", "epoch": 1, "iter": 900, "lr": 0.00797, "memory": 18984, "data_time": 0.01397, "decode.loss_seg": 2.94522, "decode.acc_seg": 5.26244, "aux.loss_seg": 1.17817, "aux.acc_seg": 5.26803, "loss": 4.12339, "time": 0.66425}
{"mode": "train", "epoch": 1, "iter": 950, "lr": 0.00786, "memory": 18984, "data_time": 0.0167, "decode.loss_seg": 2.94515, "decode.acc_seg": 5.26583, "aux.loss_seg": 1.17815, "aux.acc_seg": 5.2664, "loss": 4.1233, "time": 0.66702}
{"mode": "train", "epoch": 1, "iter": 1000, "lr": 0.00774, "memory": 18984, "data_time": 0.01884, "decode.loss_seg": 2.94508, "decode.acc_seg": 5.26671, "aux.loss_seg": 1.17813, "aux.acc_seg": 5.26584, "loss": 4.12322, "time": 0.67178}
{"mode": "train", "epoch": 1, "iter": 1050, "lr": 0.00763, "memory": 18984, "data_time": 0.01846, "decode.loss_seg": 2.94504, "decode.acc_seg": 5.26394, "aux.loss_seg": 1.17812, "aux.acc_seg": 5.25768, "loss": 4.12316, "time": 0.69899}
{"mode": "train", "epoch": 1, "iter": 1100, "lr": 0.00751, "memory": 18984, "data_time": 0.01841, "decode.loss_seg": 2.94499, "decode.acc_seg": 5.2606, "aux.loss_seg": 1.17811, "aux.acc_seg": 5.2604, "loss": 4.1231, "time": 0.66704}
{"mode": "train", "epoch": 1, "iter": 1150, "lr": 0.0074, "memory": 18984, "data_time": 0.02746, "decode.loss_seg": 2.94495, "decode.acc_seg": 5.26817, "aux.loss_seg": 1.17809, "aux.acc_seg": 5.26493, "loss": 4.12304, "time": 0.75353}
{"mode": "train", "epoch": 1, "iter": 1200, "lr": 0.00728, "memory": 18984, "data_time": 0.03062, "decode.loss_seg": 2.94492, "decode.acc_seg": 5.26547, "aux.loss_seg": 1.17808, "aux.acc_seg": 5.26491, "loss": 4.123, "time": 0.75867}
{"mode": "train", "epoch": 1, "iter": 1250, "lr": 0.00717, "memory": 18984, "data_time": 0.02331, "decode.loss_seg": 2.94489, "decode.acc_seg": 5.26526, "aux.loss_seg": 1.17806, "aux.acc_seg": 5.26829, "loss": 4.12295, "time": 0.76883}
{"mode": "train", "epoch": 1, "iter": 1300, "lr": 0.00705, "memory": 18984, "data_time": 0.02082, "decode.loss_seg": 2.94485, "decode.acc_seg": 5.26309, "aux.loss_seg": 1.17805, "aux.acc_seg": 5.26255, "loss": 4.1229, "time": 0.67738}
{"mode": "train", "epoch": 1, "iter": 1350, "lr": 0.00694, "memory": 18984, "data_time": 0.01734, "decode.loss_seg": 2.94481, "decode.acc_seg": 5.26669, "aux.loss_seg": 1.17803, "aux.acc_seg": 5.27281, "loss": 4.12284, "time": 0.67377}
{"mode": "train", "epoch": 1, "iter": 1400, "lr": 0.00682, "memory": 18984, "data_time": 0.0135, "decode.loss_seg": 2.94479, "decode.acc_seg": 5.26277, "aux.loss_seg": 1.17803, "aux.acc_seg": 5.26222, "loss": 4.12282, "time": 0.70685}
{"mode": "train", "epoch": 1, "iter": 1450, "lr": 0.0067, "memory": 18984, "data_time": 0.01152, "decode.loss_seg": 2.94476, "decode.acc_seg": 5.27019, "aux.loss_seg": 1.17802, "aux.acc_seg": 5.26731, "loss": 4.12278, "time": 0.74816}
{"mode": "train", "epoch": 2, "iter": 1500, "lr": 0.00659, "memory": 18984, "data_time": 0.02535, "decode.loss_seg": 2.94475, "decode.acc_seg": 5.26077, "aux.loss_seg": 1.17801, "aux.acc_seg": 5.25821, "loss": 4.12276, "time": 0.7386}
{"mode": "train", "epoch": 2, "iter": 1550, "lr": 0.00647, "memory": 18984, "data_time": 0.02552, "decode.loss_seg": 2.94472, "decode.acc_seg": 5.26635, "aux.loss_seg": 1.178, "aux.acc_seg": 5.26375, "loss": 4.12272, "time": 0.70537}
{"mode": "train", "epoch": 2, "iter": 1600, "lr": 0.00635, "memory": 18984, "data_time": 0.02175, "decode.loss_seg": 2.9447, "decode.acc_seg": 5.26709, "aux.loss_seg": 1.17799, "aux.acc_seg": 5.27031, "loss": 4.12269, "time": 0.68313}
{"mode": "train", "epoch": 2, "iter": 1650, "lr": 0.00624, "memory": 18984, "data_time": 0.01863, "decode.loss_seg": 2.94469, "decode.acc_seg": 5.26511, "aux.loss_seg": 1.17798, "aux.acc_seg": 5.26359, "loss": 4.12267, "time": 0.67444}
{"mode": "train", "epoch": 2, "iter": 1700, "lr": 0.00612, "memory": 18984, "data_time": 0.02791, "decode.loss_seg": 2.94468, "decode.acc_seg": 5.26409, "aux.loss_seg": 1.17798, "aux.acc_seg": 5.26747, "loss": 4.12266, "time": 0.69007}
{"mode": "train", "epoch": 2, "iter": 1750, "lr": 0.006, "memory": 18984, "data_time": 0.01486, "decode.loss_seg": 2.94466, "decode.acc_seg": 5.26538, "aux.loss_seg": 1.17798, "aux.acc_seg": 5.25982, "loss": 4.12264, "time": 0.67119}
{"mode": "train", "epoch": 2, "iter": 1800, "lr": 0.00588, "memory": 18984, "data_time": 0.01783, "decode.loss_seg": 2.94465, "decode.acc_seg": 5.2714, "aux.loss_seg": 1.17797, "aux.acc_seg": 5.26168, "loss": 4.12262, "time": 0.66902}
{"mode": "train", "epoch": 2, "iter": 1850, "lr": 0.00576, "memory": 18984, "data_time": 0.02135, "decode.loss_seg": 2.94464, "decode.acc_seg": 5.2628, "aux.loss_seg": 1.17796, "aux.acc_seg": 5.26299, "loss": 4.1226, "time": 0.67352}
{"mode": "train", "epoch": 2, "iter": 1900, "lr": 0.00565, "memory": 18984, "data_time": 0.0199, "decode.loss_seg": 2.94463, "decode.acc_seg": 5.27288, "aux.loss_seg": 1.17796, "aux.acc_seg": 5.26583, "loss": 4.12258, "time": 0.66892}
{"mode": "train", "epoch": 2, "iter": 1950, "lr": 0.00553, "memory": 18984, "data_time": 0.03449, "decode.loss_seg": 2.94462, "decode.acc_seg": 5.26454, "aux.loss_seg": 1.17795, "aux.acc_seg": 5.26872, "loss": 4.12257, "time": 0.69308}
{"mode": "train", "epoch": 2, "iter": 500, "lr": 0.00541, "memory": 18984, "aAcc": 0.0527, "mIoU": 0.0173, "mAcc": 0.0527, "IoU.road": 0.0441, "IoU.sidewalk": 0.0323, "IoU.building": 0.0032, "IoU.wall": 0.0044, "IoU.fence": 0.0027, "IoU.pole": 0.0246, "IoU.traffic light": 0.0033, "IoU.traffic sign": 0.0021, "IoU.vegetation": 0.002, "IoU.terrain": 0.0478, "IoU.sky": 0.027, "IoU.person": 0.0138, "IoU.rider": 0.0343, "IoU.car": 0.0019, "IoU.truck": 0.0098, "IoU.bus": 0.024, "IoU.train": 0.0263, "IoU.motorcycle": 0.0223, "IoU.bicycle": 0.0026, "Acc.road": 0.2135, "Acc.sidewalk": 0.0772, "Acc.building": 0.0034, "Acc.wall": 0.0048, "Acc.fence": 0.0028, "Acc.pole": 0.0442, "Acc.traffic light": 0.0035, "Acc.traffic sign": 0.0022, "Acc.vegetation": 0.002, "Acc.terrain": 0.3408, "Acc.sky": 0.0525, "Acc.person": 0.0183, "Acc.rider": 0.0895, "Acc.car": 0.0019, "Acc.truck": 0.0119, "Acc.bus": 0.0423, "Acc.train": 0.0499, "Acc.motorcycle": 0.0373, "Acc.bicycle": 0.0027, "data_time": 0.01553, "decode.loss_seg": 2.94461, "decode.acc_seg": 5.26591, "aux.loss_seg": 1.17795, "aux.acc_seg": 5.26351, "loss": 4.12256, "time": 0.71938}
{"mode": "train", "epoch": 2, "iter": 2050, "lr": 0.00529, "memory": 18984, "data_time": 6.56305, "decode.loss_seg": 2.9446, "decode.acc_seg": 5.27073, "aux.loss_seg": 1.17794, "aux.acc_seg": 5.26692, "loss": 4.12254, "time": 7.18782}
{"mode": "train", "epoch": 2, "iter": 2100, "lr": 0.00517, "memory": 18984, "data_time": 0.00801, "decode.loss_seg": 2.9446, "decode.acc_seg": 5.26182, "aux.loss_seg": 1.17793, "aux.acc_seg": 5.26677, "loss": 4.12253, "time": 0.6348}
{"mode": "train", "epoch": 2, "iter": 2150, "lr": 0.00505, "memory": 18984, "data_time": 0.00752, "decode.loss_seg": 2.94458, "decode.acc_seg": 5.27008, "aux.loss_seg": 1.17793, "aux.acc_seg": 5.26315, "loss": 4.12252, "time": 0.63478}
{"mode": "train", "epoch": 2, "iter": 2200, "lr": 0.00493, "memory": 18984, "data_time": 0.00764, "decode.loss_seg": 2.94458, "decode.acc_seg": 5.26162, "aux.loss_seg": 1.17793, "aux.acc_seg": 5.2656, "loss": 4.12251, "time": 0.63474}
{"mode": "train", "epoch": 2, "iter": 2250, "lr": 0.00481, "memory": 18984, "data_time": 0.00734, "decode.loss_seg": 2.94457, "decode.acc_seg": 5.26358, "aux.loss_seg": 1.17792, "aux.acc_seg": 5.2643, "loss": 4.1225, "time": 0.63405}
{"mode": "train", "epoch": 2, "iter": 2300, "lr": 0.00469, "memory": 18984, "data_time": 0.00746, "decode.loss_seg": 2.94456, "decode.acc_seg": 5.26461, "aux.loss_seg": 1.17792, "aux.acc_seg": 5.26479, "loss": 4.12249, "time": 0.63481}
{"mode": "train", "epoch": 2, "iter": 2350, "lr": 0.00456, "memory": 18984, "data_time": 0.00738, "decode.loss_seg": 2.94456, "decode.acc_seg": 5.2698, "aux.loss_seg": 1.17792, "aux.acc_seg": 5.26213, "loss": 4.12248, "time": 0.634}
{"mode": "train", "epoch": 2, "iter": 2400, "lr": 0.00444, "memory": 18984, "data_time": 0.00697, "decode.loss_seg": 2.94456, "decode.acc_seg": 5.26443, "aux.loss_seg": 1.17791, "aux.acc_seg": 5.26534, "loss": 4.12247, "time": 0.63201}
{"mode": "train", "epoch": 2, "iter": 2450, "lr": 0.00432, "memory": 18984, "data_time": 0.01095, "decode.loss_seg": 2.94455, "decode.acc_seg": 5.26389, "aux.loss_seg": 1.17791, "aux.acc_seg": 5.26043, "loss": 4.12247, "time": 0.63649}
{"mode": "train", "epoch": 2, "iter": 2500, "lr": 0.0042, "memory": 18984, "data_time": 0.02367, "decode.loss_seg": 2.94455, "decode.acc_seg": 5.27128, "aux.loss_seg": 1.17791, "aux.acc_seg": 5.26353, "loss": 4.12245, "time": 0.73505}
{"mode": "train", "epoch": 2, "iter": 2550, "lr": 0.00407, "memory": 18984, "data_time": 0.0108, "decode.loss_seg": 2.94454, "decode.acc_seg": 5.27067, "aux.loss_seg": 1.1779, "aux.acc_seg": 5.26372, "loss": 4.12244, "time": 0.63486}
{"mode": "train", "epoch": 2, "iter": 2600, "lr": 0.00395, "memory": 18984, "data_time": 0.00723, "decode.loss_seg": 2.94454, "decode.acc_seg": 5.27413, "aux.loss_seg": 1.1779, "aux.acc_seg": 5.26727, "loss": 4.12244, "time": 0.63252}
{"mode": "train", "epoch": 2, "iter": 2650, "lr": 0.00383, "memory": 18984, "data_time": 0.0072, "decode.loss_seg": 2.94454, "decode.acc_seg": 5.26132, "aux.loss_seg": 1.1779, "aux.acc_seg": 5.26475, "loss": 4.12244, "time": 0.63216}
{"mode": "train", "epoch": 2, "iter": 2700, "lr": 0.0037, "memory": 18984, "data_time": 0.00707, "decode.loss_seg": 2.94453, "decode.acc_seg": 5.26778, "aux.loss_seg": 1.1779, "aux.acc_seg": 5.2623, "loss": 4.12243, "time": 0.63201}
{"mode": "train", "epoch": 2, "iter": 2750, "lr": 0.00358, "memory": 18984, "data_time": 0.00712, "decode.loss_seg": 2.94453, "decode.acc_seg": 5.26555, "aux.loss_seg": 1.1779, "aux.acc_seg": 5.26676, "loss": 4.12243, "time": 0.63535}
{"mode": "train", "epoch": 2, "iter": 2800, "lr": 0.00345, "memory": 18984, "data_time": 0.00739, "decode.loss_seg": 2.94453, "decode.acc_seg": 5.26292, "aux.loss_seg": 1.17789, "aux.acc_seg": 5.26805, "loss": 4.12242, "time": 0.63328}
{"mode": "train", "epoch": 2, "iter": 2850, "lr": 0.00333, "memory": 18984, "data_time": 0.00709, "decode.loss_seg": 2.94452, "decode.acc_seg": 5.26631, "aux.loss_seg": 1.17789, "aux.acc_seg": 5.2673, "loss": 4.12242, "time": 0.63223}
{"mode": "train", "epoch": 2, "iter": 2900, "lr": 0.0032, "memory": 18984, "data_time": 0.01153, "decode.loss_seg": 2.94452, "decode.acc_seg": 5.26535, "aux.loss_seg": 1.17789, "aux.acc_seg": 5.26376, "loss": 4.12242, "time": 0.64972}
{"mode": "train", "epoch": 2, "iter": 2950, "lr": 0.00307, "memory": 18984, "data_time": 0.00854, "decode.loss_seg": 2.94452, "decode.acc_seg": 5.26774, "aux.loss_seg": 1.17789, "aux.acc_seg": 5.26771, "loss": 4.12241, "time": 0.64875}
{"mode": "train", "epoch": 3, "iter": 3000, "lr": 0.00295, "memory": 18984, "data_time": 0.00912, "decode.loss_seg": 2.94452, "decode.acc_seg": 5.27116, "aux.loss_seg": 1.17789, "aux.acc_seg": 5.26185, "loss": 4.12241, "time": 0.6337}
{"mode": "train", "epoch": 3, "iter": 3050, "lr": 0.00282, "memory": 18984, "data_time": 0.00695, "decode.loss_seg": 2.94451, "decode.acc_seg": 5.27141, "aux.loss_seg": 1.17789, "aux.acc_seg": 5.26282, "loss": 4.1224, "time": 0.63136}
{"mode": "train", "epoch": 3, "iter": 3100, "lr": 0.00269, "memory": 18984, "data_time": 0.00708, "decode.loss_seg": 2.94451, "decode.acc_seg": 5.26432, "aux.loss_seg": 1.17789, "aux.acc_seg": 5.26709, "loss": 4.1224, "time": 0.63214}
{"mode": "train", "epoch": 3, "iter": 3150, "lr": 0.00256, "memory": 18984, "data_time": 0.03449, "decode.loss_seg": 2.94451, "decode.acc_seg": 5.26097, "aux.loss_seg": 1.17788, "aux.acc_seg": 5.2635, "loss": 4.1224, "time": 0.764}
{"mode": "train", "epoch": 3, "iter": 3200, "lr": 0.00243, "memory": 18984, "data_time": 0.01213, "decode.loss_seg": 2.94451, "decode.acc_seg": 5.26571, "aux.loss_seg": 1.17789, "aux.acc_seg": 5.2599, "loss": 4.1224, "time": 0.63705}
{"mode": "train", "epoch": 3, "iter": 3250, "lr": 0.0023, "memory": 18984, "data_time": 0.00712, "decode.loss_seg": 2.94451, "decode.acc_seg": 5.26557, "aux.loss_seg": 1.17788, "aux.acc_seg": 5.25894, "loss": 4.12239, "time": 0.63505}
{"mode": "train", "epoch": 3, "iter": 3300, "lr": 0.00217, "memory": 18984, "data_time": 0.00702, "decode.loss_seg": 2.94451, "decode.acc_seg": 5.27036, "aux.loss_seg": 1.17788, "aux.acc_seg": 5.26098, "loss": 4.12239, "time": 0.63625}
{"mode": "train", "epoch": 3, "iter": 3350, "lr": 0.00203, "memory": 18984, "data_time": 0.0071, "decode.loss_seg": 2.9445, "decode.acc_seg": 5.26741, "aux.loss_seg": 1.17788, "aux.acc_seg": 5.26709, "loss": 4.12238, "time": 0.63745}
{"mode": "train", "epoch": 3, "iter": 3400, "lr": 0.0019, "memory": 18984, "data_time": 0.00706, "decode.loss_seg": 2.9445, "decode.acc_seg": 5.26971, "aux.loss_seg": 1.17788, "aux.acc_seg": 5.26284, "loss": 4.12238, "time": 0.63531}
{"mode": "train", "epoch": 3, "iter": 3450, "lr": 0.00176, "memory": 18984, "data_time": 0.00721, "decode.loss_seg": 2.9445, "decode.acc_seg": 5.26895, "aux.loss_seg": 1.17788, "aux.acc_seg": 5.26616, "loss": 4.12238, "time": 0.63388}
{"mode": "train", "epoch": 3, "iter": 3500, "lr": 0.00163, "memory": 18984, "data_time": 0.00708, "decode.loss_seg": 2.9445, "decode.acc_seg": 5.26686, "aux.loss_seg": 1.17788, "aux.acc_seg": 5.25739, "loss": 4.12238, "time": 0.63266}
{"mode": "train", "epoch": 3, "iter": 3550, "lr": 0.00149, "memory": 18984, "data_time": 0.00707, "decode.loss_seg": 2.9445, "decode.acc_seg": 5.26885, "aux.loss_seg": 1.17788, "aux.acc_seg": 5.26426, "loss": 4.12238, "time": 0.63233}
{"mode": "train", "epoch": 3, "iter": 3600, "lr": 0.00135, "memory": 18984, "data_time": 0.00747, "decode.loss_seg": 2.9445, "decode.acc_seg": 5.26404, "aux.loss_seg": 1.17788, "aux.acc_seg": 5.26544, "loss": 4.12237, "time": 0.63365}
{"mode": "train", "epoch": 3, "iter": 3650, "lr": 0.00121, "memory": 18984, "data_time": 0.00725, "decode.loss_seg": 2.9445, "decode.acc_seg": 5.27041, "aux.loss_seg": 1.17788, "aux.acc_seg": 5.25978, "loss": 4.12237, "time": 0.63231}
{"mode": "train", "epoch": 3, "iter": 3700, "lr": 0.00106, "memory": 18984, "data_time": 0.00698, "decode.loss_seg": 2.9445, "decode.acc_seg": 5.27077, "aux.loss_seg": 1.17788, "aux.acc_seg": 5.26081, "loss": 4.12238, "time": 0.63239}
{"mode": "train", "epoch": 3, "iter": 3750, "lr": 0.00092, "memory": 18984, "data_time": 0.00697, "decode.loss_seg": 2.9445, "decode.acc_seg": 5.26869, "aux.loss_seg": 1.17788, "aux.acc_seg": 5.26489, "loss": 4.12237, "time": 0.63201}
{"mode": "train", "epoch": 3, "iter": 3800, "lr": 0.00077, "memory": 18984, "data_time": 0.02256, "decode.loss_seg": 2.9445, "decode.acc_seg": 5.26949, "aux.loss_seg": 1.17788, "aux.acc_seg": 5.26521, "loss": 4.12237, "time": 0.86644}
{"mode": "train", "epoch": 3, "iter": 3850, "lr": 0.00062, "memory": 18984, "data_time": 0.0293, "decode.loss_seg": 2.9445, "decode.acc_seg": 5.2649, "aux.loss_seg": 1.17788, "aux.acc_seg": 5.26144, "loss": 4.12237, "time": 0.71667}
{"mode": "train", "epoch": 3, "iter": 3900, "lr": 0.00046, "memory": 18984, "data_time": 0.04564, "decode.loss_seg": 2.9445, "decode.acc_seg": 5.27002, "aux.loss_seg": 1.17787, "aux.acc_seg": 5.25872, "loss": 4.12237, "time": 0.84359}
{"mode": "train", "epoch": 3, "iter": 3950, "lr": 0.0003, "memory": 18984, "data_time": 0.03039, "decode.loss_seg": 2.9445, "decode.acc_seg": 5.26413, "aux.loss_seg": 1.17788, "aux.acc_seg": 5.26183, "loss": 4.12237, "time": 0.85714}
{"mode": "train", "epoch": 3, "iter": 500, "lr": 0.00011, "memory": 18984, "aAcc": 0.0526, "mIoU": 0.0155, "mAcc": 0.0527, "IoU.road": 0.0211, "IoU.sidewalk": 0.0438, "IoU.building": 0.0083, "IoU.wall": 0.0075, "IoU.fence": 0.0041, "IoU.pole": 0.0147, "IoU.traffic light": 0.003, "IoU.traffic sign": 0.0043, "IoU.vegetation": 0.0074, "IoU.terrain": 0.0496, "IoU.sky": 0.0229, "IoU.person": 0.0333, "IoU.rider": 0.0289, "IoU.car": 0.007, "IoU.truck": 0.0044, "IoU.bus": 0.0013, "IoU.train": 0.0213, "IoU.motorcycle": 0.0072, "IoU.bicycle": 0.0036, "Acc.road": 0.034, "Acc.sidewalk": 0.2065, "Acc.building": 0.0098, "Acc.wall": 0.0087, "Acc.fence": 0.0044, "Acc.pole": 0.0199, "Acc.traffic light": 0.0032, "Acc.traffic sign": 0.0046, "Acc.vegetation": 0.0085, "Acc.terrain": 0.4579, "Acc.sky": 0.0389, "Acc.person": 0.0835, "Acc.rider": 0.06, "Acc.car": 0.008, "Acc.truck": 0.0048, "Acc.bus": 0.0013, "Acc.train": 0.0344, "Acc.motorcycle": 0.0083, "Acc.bicycle": 0.0039, "data_time": 0.02588, "decode.loss_seg": 2.9445, "decode.acc_seg": 5.26874, "aux.loss_seg": 1.17787, "aux.acc_seg": 5.26347, "loss": 4.12237, "time": 0.71867}
