{"env_info": "sys.platform: linux\nPython: 3.7.10 (default, Feb 26 2021, 18:47:35) [GCC 7.3.0]\nCUDA available: True\nGPU 0: Tesla V100-SXM2-32GB\nCUDA_HOME: /mnt/cache/share/polaris/dep/cuda-10.1-cudnn7.6.5\nNVCC: Cuda compilation tools, release 10.1, V10.1.243\nGCC: gcc (GCC) 5.4.0\nPyTorch: 1.8.0\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) Math Kernel Library Version 2020.0.2 Product Build 20200624 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v1.7.0 (Git Hash 7aed236906b1f7a05c0917e5257a1af05e9ff683)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 10.1\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_37,code=compute_37\n  - CuDNN 7.6.3\n  - Magma 2.5.2\n  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=10.1, CUDNN_VERSION=7.6.3, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.8.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, \n\nTorchVision: 0.9.0\nOpenCV: 4.5.1\nMMCV: 1.3.8\nMMCV Compiler: GCC 7.3\nMMCV CUDA Compiler: 10.1\nMMSegmentation: 0.15.0+4d34581", "seed": null, "exp_name": "fcn_r50-d8_512x1024_4k_cityscapes.py", "mmseg_version": "0.15.0+4d34581", "config": "norm_cfg = dict(type='SyncBN', requires_grad=True)\nmodel = dict(\n    type='EncoderDecoder',\n    pretrained='open-mmlab://resnet50_v1c',\n    backbone=dict(\n        type='ResNetV1c',\n        depth=50,\n        num_stages=4,\n        out_indices=(0, 1, 2, 3),\n        dilations=(1, 1, 2, 4),\n        strides=(1, 2, 1, 1),\n        norm_cfg=dict(type='SyncBN', requires_grad=True),\n        norm_eval=False,\n        style='pytorch',\n        contract_dilation=True,\n        pretrained='open-mmlab://resnet50_v1c'),\n    decode_head=dict(\n        type='FCNHead',\n        in_channels=2048,\n        in_index=3,\n        channels=512,\n        num_convs=2,\n        concat_input=True,\n        dropout_ratio=0.1,\n        num_classes=19,\n        norm_cfg=dict(type='SyncBN', requires_grad=True),\n        align_corners=False,\n        loss_decode=dict(\n            type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0)),\n    auxiliary_head=dict(\n        type='FCNHead',\n        in_channels=1024,\n        in_index=2,\n        channels=256,\n        num_convs=1,\n        concat_input=False,\n        dropout_ratio=0.1,\n        num_classes=19,\n        norm_cfg=dict(type='SyncBN', requires_grad=True),\n        align_corners=False,\n        loss_decode=dict(\n            type='CrossEntropyLoss', use_sigmoid=False, loss_weight=0.4)),\n    train_cfg=dict(),\n    test_cfg=dict(mode='whole'))\ndataset_type = 'CityscapesDataset'\ndata_root = 'data/cityscapes/'\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ncrop_size = (512, 1024)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations'),\n    dict(type='Resize', img_scale=(2048, 1024), ratio_range=(0.5, 2.0)),\n    dict(type='RandomCrop', crop_size=(512, 1024), cat_max_ratio=0.75),\n    dict(type='RandomFlip', prob=0.5),\n    dict(type='PhotoMetricDistortion'),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='Pad', size=(512, 1024), pad_val=0, seg_pad_val=255),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_semantic_seg'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(2048, 1024),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=2,\n    workers_per_gpu=2,\n    train=dict(\n        type='CityscapesDataset',\n        data_root='data/cityscapes/',\n        img_dir='leftImg8bit/train',\n        ann_dir='gtFine/train',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations'),\n            dict(\n                type='Resize', img_scale=(2048, 1024), ratio_range=(0.5, 2.0)),\n            dict(type='RandomCrop', crop_size=(512, 1024), cat_max_ratio=0.75),\n            dict(type='RandomFlip', prob=0.5),\n            dict(type='PhotoMetricDistortion'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size=(512, 1024), pad_val=0, seg_pad_val=255),\n            dict(type='DefaultFormatBundle'),\n            dict(type='Collect', keys=['img', 'gt_semantic_seg'])\n        ]),\n    val=dict(\n        type='CityscapesDataset',\n        data_root='data/cityscapes/',\n        img_dir='leftImg8bit/val',\n        ann_dir='gtFine/val',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(2048, 1024),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]),\n    test=dict(\n        type='CityscapesDataset',\n        data_root='data/cityscapes/',\n        img_dir='leftImg8bit/val',\n        ann_dir='gtFine/val',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(2048, 1024),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]))\nlog_config = dict(\n    interval=50, hooks=[dict(type='TextLoggerHook', by_epoch=False)])\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = None\nresume_from = None\nworkflow = [('train', 1)]\ncudnn_benchmark = True\noptimizer = dict(type='SGD', lr=0.01, momentum=0.9, weight_decay=0.0005)\noptimizer_config = dict()\nlr_config = dict(policy='poly', power=0.9, min_lr=0.0001, by_epoch=False)\nrunner = dict(type='IterBasedRunner', max_iters=4000)\ncheckpoint_config = dict(by_epoch=False, interval=2000)\nevaluation = dict(interval=2000, metric='mIoU')\nwork_dir = 'work_dirs_1node_1gpu/fcn_r50-d8_512x1024_4k_cityscapes'\ngpu_ids = range(0, 1)\nseed = None\n", "CLASSES": ["road", "sidewalk", "building", "wall", "fence", "pole", "traffic light", "traffic sign", "vegetation", "terrain", "sky", "person", "rider", "car", "truck", "bus", "train", "motorcycle", "bicycle"], "PALETTE": [[128, 64, 128], [244, 35, 232], [70, 70, 70], [102, 102, 156], [190, 153, 153], [153, 153, 153], [250, 170, 30], [220, 220, 0], [107, 142, 35], [152, 251, 152], [70, 130, 180], [220, 20, 60], [255, 0, 0], [0, 0, 142], [0, 0, 70], [0, 60, 100], [0, 80, 100], [0, 0, 230], [119, 11, 32]]}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 0.00989, "memory": 18773, "data_time": 0.05909, "decode.loss_seg": 1.72437, "decode.acc_seg": 42.69213, "aux.loss_seg": 0.78166, "aux.acc_seg": 35.63079, "loss": 2.50603, "time": 0.70926}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 0.00978, "memory": 18773, "data_time": 0.00921, "decode.loss_seg": 1.29941, "decode.acc_seg": 58.16195, "aux.loss_seg": 0.54946, "aux.acc_seg": 56.74911, "loss": 1.84887, "time": 0.38919}
{"mode": "train", "epoch": 1, "iter": 150, "lr": 0.00967, "memory": 18773, "data_time": 0.03977, "decode.loss_seg": 1.13107, "decode.acc_seg": 61.08551, "aux.loss_seg": 0.50068, "aux.acc_seg": 58.48576, "loss": 1.63175, "time": 0.43138}
{"mode": "train", "epoch": 1, "iter": 200, "lr": 0.00956, "memory": 18773, "data_time": 0.01468, "decode.loss_seg": 1.17689, "decode.acc_seg": 60.18856, "aux.loss_seg": 0.47789, "aux.acc_seg": 60.16107, "loss": 1.65478, "time": 0.38898}
{"mode": "train", "epoch": 1, "iter": 250, "lr": 0.00944, "memory": 18773, "data_time": 0.01625, "decode.loss_seg": 1.01014, "decode.acc_seg": 67.33598, "aux.loss_seg": 0.43054, "aux.acc_seg": 66.34079, "loss": 1.44068, "time": 0.39787}
{"mode": "train", "epoch": 1, "iter": 300, "lr": 0.00933, "memory": 18773, "data_time": 0.01536, "decode.loss_seg": 1.02169, "decode.acc_seg": 66.39944, "aux.loss_seg": 0.4572, "aux.acc_seg": 63.19786, "loss": 1.47888, "time": 0.4067}
{"mode": "train", "epoch": 1, "iter": 350, "lr": 0.00922, "memory": 18773, "data_time": 0.01183, "decode.loss_seg": 0.90124, "decode.acc_seg": 69.14139, "aux.loss_seg": 0.39771, "aux.acc_seg": 66.33849, "loss": 1.29895, "time": 0.43588}
{"mode": "train", "epoch": 1, "iter": 400, "lr": 0.00911, "memory": 18773, "data_time": 0.019, "decode.loss_seg": 0.82938, "decode.acc_seg": 68.48841, "aux.loss_seg": 0.35774, "aux.acc_seg": 67.09773, "loss": 1.18713, "time": 0.42016}
{"mode": "train", "epoch": 1, "iter": 450, "lr": 0.00899, "memory": 18773, "data_time": 0.01168, "decode.loss_seg": 0.81575, "decode.acc_seg": 71.18224, "aux.loss_seg": 0.35865, "aux.acc_seg": 68.93927, "loss": 1.1744, "time": 0.38682}
{"mode": "train", "epoch": 1, "iter": 500, "lr": 0.00888, "memory": 18773, "data_time": 0.00952, "decode.loss_seg": 0.73847, "decode.acc_seg": 73.88872, "aux.loss_seg": 0.33637, "aux.acc_seg": 71.47553, "loss": 1.07484, "time": 0.41584}
{"mode": "train", "epoch": 1, "iter": 550, "lr": 0.00877, "memory": 18773, "data_time": 0.01315, "decode.loss_seg": 0.77347, "decode.acc_seg": 73.99818, "aux.loss_seg": 0.35486, "aux.acc_seg": 70.98565, "loss": 1.12834, "time": 0.40201}
{"mode": "train", "epoch": 1, "iter": 600, "lr": 0.00866, "memory": 18773, "data_time": 0.00806, "decode.loss_seg": 0.78575, "decode.acc_seg": 71.52204, "aux.loss_seg": 0.36238, "aux.acc_seg": 68.45203, "loss": 1.14813, "time": 0.41746}
{"mode": "train", "epoch": 1, "iter": 650, "lr": 0.00854, "memory": 18773, "data_time": 0.02285, "decode.loss_seg": 0.77895, "decode.acc_seg": 71.63642, "aux.loss_seg": 0.35035, "aux.acc_seg": 70.01107, "loss": 1.12929, "time": 0.42729}
{"mode": "train", "epoch": 1, "iter": 700, "lr": 0.00843, "memory": 18773, "data_time": 0.0109, "decode.loss_seg": 0.68235, "decode.acc_seg": 75.12148, "aux.loss_seg": 0.31768, "aux.acc_seg": 72.27111, "loss": 1.00003, "time": 0.42211}
{"mode": "train", "epoch": 1, "iter": 750, "lr": 0.00831, "memory": 18773, "data_time": 0.0138, "decode.loss_seg": 0.59698, "decode.acc_seg": 76.10531, "aux.loss_seg": 0.2895, "aux.acc_seg": 73.46707, "loss": 0.88648, "time": 0.4018}
{"mode": "train", "epoch": 1, "iter": 800, "lr": 0.0082, "memory": 18773, "data_time": 0.01936, "decode.loss_seg": 0.74533, "decode.acc_seg": 73.78068, "aux.loss_seg": 0.34408, "aux.acc_seg": 70.53152, "loss": 1.0894, "time": 0.42136}
{"mode": "train", "epoch": 1, "iter": 850, "lr": 0.00809, "memory": 18773, "data_time": 0.01778, "decode.loss_seg": 0.66174, "decode.acc_seg": 74.84492, "aux.loss_seg": 0.30677, "aux.acc_seg": 72.28569, "loss": 0.96851, "time": 0.41573}
{"mode": "train", "epoch": 1, "iter": 900, "lr": 0.00797, "memory": 18773, "data_time": 0.07748, "decode.loss_seg": 0.64566, "decode.acc_seg": 76.04239, "aux.loss_seg": 0.31276, "aux.acc_seg": 72.31723, "loss": 0.95842, "time": 0.45503}
{"mode": "train", "epoch": 1, "iter": 950, "lr": 0.00786, "memory": 18773, "data_time": 0.01582, "decode.loss_seg": 0.63256, "decode.acc_seg": 76.91374, "aux.loss_seg": 0.30241, "aux.acc_seg": 73.60372, "loss": 0.93496, "time": 0.40638}
{"mode": "train", "epoch": 1, "iter": 1000, "lr": 0.00774, "memory": 18773, "data_time": 0.00744, "decode.loss_seg": 0.66465, "decode.acc_seg": 74.94045, "aux.loss_seg": 0.30951, "aux.acc_seg": 72.10049, "loss": 0.97416, "time": 0.38437}
{"mode": "train", "epoch": 1, "iter": 1050, "lr": 0.00763, "memory": 18773, "data_time": 0.00953, "decode.loss_seg": 0.61237, "decode.acc_seg": 75.71445, "aux.loss_seg": 0.28583, "aux.acc_seg": 73.51431, "loss": 0.89819, "time": 0.4008}
{"mode": "train", "epoch": 1, "iter": 1100, "lr": 0.00751, "memory": 18773, "data_time": 0.00968, "decode.loss_seg": 0.62162, "decode.acc_seg": 76.37312, "aux.loss_seg": 0.3014, "aux.acc_seg": 73.00413, "loss": 0.92302, "time": 0.39978}
{"mode": "train", "epoch": 1, "iter": 1150, "lr": 0.0074, "memory": 18773, "data_time": 0.00972, "decode.loss_seg": 0.59879, "decode.acc_seg": 78.23213, "aux.loss_seg": 0.28668, "aux.acc_seg": 75.55249, "loss": 0.88548, "time": 0.42507}
{"mode": "train", "epoch": 1, "iter": 1200, "lr": 0.00728, "memory": 18773, "data_time": 0.01052, "decode.loss_seg": 0.64251, "decode.acc_seg": 75.18215, "aux.loss_seg": 0.29942, "aux.acc_seg": 72.50048, "loss": 0.94193, "time": 0.42875}
{"mode": "train", "epoch": 1, "iter": 1250, "lr": 0.00717, "memory": 18773, "data_time": 0.0111, "decode.loss_seg": 0.55711, "decode.acc_seg": 80.01023, "aux.loss_seg": 0.26945, "aux.acc_seg": 77.10745, "loss": 0.82656, "time": 0.40494}
{"mode": "train", "epoch": 1, "iter": 1300, "lr": 0.00705, "memory": 18773, "data_time": 0.01145, "decode.loss_seg": 0.5155, "decode.acc_seg": 78.23924, "aux.loss_seg": 0.25403, "aux.acc_seg": 75.48588, "loss": 0.76953, "time": 0.39212}
{"mode": "train", "epoch": 1, "iter": 1350, "lr": 0.00694, "memory": 18773, "data_time": 0.026, "decode.loss_seg": 0.50616, "decode.acc_seg": 78.35879, "aux.loss_seg": 0.24909, "aux.acc_seg": 75.58187, "loss": 0.75525, "time": 0.42338}
{"mode": "train", "epoch": 1, "iter": 1400, "lr": 0.00682, "memory": 18773, "data_time": 0.02904, "decode.loss_seg": 0.50429, "decode.acc_seg": 79.37171, "aux.loss_seg": 0.26258, "aux.acc_seg": 75.47654, "loss": 0.76687, "time": 0.42715}
{"mode": "train", "epoch": 1, "iter": 1450, "lr": 0.0067, "memory": 18773, "data_time": 0.0232, "decode.loss_seg": 0.39246, "decode.acc_seg": 82.5157, "aux.loss_seg": 0.20543, "aux.acc_seg": 79.83818, "loss": 0.59788, "time": 0.42316}
{"mode": "train", "epoch": 2, "iter": 1500, "lr": 0.00659, "memory": 18773, "data_time": 0.02244, "decode.loss_seg": 0.59933, "decode.acc_seg": 76.29007, "aux.loss_seg": 0.29572, "aux.acc_seg": 73.39997, "loss": 0.89506, "time": 0.43469}
{"mode": "train", "epoch": 2, "iter": 1550, "lr": 0.00647, "memory": 18773, "data_time": 0.01074, "decode.loss_seg": 0.48272, "decode.acc_seg": 78.18211, "aux.loss_seg": 0.24077, "aux.acc_seg": 75.81409, "loss": 0.7235, "time": 0.42852}
{"mode": "train", "epoch": 2, "iter": 1600, "lr": 0.00635, "memory": 18773, "data_time": 0.01459, "decode.loss_seg": 0.50178, "decode.acc_seg": 80.68492, "aux.loss_seg": 0.23731, "aux.acc_seg": 78.84976, "loss": 0.73909, "time": 0.42589}
{"mode": "train", "epoch": 2, "iter": 1650, "lr": 0.00624, "memory": 18773, "data_time": 0.00829, "decode.loss_seg": 0.53336, "decode.acc_seg": 79.00626, "aux.loss_seg": 0.25764, "aux.acc_seg": 76.23458, "loss": 0.791, "time": 0.39146}
{"mode": "train", "epoch": 2, "iter": 1700, "lr": 0.00612, "memory": 18773, "data_time": 0.02082, "decode.loss_seg": 0.49204, "decode.acc_seg": 80.45325, "aux.loss_seg": 0.2509, "aux.acc_seg": 77.16569, "loss": 0.74293, "time": 0.41639}
{"mode": "train", "epoch": 2, "iter": 1750, "lr": 0.006, "memory": 18773, "data_time": 0.01038, "decode.loss_seg": 0.53826, "decode.acc_seg": 79.66455, "aux.loss_seg": 0.26458, "aux.acc_seg": 76.91982, "loss": 0.80284, "time": 0.42301}
{"mode": "train", "epoch": 2, "iter": 1800, "lr": 0.00588, "memory": 18773, "data_time": 0.017, "decode.loss_seg": 0.42184, "decode.acc_seg": 80.77753, "aux.loss_seg": 0.20405, "aux.acc_seg": 78.86007, "loss": 0.62589, "time": 0.40481}
{"mode": "train", "epoch": 2, "iter": 1850, "lr": 0.00576, "memory": 18773, "data_time": 0.01292, "decode.loss_seg": 0.56974, "decode.acc_seg": 78.04259, "aux.loss_seg": 0.27134, "aux.acc_seg": 75.14651, "loss": 0.84108, "time": 0.39741}
{"mode": "train", "epoch": 2, "iter": 1900, "lr": 0.00565, "memory": 18773, "data_time": 0.00797, "decode.loss_seg": 0.40952, "decode.acc_seg": 80.29325, "aux.loss_seg": 0.20554, "aux.acc_seg": 78.28678, "loss": 0.61506, "time": 0.40445}
{"mode": "train", "epoch": 2, "iter": 1950, "lr": 0.00553, "memory": 18773, "data_time": 0.02071, "decode.loss_seg": 0.47267, "decode.acc_seg": 80.1731, "aux.loss_seg": 0.23622, "aux.acc_seg": 77.11186, "loss": 0.70888, "time": 0.41872}
{"mode": "train", "epoch": 2, "iter": 500, "lr": 0.00541, "memory": 18773, "aAcc": 0.8726, "mIoU": 0.441, "mAcc": 0.529, "IoU.road": 0.8781, "IoU.sidewalk": 0.6003, "IoU.building": 0.7911, "IoU.wall": 0.0691, "IoU.fence": 0.2186, "IoU.pole": 0.3997, "IoU.traffic light": 0.4342, "IoU.traffic sign": 0.5804, "IoU.vegetation": 0.8661, "IoU.terrain": 0.3658, "IoU.sky": 0.4993, "IoU.person": 0.6606, "IoU.rider": 0.2532, "IoU.car": 0.7842, "IoU.truck": 0.0189, "IoU.bus": 0.2342, "IoU.train": 0.0, "IoU.motorcycle": 0.1013, "IoU.bicycle": 0.6242, "Acc.road": 0.9063, "Acc.sidewalk": 0.7122, "Acc.building": 0.9232, "Acc.wall": 0.0712, "Acc.fence": 0.2535, "Acc.pole": 0.4582, "Acc.traffic light": 0.5037, "Acc.traffic sign": 0.6414, "Acc.vegetation": 0.9487, "Acc.terrain": 0.4244, "Acc.sky": 0.9684, "Acc.person": 0.8555, "Acc.rider": 0.3095, "Acc.car": 0.8736, "Acc.truck": 0.0194, "Acc.bus": 0.273, "Acc.train": 0.0, "Acc.motorcycle": 0.1065, "Acc.bicycle": 0.803, "data_time": 0.02509, "decode.loss_seg": 0.4798, "decode.acc_seg": 80.40724, "aux.loss_seg": 0.24072, "aux.acc_seg": 77.22574, "loss": 0.72052, "time": 0.4378}
{"mode": "train", "epoch": 2, "iter": 2050, "lr": 0.00529, "memory": 18773, "data_time": 6.95696, "decode.loss_seg": 0.48325, "decode.acc_seg": 81.19242, "aux.loss_seg": 0.24016, "aux.acc_seg": 78.55618, "loss": 0.7234, "time": 7.38032}
{"mode": "train", "epoch": 2, "iter": 2100, "lr": 0.00517, "memory": 18773, "data_time": 0.03266, "decode.loss_seg": 0.45565, "decode.acc_seg": 81.04904, "aux.loss_seg": 0.22808, "aux.acc_seg": 78.25029, "loss": 0.68374, "time": 0.41662}
{"mode": "train", "epoch": 2, "iter": 2150, "lr": 0.00505, "memory": 18773, "data_time": 0.00871, "decode.loss_seg": 0.45113, "decode.acc_seg": 81.07807, "aux.loss_seg": 0.22494, "aux.acc_seg": 78.48875, "loss": 0.67607, "time": 0.42535}
{"mode": "train", "epoch": 2, "iter": 2200, "lr": 0.00493, "memory": 18773, "data_time": 0.01772, "decode.loss_seg": 0.49234, "decode.acc_seg": 79.59302, "aux.loss_seg": 0.24363, "aux.acc_seg": 76.57742, "loss": 0.73596, "time": 0.4195}
{"mode": "train", "epoch": 2, "iter": 2250, "lr": 0.00481, "memory": 18773, "data_time": 0.00871, "decode.loss_seg": 0.56659, "decode.acc_seg": 78.28083, "aux.loss_seg": 0.2778, "aux.acc_seg": 75.49465, "loss": 0.84438, "time": 0.38551}
{"mode": "train", "epoch": 2, "iter": 2300, "lr": 0.00469, "memory": 18773, "data_time": 0.01968, "decode.loss_seg": 0.47841, "decode.acc_seg": 79.56439, "aux.loss_seg": 0.22928, "aux.acc_seg": 77.34753, "loss": 0.70769, "time": 0.42679}
{"mode": "train", "epoch": 2, "iter": 2350, "lr": 0.00456, "memory": 18773, "data_time": 0.02484, "decode.loss_seg": 0.37964, "decode.acc_seg": 82.63643, "aux.loss_seg": 0.19573, "aux.acc_seg": 79.95993, "loss": 0.57537, "time": 0.41528}
{"mode": "train", "epoch": 2, "iter": 2400, "lr": 0.00444, "memory": 18773, "data_time": 0.01348, "decode.loss_seg": 0.44037, "decode.acc_seg": 82.54233, "aux.loss_seg": 0.21832, "aux.acc_seg": 80.03308, "loss": 0.65869, "time": 0.39682}
{"mode": "train", "epoch": 2, "iter": 2450, "lr": 0.00432, "memory": 18773, "data_time": 0.00824, "decode.loss_seg": 0.43093, "decode.acc_seg": 80.81488, "aux.loss_seg": 0.22036, "aux.acc_seg": 78.14967, "loss": 0.65128, "time": 0.41114}
{"mode": "train", "epoch": 2, "iter": 2500, "lr": 0.0042, "memory": 18773, "data_time": 0.01426, "decode.loss_seg": 0.43428, "decode.acc_seg": 82.15967, "aux.loss_seg": 0.22359, "aux.acc_seg": 79.32411, "loss": 0.65787, "time": 0.39846}
{"mode": "train", "epoch": 2, "iter": 2550, "lr": 0.00407, "memory": 18773, "data_time": 0.02208, "decode.loss_seg": 0.45301, "decode.acc_seg": 81.82606, "aux.loss_seg": 0.22472, "aux.acc_seg": 79.69776, "loss": 0.67773, "time": 0.44956}
{"mode": "train", "epoch": 2, "iter": 2600, "lr": 0.00395, "memory": 18773, "data_time": 0.02274, "decode.loss_seg": 0.42935, "decode.acc_seg": 81.38608, "aux.loss_seg": 0.21719, "aux.acc_seg": 78.64111, "loss": 0.64655, "time": 0.42327}
{"mode": "train", "epoch": 2, "iter": 2650, "lr": 0.00383, "memory": 18773, "data_time": 0.00902, "decode.loss_seg": 0.4137, "decode.acc_seg": 82.86306, "aux.loss_seg": 0.21836, "aux.acc_seg": 79.81893, "loss": 0.63206, "time": 0.40252}
{"mode": "train", "epoch": 2, "iter": 2700, "lr": 0.0037, "memory": 18773, "data_time": 0.01342, "decode.loss_seg": 0.40668, "decode.acc_seg": 81.9614, "aux.loss_seg": 0.20551, "aux.acc_seg": 79.60716, "loss": 0.61219, "time": 0.40217}
{"mode": "train", "epoch": 2, "iter": 2750, "lr": 0.00358, "memory": 18773, "data_time": 0.00908, "decode.loss_seg": 0.4015, "decode.acc_seg": 80.95969, "aux.loss_seg": 0.20562, "aux.acc_seg": 78.25038, "loss": 0.60712, "time": 0.39581}
{"mode": "train", "epoch": 2, "iter": 2800, "lr": 0.00345, "memory": 18773, "data_time": 0.00872, "decode.loss_seg": 0.43608, "decode.acc_seg": 81.03559, "aux.loss_seg": 0.20913, "aux.acc_seg": 78.88487, "loss": 0.64521, "time": 0.40619}
{"mode": "train", "epoch": 2, "iter": 2850, "lr": 0.00333, "memory": 18773, "data_time": 0.01443, "decode.loss_seg": 0.41984, "decode.acc_seg": 82.40902, "aux.loss_seg": 0.21312, "aux.acc_seg": 79.36233, "loss": 0.63297, "time": 0.40143}
{"mode": "train", "epoch": 2, "iter": 2900, "lr": 0.0032, "memory": 18773, "data_time": 0.00941, "decode.loss_seg": 0.43521, "decode.acc_seg": 80.01066, "aux.loss_seg": 0.21452, "aux.acc_seg": 78.0331, "loss": 0.64973, "time": 0.40437}
{"mode": "train", "epoch": 2, "iter": 2950, "lr": 0.00307, "memory": 18773, "data_time": 0.07112, "decode.loss_seg": 0.36593, "decode.acc_seg": 83.53615, "aux.loss_seg": 0.19811, "aux.acc_seg": 80.54221, "loss": 0.56404, "time": 0.47945}
{"mode": "train", "epoch": 3, "iter": 3000, "lr": 0.00295, "memory": 18773, "data_time": 0.01679, "decode.loss_seg": 0.35669, "decode.acc_seg": 82.19332, "aux.loss_seg": 0.19279, "aux.acc_seg": 79.22352, "loss": 0.54947, "time": 0.39281}
{"mode": "train", "epoch": 3, "iter": 3050, "lr": 0.00282, "memory": 18773, "data_time": 0.02469, "decode.loss_seg": 0.44206, "decode.acc_seg": 81.54575, "aux.loss_seg": 0.22086, "aux.acc_seg": 78.9188, "loss": 0.66292, "time": 0.42675}
{"mode": "train", "epoch": 3, "iter": 3100, "lr": 0.00269, "memory": 18773, "data_time": 0.0077, "decode.loss_seg": 0.3883, "decode.acc_seg": 82.44695, "aux.loss_seg": 0.20223, "aux.acc_seg": 79.5524, "loss": 0.59053, "time": 0.41981}
{"mode": "train", "epoch": 3, "iter": 3150, "lr": 0.00256, "memory": 18773, "data_time": 0.00941, "decode.loss_seg": 0.35807, "decode.acc_seg": 84.24256, "aux.loss_seg": 0.1914, "aux.acc_seg": 81.14268, "loss": 0.54947, "time": 0.39158}
{"mode": "train", "epoch": 3, "iter": 3200, "lr": 0.00243, "memory": 18773, "data_time": 0.0088, "decode.loss_seg": 0.2858, "decode.acc_seg": 82.10686, "aux.loss_seg": 0.15079, "aux.acc_seg": 80.16458, "loss": 0.43659, "time": 0.38986}
{"mode": "train", "epoch": 3, "iter": 3250, "lr": 0.0023, "memory": 18773, "data_time": 0.01094, "decode.loss_seg": 0.37716, "decode.acc_seg": 83.79399, "aux.loss_seg": 0.19479, "aux.acc_seg": 81.14879, "loss": 0.57195, "time": 0.38968}
{"mode": "train", "epoch": 3, "iter": 3300, "lr": 0.00217, "memory": 18773, "data_time": 0.00936, "decode.loss_seg": 0.39891, "decode.acc_seg": 83.38955, "aux.loss_seg": 0.20293, "aux.acc_seg": 80.90857, "loss": 0.60184, "time": 0.39891}
{"mode": "train", "epoch": 3, "iter": 3350, "lr": 0.00203, "memory": 18773, "data_time": 0.00974, "decode.loss_seg": 0.42111, "decode.acc_seg": 81.4602, "aux.loss_seg": 0.21576, "aux.acc_seg": 78.40747, "loss": 0.63687, "time": 0.39509}
{"mode": "train", "epoch": 3, "iter": 3400, "lr": 0.0019, "memory": 18773, "data_time": 0.0083, "decode.loss_seg": 0.3977, "decode.acc_seg": 82.06821, "aux.loss_seg": 0.20452, "aux.acc_seg": 79.59702, "loss": 0.60222, "time": 0.39638}
{"mode": "train", "epoch": 3, "iter": 3450, "lr": 0.00176, "memory": 18773, "data_time": 0.01863, "decode.loss_seg": 0.34351, "decode.acc_seg": 84.00299, "aux.loss_seg": 0.18367, "aux.acc_seg": 81.39107, "loss": 0.52719, "time": 0.42021}
{"mode": "train", "epoch": 3, "iter": 3500, "lr": 0.00163, "memory": 18773, "data_time": 0.01294, "decode.loss_seg": 0.34821, "decode.acc_seg": 83.80303, "aux.loss_seg": 0.18873, "aux.acc_seg": 81.05161, "loss": 0.53693, "time": 0.39925}
{"mode": "train", "epoch": 3, "iter": 3550, "lr": 0.00149, "memory": 18773, "data_time": 0.01137, "decode.loss_seg": 0.31459, "decode.acc_seg": 83.60279, "aux.loss_seg": 0.16803, "aux.acc_seg": 81.11221, "loss": 0.48262, "time": 0.43343}
{"mode": "train", "epoch": 3, "iter": 3600, "lr": 0.00135, "memory": 18773, "data_time": 0.01121, "decode.loss_seg": 0.33681, "decode.acc_seg": 84.88161, "aux.loss_seg": 0.18973, "aux.acc_seg": 81.74964, "loss": 0.52654, "time": 0.41117}
{"mode": "train", "epoch": 3, "iter": 3650, "lr": 0.00121, "memory": 18773, "data_time": 0.00955, "decode.loss_seg": 0.35012, "decode.acc_seg": 83.12204, "aux.loss_seg": 0.18639, "aux.acc_seg": 80.71886, "loss": 0.53651, "time": 0.39173}
{"mode": "train", "epoch": 3, "iter": 3700, "lr": 0.00106, "memory": 18773, "data_time": 0.02142, "decode.loss_seg": 0.32957, "decode.acc_seg": 83.41504, "aux.loss_seg": 0.17742, "aux.acc_seg": 81.06155, "loss": 0.50699, "time": 0.42064}
{"mode": "train", "epoch": 3, "iter": 3750, "lr": 0.00092, "memory": 18773, "data_time": 0.00904, "decode.loss_seg": 0.32868, "decode.acc_seg": 82.56534, "aux.loss_seg": 0.16727, "aux.acc_seg": 80.56035, "loss": 0.49595, "time": 0.38456}
{"mode": "train", "epoch": 3, "iter": 3800, "lr": 0.00077, "memory": 18773, "data_time": 0.00984, "decode.loss_seg": 0.32133, "decode.acc_seg": 83.78427, "aux.loss_seg": 0.16953, "aux.acc_seg": 81.57168, "loss": 0.49086, "time": 0.38604}
{"mode": "train", "epoch": 3, "iter": 3850, "lr": 0.00062, "memory": 18773, "data_time": 0.00806, "decode.loss_seg": 0.36197, "decode.acc_seg": 85.41343, "aux.loss_seg": 0.19162, "aux.acc_seg": 82.44818, "loss": 0.55359, "time": 0.39531}
{"mode": "train", "epoch": 3, "iter": 3900, "lr": 0.00046, "memory": 18773, "data_time": 0.00833, "decode.loss_seg": 0.42065, "decode.acc_seg": 81.59753, "aux.loss_seg": 0.21304, "aux.acc_seg": 79.14348, "loss": 0.63369, "time": 0.40215}
{"mode": "train", "epoch": 3, "iter": 3950, "lr": 0.0003, "memory": 18773, "data_time": 0.01471, "decode.loss_seg": 0.34516, "decode.acc_seg": 82.16634, "aux.loss_seg": 0.18257, "aux.acc_seg": 79.85334, "loss": 0.52773, "time": 0.39947}
{"mode": "train", "epoch": 3, "iter": 500, "lr": 0.00011, "memory": 18773, "aAcc": 0.9245, "mIoU": 0.5538, "mAcc": 0.6473, "IoU.road": 0.9506, "IoU.sidewalk": 0.7039, "IoU.building": 0.8698, "IoU.wall": 0.2068, "IoU.fence": 0.3526, "IoU.pole": 0.4994, "IoU.traffic light": 0.5528, "IoU.traffic sign": 0.657, "IoU.vegetation": 0.8943, "IoU.terrain": 0.4819, "IoU.sky": 0.8729, "IoU.person": 0.6901, "IoU.rider": 0.3596, "IoU.car": 0.8813, "IoU.truck": 0.1057, "IoU.bus": 0.4168, "IoU.train": 0.0146, "IoU.motorcycle": 0.3271, "IoU.bicycle": 0.6845, "Acc.road": 0.9653, "Acc.sidewalk": 0.8903, "Acc.building": 0.9409, "Acc.wall": 0.2312, "Acc.fence": 0.4313, "Acc.pole": 0.6, "Acc.traffic light": 0.6898, "Acc.traffic sign": 0.7638, "Acc.vegetation": 0.9572, "Acc.terrain": 0.5807, "Acc.sky": 0.9569, "Acc.person": 0.799, "Acc.rider": 0.5519, "Acc.car": 0.9648, "Acc.truck": 0.1171, "Acc.bus": 0.5956, "Acc.train": 0.0147, "Acc.motorcycle": 0.4089, "Acc.bicycle": 0.84, "data_time": 0.01137, "decode.loss_seg": 0.34979, "decode.acc_seg": 83.13222, "aux.loss_seg": 0.18707, "aux.acc_seg": 80.41877, "loss": 0.53687, "time": 0.41665}
