{"env_info": "sys.platform: linux\nPython: 3.7.10 (default, Feb 26 2021, 18:47:35) [GCC 7.3.0]\nCUDA available: True\nGPU 0: Tesla V100-SXM2-32GB\nCUDA_HOME: /mnt/cache/share/polaris/dep/cuda-10.1-cudnn7.6.5\nNVCC: Cuda compilation tools, release 10.1, V10.1.243\nGCC: gcc (GCC) 5.4.0\nPyTorch: 1.8.0\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) Math Kernel Library Version 2020.0.2 Product Build 20200624 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v1.7.0 (Git Hash 7aed236906b1f7a05c0917e5257a1af05e9ff683)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 10.1\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_37,code=compute_37\n  - CuDNN 7.6.3\n  - Magma 2.5.2\n  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=10.1, CUDNN_VERSION=7.6.3, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.8.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, \n\nTorchVision: 0.9.0\nOpenCV: 4.5.1\nMMCV: 1.3.8\nMMCV Compiler: GCC 7.3\nMMCV CUDA Compiler: 10.1\nMMSegmentation: 0.15.0+4d34581", "seed": null, "exp_name": "deeplabv3plus_r50-d8_512x1024_4k_cityscapes.py", "mmseg_version": "0.15.0+4d34581", "config": "norm_cfg = dict(type='SyncBN', requires_grad=True)\nmodel = dict(\n    type='EncoderDecoder',\n    pretrained='open-mmlab://resnet50_v1c',\n    backbone=dict(\n        type='ResNetV1c',\n        depth=50,\n        num_stages=4,\n        out_indices=(0, 1, 2, 3),\n        dilations=(1, 1, 2, 4),\n        strides=(1, 2, 1, 1),\n        norm_cfg=dict(type='SyncBN', requires_grad=True),\n        norm_eval=False,\n        style='pytorch',\n        contract_dilation=True,\n        pretrained='open-mmlab://resnet50_v1c'),\n    decode_head=dict(\n        type='DepthwiseSeparableASPPHead',\n        in_channels=2048,\n        in_index=3,\n        channels=512,\n        dilations=(1, 12, 24, 36),\n        c1_in_channels=256,\n        c1_channels=48,\n        dropout_ratio=0.1,\n        num_classes=19,\n        norm_cfg=dict(type='SyncBN', requires_grad=True),\n        align_corners=False,\n        loss_decode=dict(\n            type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0)),\n    auxiliary_head=dict(\n        type='FCNHead',\n        in_channels=1024,\n        in_index=2,\n        channels=256,\n        num_convs=1,\n        concat_input=False,\n        dropout_ratio=0.1,\n        num_classes=19,\n        norm_cfg=dict(type='SyncBN', requires_grad=True),\n        align_corners=False,\n        loss_decode=dict(\n            type='CrossEntropyLoss', use_sigmoid=False, loss_weight=0.4)),\n    train_cfg=dict(),\n    test_cfg=dict(mode='whole'))\ndataset_type = 'CityscapesDataset'\ndata_root = 'data/cityscapes/'\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ncrop_size = (512, 1024)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations'),\n    dict(type='Resize', img_scale=(2048, 1024), ratio_range=(0.5, 2.0)),\n    dict(type='RandomCrop', crop_size=(512, 1024), cat_max_ratio=0.75),\n    dict(type='RandomFlip', prob=0.5),\n    dict(type='PhotoMetricDistortion'),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='Pad', size=(512, 1024), pad_val=0, seg_pad_val=255),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_semantic_seg'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(2048, 1024),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=2,\n    workers_per_gpu=2,\n    train=dict(\n        type='CityscapesDataset',\n        data_root='data/cityscapes/',\n        img_dir='leftImg8bit/train',\n        ann_dir='gtFine/train',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations'),\n            dict(\n                type='Resize', img_scale=(2048, 1024), ratio_range=(0.5, 2.0)),\n            dict(type='RandomCrop', crop_size=(512, 1024), cat_max_ratio=0.75),\n            dict(type='RandomFlip', prob=0.5),\n            dict(type='PhotoMetricDistortion'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size=(512, 1024), pad_val=0, seg_pad_val=255),\n            dict(type='DefaultFormatBundle'),\n            dict(type='Collect', keys=['img', 'gt_semantic_seg'])\n        ]),\n    val=dict(\n        type='CityscapesDataset',\n        data_root='data/cityscapes/',\n        img_dir='leftImg8bit/val',\n        ann_dir='gtFine/val',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(2048, 1024),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]),\n    test=dict(\n        type='CityscapesDataset',\n        data_root='data/cityscapes/',\n        img_dir='leftImg8bit/val',\n        ann_dir='gtFine/val',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(2048, 1024),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]))\nlog_config = dict(\n    interval=50, hooks=[dict(type='TextLoggerHook', by_epoch=False)])\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = None\nresume_from = None\nworkflow = [('train', 1)]\ncudnn_benchmark = True\noptimizer = dict(type='SGD', lr=0.01, momentum=0.9, weight_decay=0.0005)\noptimizer_config = dict()\nlr_config = dict(policy='poly', power=0.9, min_lr=0.0001, by_epoch=False)\nrunner = dict(type='IterBasedRunner', max_iters=4000)\ncheckpoint_config = dict(by_epoch=False, interval=2000)\nevaluation = dict(interval=2000, metric='mIoU')\nwork_dir = 'work_dirs_1node_1gpu/deeplabv3plus_r50-d8_512x1024_4k_cityscapes'\ngpu_ids = range(0, 1)\nseed = None\n", "CLASSES": ["road", "sidewalk", "building", "wall", "fence", "pole", "traffic light", "traffic sign", "vegetation", "terrain", "sky", "person", "rider", "car", "truck", "bus", "train", "motorcycle", "bicycle"], "PALETTE": [[128, 64, 128], [244, 35, 232], [70, 70, 70], [102, 102, 156], [190, 153, 153], [153, 153, 153], [250, 170, 30], [220, 220, 0], [107, 142, 35], [152, 251, 152], [70, 130, 180], [220, 20, 60], [255, 0, 0], [0, 0, 142], [0, 0, 70], [0, 60, 100], [0, 80, 100], [0, 0, 230], [119, 11, 32]]}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 0.00989, "memory": 18769, "data_time": 0.02274, "decode.loss_seg": 1.94468, "decode.acc_seg": 34.32901, "aux.loss_seg": 0.84768, "aux.acc_seg": 26.70726, "loss": 2.79236, "time": 0.63565}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 0.00978, "memory": 18769, "data_time": 0.02433, "decode.loss_seg": 1.69558, "decode.acc_seg": 42.32685, "aux.loss_seg": 0.67414, "aux.acc_seg": 42.24157, "loss": 2.36972, "time": 0.51675}
{"mode": "train", "epoch": 1, "iter": 150, "lr": 0.00967, "memory": 18769, "data_time": 0.02157, "decode.loss_seg": 1.53468, "decode.acc_seg": 47.47893, "aux.loss_seg": 0.62431, "aux.acc_seg": 47.06368, "loss": 2.15899, "time": 0.50588}
{"mode": "train", "epoch": 1, "iter": 200, "lr": 0.00956, "memory": 18769, "data_time": 0.01992, "decode.loss_seg": 1.54017, "decode.acc_seg": 48.36567, "aux.loss_seg": 0.63703, "aux.acc_seg": 44.75125, "loss": 2.1772, "time": 0.49963}
{"mode": "train", "epoch": 1, "iter": 250, "lr": 0.00944, "memory": 18769, "data_time": 0.0129, "decode.loss_seg": 1.56619, "decode.acc_seg": 49.07398, "aux.loss_seg": 0.66244, "aux.acc_seg": 44.64744, "loss": 2.22862, "time": 0.50119}
{"mode": "train", "epoch": 1, "iter": 300, "lr": 0.00933, "memory": 18769, "data_time": 0.03097, "decode.loss_seg": 1.42666, "decode.acc_seg": 52.23436, "aux.loss_seg": 0.59669, "aux.acc_seg": 49.99983, "loss": 2.02335, "time": 0.51881}
{"mode": "train", "epoch": 1, "iter": 350, "lr": 0.00922, "memory": 18769, "data_time": 0.016, "decode.loss_seg": 1.44132, "decode.acc_seg": 49.98122, "aux.loss_seg": 0.62287, "aux.acc_seg": 47.00892, "loss": 2.06419, "time": 0.51087}
{"mode": "train", "epoch": 1, "iter": 400, "lr": 0.00911, "memory": 18769, "data_time": 0.01615, "decode.loss_seg": 1.55159, "decode.acc_seg": 45.51791, "aux.loss_seg": 0.63936, "aux.acc_seg": 43.91966, "loss": 2.19095, "time": 0.4994}
{"mode": "train", "epoch": 1, "iter": 450, "lr": 0.00899, "memory": 18769, "data_time": 0.01308, "decode.loss_seg": 1.62966, "decode.acc_seg": 45.01125, "aux.loss_seg": 0.66971, "aux.acc_seg": 42.33661, "loss": 2.29937, "time": 0.51121}
{"mode": "train", "epoch": 1, "iter": 500, "lr": 0.00888, "memory": 18769, "data_time": 0.01548, "decode.loss_seg": 1.51592, "decode.acc_seg": 47.28077, "aux.loss_seg": 0.63784, "aux.acc_seg": 43.90058, "loss": 2.15376, "time": 0.48651}
{"mode": "train", "epoch": 1, "iter": 550, "lr": 0.00877, "memory": 18769, "data_time": 0.01925, "decode.loss_seg": 1.48482, "decode.acc_seg": 47.76275, "aux.loss_seg": 0.60599, "aux.acc_seg": 45.38584, "loss": 2.09081, "time": 0.55182}
{"mode": "train", "epoch": 1, "iter": 600, "lr": 0.00866, "memory": 18769, "data_time": 0.01139, "decode.loss_seg": 1.45325, "decode.acc_seg": 49.416, "aux.loss_seg": 0.61548, "aux.acc_seg": 45.67773, "loss": 2.06873, "time": 0.50784}
{"mode": "train", "epoch": 1, "iter": 650, "lr": 0.00854, "memory": 18769, "data_time": 0.01121, "decode.loss_seg": 1.42434, "decode.acc_seg": 50.45877, "aux.loss_seg": 0.61894, "aux.acc_seg": 45.11767, "loss": 2.04328, "time": 0.51401}
{"mode": "train", "epoch": 1, "iter": 700, "lr": 0.00843, "memory": 18769, "data_time": 0.01567, "decode.loss_seg": 1.31126, "decode.acc_seg": 53.65552, "aux.loss_seg": 0.58495, "aux.acc_seg": 48.31426, "loss": 1.89621, "time": 0.49888}
{"mode": "train", "epoch": 1, "iter": 750, "lr": 0.00831, "memory": 18769, "data_time": 0.01986, "decode.loss_seg": 1.37548, "decode.acc_seg": 49.07651, "aux.loss_seg": 0.56497, "aux.acc_seg": 48.86011, "loss": 1.94044, "time": 0.49302}
{"mode": "train", "epoch": 1, "iter": 800, "lr": 0.0082, "memory": 18769, "data_time": 0.02488, "decode.loss_seg": 1.29514, "decode.acc_seg": 56.18137, "aux.loss_seg": 0.56429, "aux.acc_seg": 53.02172, "loss": 1.85942, "time": 0.53467}
{"mode": "train", "epoch": 1, "iter": 850, "lr": 0.00809, "memory": 18769, "data_time": 0.01161, "decode.loss_seg": 1.33455, "decode.acc_seg": 53.51301, "aux.loss_seg": 0.56945, "aux.acc_seg": 51.51889, "loss": 1.904, "time": 0.50565}
{"mode": "train", "epoch": 1, "iter": 900, "lr": 0.00797, "memory": 18769, "data_time": 0.01353, "decode.loss_seg": 1.43082, "decode.acc_seg": 50.03285, "aux.loss_seg": 0.61151, "aux.acc_seg": 47.87, "loss": 2.04233, "time": 0.51454}
{"mode": "train", "epoch": 1, "iter": 950, "lr": 0.00786, "memory": 18769, "data_time": 0.01267, "decode.loss_seg": 1.26984, "decode.acc_seg": 55.1533, "aux.loss_seg": 0.55384, "aux.acc_seg": 51.8225, "loss": 1.82368, "time": 0.52872}
{"mode": "train", "epoch": 1, "iter": 1000, "lr": 0.00774, "memory": 18769, "data_time": 0.01911, "decode.loss_seg": 1.27093, "decode.acc_seg": 56.26886, "aux.loss_seg": 0.55461, "aux.acc_seg": 52.8948, "loss": 1.82554, "time": 0.51299}
{"mode": "train", "epoch": 1, "iter": 1050, "lr": 0.00763, "memory": 18769, "data_time": 0.01465, "decode.loss_seg": 1.27432, "decode.acc_seg": 55.0357, "aux.loss_seg": 0.55492, "aux.acc_seg": 50.87514, "loss": 1.82925, "time": 0.52022}
{"mode": "train", "epoch": 1, "iter": 1100, "lr": 0.00751, "memory": 18769, "data_time": 0.00791, "decode.loss_seg": 1.39858, "decode.acc_seg": 50.17564, "aux.loss_seg": 0.61876, "aux.acc_seg": 45.67802, "loss": 2.01734, "time": 0.52374}
{"mode": "train", "epoch": 1, "iter": 1150, "lr": 0.0074, "memory": 18769, "data_time": 0.01846, "decode.loss_seg": 1.3139, "decode.acc_seg": 53.9009, "aux.loss_seg": 0.57676, "aux.acc_seg": 49.1998, "loss": 1.89065, "time": 0.51932}
{"mode": "train", "epoch": 1, "iter": 1200, "lr": 0.00728, "memory": 18769, "data_time": 0.02036, "decode.loss_seg": 1.39222, "decode.acc_seg": 51.07766, "aux.loss_seg": 0.63229, "aux.acc_seg": 44.18351, "loss": 2.02451, "time": 0.49998}
{"mode": "train", "epoch": 1, "iter": 1250, "lr": 0.00717, "memory": 18769, "data_time": 0.01637, "decode.loss_seg": 1.38238, "decode.acc_seg": 50.33323, "aux.loss_seg": 0.59758, "aux.acc_seg": 46.18116, "loss": 1.97995, "time": 0.50153}
{"mode": "train", "epoch": 1, "iter": 1300, "lr": 0.00705, "memory": 18769, "data_time": 0.01298, "decode.loss_seg": 1.35959, "decode.acc_seg": 48.2223, "aux.loss_seg": 0.59105, "aux.acc_seg": 42.90412, "loss": 1.95064, "time": 0.49826}
{"mode": "train", "epoch": 1, "iter": 1350, "lr": 0.00694, "memory": 18769, "data_time": 0.0282, "decode.loss_seg": 1.21791, "decode.acc_seg": 54.30819, "aux.loss_seg": 0.54529, "aux.acc_seg": 49.87335, "loss": 1.76321, "time": 0.51879}
{"mode": "train", "epoch": 1, "iter": 1400, "lr": 0.00682, "memory": 18769, "data_time": 0.02605, "decode.loss_seg": 1.33175, "decode.acc_seg": 52.40408, "aux.loss_seg": 0.58133, "aux.acc_seg": 48.58066, "loss": 1.91308, "time": 0.52533}
{"mode": "train", "epoch": 1, "iter": 1450, "lr": 0.0067, "memory": 18769, "data_time": 0.01156, "decode.loss_seg": 1.09917, "decode.acc_seg": 58.54601, "aux.loss_seg": 0.50887, "aux.acc_seg": 53.68474, "loss": 1.60804, "time": 0.51799}
{"mode": "train", "epoch": 2, "iter": 1500, "lr": 0.00659, "memory": 18769, "data_time": 0.02217, "decode.loss_seg": 1.26127, "decode.acc_seg": 55.24301, "aux.loss_seg": 0.55591, "aux.acc_seg": 52.22738, "loss": 1.81718, "time": 0.52792}
{"mode": "train", "epoch": 2, "iter": 1550, "lr": 0.00647, "memory": 18769, "data_time": 0.01662, "decode.loss_seg": 1.25456, "decode.acc_seg": 54.37654, "aux.loss_seg": 0.56738, "aux.acc_seg": 49.47656, "loss": 1.82194, "time": 0.5022}
{"mode": "train", "epoch": 2, "iter": 1600, "lr": 0.00635, "memory": 18769, "data_time": 0.04039, "decode.loss_seg": 1.28294, "decode.acc_seg": 54.27657, "aux.loss_seg": 0.57061, "aux.acc_seg": 50.6755, "loss": 1.85355, "time": 0.53616}
{"mode": "train", "epoch": 2, "iter": 1650, "lr": 0.00624, "memory": 18769, "data_time": 0.0253, "decode.loss_seg": 1.19689, "decode.acc_seg": 58.08591, "aux.loss_seg": 0.5369, "aux.acc_seg": 54.43808, "loss": 1.73379, "time": 0.52622}
{"mode": "train", "epoch": 2, "iter": 1700, "lr": 0.00612, "memory": 18769, "data_time": 0.00858, "decode.loss_seg": 1.24768, "decode.acc_seg": 56.66636, "aux.loss_seg": 0.54801, "aux.acc_seg": 53.64622, "loss": 1.79569, "time": 0.51718}
{"mode": "train", "epoch": 2, "iter": 1750, "lr": 0.006, "memory": 18769, "data_time": 0.01885, "decode.loss_seg": 1.19264, "decode.acc_seg": 56.30397, "aux.loss_seg": 0.52593, "aux.acc_seg": 52.40907, "loss": 1.71858, "time": 0.5156}
{"mode": "train", "epoch": 2, "iter": 1800, "lr": 0.00588, "memory": 18769, "data_time": 0.02543, "decode.loss_seg": 1.02655, "decode.acc_seg": 60.98422, "aux.loss_seg": 0.46709, "aux.acc_seg": 57.09599, "loss": 1.49364, "time": 0.51911}
{"mode": "train", "epoch": 2, "iter": 1850, "lr": 0.00576, "memory": 18769, "data_time": 0.02273, "decode.loss_seg": 1.0665, "decode.acc_seg": 61.83971, "aux.loss_seg": 0.48828, "aux.acc_seg": 57.35941, "loss": 1.55479, "time": 0.5256}
{"mode": "train", "epoch": 2, "iter": 1900, "lr": 0.00565, "memory": 18769, "data_time": 0.00852, "decode.loss_seg": 0.96983, "decode.acc_seg": 62.26034, "aux.loss_seg": 0.45609, "aux.acc_seg": 57.8875, "loss": 1.42592, "time": 0.4868}
{"mode": "train", "epoch": 2, "iter": 1950, "lr": 0.00553, "memory": 18769, "data_time": 0.03802, "decode.loss_seg": 1.11446, "decode.acc_seg": 60.16012, "aux.loss_seg": 0.51841, "aux.acc_seg": 55.36171, "loss": 1.63288, "time": 0.57377}
{"mode": "train", "epoch": 2, "iter": 500, "lr": 0.00541, "memory": 18769, "aAcc": 0.7414, "mIoU": 0.1704, "mAcc": 0.2314, "IoU.road": 0.813, "IoU.sidewalk": 0.1502, "IoU.building": 0.5317, "IoU.wall": 0.0, "IoU.fence": 0.0, "IoU.pole": 0.001, "IoU.traffic light": 0.0, "IoU.traffic sign": 0.0, "IoU.vegetation": 0.6467, "IoU.terrain": 0.0822, "IoU.sky": 0.5772, "IoU.person": 0.0044, "IoU.rider": 0.0, "IoU.car": 0.4303, "IoU.truck": 0.0, "IoU.bus": 0.0, "IoU.train": 0.0, "IoU.motorcycle": 0.0, "IoU.bicycle": 0.0, "Acc.road": 0.9426, "Acc.sidewalk": 0.1914, "Acc.building": 0.7193, "Acc.wall": 0.0, "Acc.fence": 0.0, "Acc.pole": 0.001, "Acc.traffic light": 0.0, "Acc.traffic sign": 0.0, "Acc.vegetation": 0.8126, "Acc.terrain": 0.0876, "Acc.sky": 0.9422, "Acc.person": 0.0045, "Acc.rider": 0.0, "Acc.car": 0.6948, "Acc.truck": 0.0, "Acc.bus": 0.0, "Acc.train": 0.0, "Acc.motorcycle": 0.0, "Acc.bicycle": 0.0, "data_time": 0.02216, "decode.loss_seg": 1.08765, "decode.acc_seg": 60.93879, "aux.loss_seg": 0.49856, "aux.acc_seg": 56.02348, "loss": 1.58621, "time": 0.64572}
{"mode": "train", "epoch": 2, "iter": 2050, "lr": 0.00529, "memory": 18769, "data_time": 7.57047, "decode.loss_seg": 1.11846, "decode.acc_seg": 60.16937, "aux.loss_seg": 0.50974, "aux.acc_seg": 56.03585, "loss": 1.6282, "time": 8.27299}
{"mode": "train", "epoch": 2, "iter": 2100, "lr": 0.00517, "memory": 18769, "data_time": 0.03711, "decode.loss_seg": 1.06724, "decode.acc_seg": 62.18205, "aux.loss_seg": 0.49583, "aux.acc_seg": 56.54938, "loss": 1.56307, "time": 0.74368}
{"mode": "train", "epoch": 2, "iter": 2150, "lr": 0.00505, "memory": 18769, "data_time": 0.02216, "decode.loss_seg": 0.98696, "decode.acc_seg": 62.40205, "aux.loss_seg": 0.47917, "aux.acc_seg": 57.27863, "loss": 1.46613, "time": 0.62938}
{"mode": "train", "epoch": 2, "iter": 2200, "lr": 0.00493, "memory": 18769, "data_time": 0.0476, "decode.loss_seg": 1.02901, "decode.acc_seg": 61.56543, "aux.loss_seg": 0.47591, "aux.acc_seg": 57.14614, "loss": 1.50492, "time": 0.85621}
{"mode": "train", "epoch": 2, "iter": 2250, "lr": 0.00481, "memory": 18769, "data_time": 0.02436, "decode.loss_seg": 1.07563, "decode.acc_seg": 62.48124, "aux.loss_seg": 0.48801, "aux.acc_seg": 59.00894, "loss": 1.56365, "time": 0.71319}
{"mode": "train", "epoch": 2, "iter": 2300, "lr": 0.00469, "memory": 18769, "data_time": 0.02253, "decode.loss_seg": 1.13162, "decode.acc_seg": 59.12397, "aux.loss_seg": 0.52199, "aux.acc_seg": 54.48461, "loss": 1.65361, "time": 0.53481}
{"mode": "train", "epoch": 2, "iter": 2350, "lr": 0.00456, "memory": 18769, "data_time": 0.02375, "decode.loss_seg": 1.0969, "decode.acc_seg": 61.5778, "aux.loss_seg": 0.50023, "aux.acc_seg": 56.57816, "loss": 1.59713, "time": 0.62079}
{"mode": "train", "epoch": 2, "iter": 2400, "lr": 0.00444, "memory": 18769, "data_time": 0.03029, "decode.loss_seg": 0.96814, "decode.acc_seg": 65.61485, "aux.loss_seg": 0.46135, "aux.acc_seg": 60.21985, "loss": 1.42949, "time": 0.66028}
{"mode": "train", "epoch": 2, "iter": 2450, "lr": 0.00432, "memory": 18769, "data_time": 0.03426, "decode.loss_seg": 0.9338, "decode.acc_seg": 67.1309, "aux.loss_seg": 0.44112, "aux.acc_seg": 62.21345, "loss": 1.37493, "time": 0.68702}
{"mode": "train", "epoch": 2, "iter": 2500, "lr": 0.0042, "memory": 18769, "data_time": 0.02171, "decode.loss_seg": 0.93001, "decode.acc_seg": 65.68057, "aux.loss_seg": 0.44052, "aux.acc_seg": 61.12903, "loss": 1.37053, "time": 0.52629}
{"mode": "train", "epoch": 2, "iter": 2550, "lr": 0.00407, "memory": 18769, "data_time": 0.01107, "decode.loss_seg": 1.03274, "decode.acc_seg": 62.96537, "aux.loss_seg": 0.48439, "aux.acc_seg": 57.55145, "loss": 1.51713, "time": 0.48884}
{"mode": "train", "epoch": 2, "iter": 2600, "lr": 0.00395, "memory": 18769, "data_time": 0.05024, "decode.loss_seg": 0.94282, "decode.acc_seg": 64.40738, "aux.loss_seg": 0.43544, "aux.acc_seg": 60.36316, "loss": 1.37826, "time": 0.54414}
{"mode": "train", "epoch": 2, "iter": 2650, "lr": 0.00383, "memory": 18769, "data_time": 0.0129, "decode.loss_seg": 0.99776, "decode.acc_seg": 66.14733, "aux.loss_seg": 0.46715, "aux.acc_seg": 60.94209, "loss": 1.46492, "time": 0.52442}
{"mode": "train", "epoch": 2, "iter": 2700, "lr": 0.0037, "memory": 18769, "data_time": 0.01314, "decode.loss_seg": 0.92948, "decode.acc_seg": 67.90779, "aux.loss_seg": 0.4395, "aux.acc_seg": 62.74841, "loss": 1.36898, "time": 0.49681}
{"mode": "train", "epoch": 2, "iter": 2750, "lr": 0.00358, "memory": 18769, "data_time": 0.01511, "decode.loss_seg": 1.03801, "decode.acc_seg": 63.49066, "aux.loss_seg": 0.4871, "aux.acc_seg": 59.01038, "loss": 1.52511, "time": 0.50476}
{"mode": "train", "epoch": 2, "iter": 2800, "lr": 0.00345, "memory": 18769, "data_time": 0.01452, "decode.loss_seg": 1.06188, "decode.acc_seg": 59.42223, "aux.loss_seg": 0.49139, "aux.acc_seg": 54.66568, "loss": 1.55327, "time": 0.50046}
{"mode": "train", "epoch": 2, "iter": 2850, "lr": 0.00333, "memory": 18769, "data_time": 0.0157, "decode.loss_seg": 0.93513, "decode.acc_seg": 66.01078, "aux.loss_seg": 0.43423, "aux.acc_seg": 61.4561, "loss": 1.36935, "time": 0.49983}
{"mode": "train", "epoch": 2, "iter": 2900, "lr": 0.0032, "memory": 18769, "data_time": 0.00951, "decode.loss_seg": 0.97807, "decode.acc_seg": 63.95466, "aux.loss_seg": 0.44538, "aux.acc_seg": 60.08328, "loss": 1.42346, "time": 0.52336}
{"mode": "train", "epoch": 2, "iter": 2950, "lr": 0.00307, "memory": 18769, "data_time": 0.01306, "decode.loss_seg": 0.90342, "decode.acc_seg": 66.24724, "aux.loss_seg": 0.43175, "aux.acc_seg": 61.11813, "loss": 1.33517, "time": 0.50976}
{"mode": "train", "epoch": 3, "iter": 3000, "lr": 0.00295, "memory": 18769, "data_time": 0.01929, "decode.loss_seg": 0.85242, "decode.acc_seg": 68.18974, "aux.loss_seg": 0.41307, "aux.acc_seg": 62.21342, "loss": 1.26549, "time": 0.51622}
{"mode": "train", "epoch": 3, "iter": 3050, "lr": 0.00282, "memory": 18769, "data_time": 0.01137, "decode.loss_seg": 1.0249, "decode.acc_seg": 65.22327, "aux.loss_seg": 0.48062, "aux.acc_seg": 59.47762, "loss": 1.50552, "time": 0.51792}
{"mode": "train", "epoch": 3, "iter": 3100, "lr": 0.00269, "memory": 18769, "data_time": 0.00932, "decode.loss_seg": 0.90156, "decode.acc_seg": 66.97694, "aux.loss_seg": 0.43169, "aux.acc_seg": 61.47985, "loss": 1.33325, "time": 0.48277}
{"mode": "train", "epoch": 3, "iter": 3150, "lr": 0.00256, "memory": 18769, "data_time": 0.01474, "decode.loss_seg": 0.88822, "decode.acc_seg": 67.90527, "aux.loss_seg": 0.429, "aux.acc_seg": 62.5889, "loss": 1.31722, "time": 0.52593}
{"mode": "train", "epoch": 3, "iter": 3200, "lr": 0.00243, "memory": 18769, "data_time": 0.00757, "decode.loss_seg": 0.92072, "decode.acc_seg": 64.41617, "aux.loss_seg": 0.42841, "aux.acc_seg": 60.52256, "loss": 1.34914, "time": 0.48264}
{"mode": "train", "epoch": 3, "iter": 3250, "lr": 0.0023, "memory": 18769, "data_time": 0.01889, "decode.loss_seg": 0.89889, "decode.acc_seg": 67.25207, "aux.loss_seg": 0.42482, "aux.acc_seg": 62.59062, "loss": 1.32371, "time": 0.51139}
{"mode": "train", "epoch": 3, "iter": 3300, "lr": 0.00217, "memory": 18769, "data_time": 0.01987, "decode.loss_seg": 0.86449, "decode.acc_seg": 68.28894, "aux.loss_seg": 0.42401, "aux.acc_seg": 63.59492, "loss": 1.2885, "time": 0.51979}
{"mode": "train", "epoch": 3, "iter": 3350, "lr": 0.00203, "memory": 18769, "data_time": 0.01684, "decode.loss_seg": 0.98863, "decode.acc_seg": 63.37079, "aux.loss_seg": 0.46049, "aux.acc_seg": 58.7844, "loss": 1.44913, "time": 0.50348}
{"mode": "train", "epoch": 3, "iter": 3400, "lr": 0.0019, "memory": 18769, "data_time": 0.0213, "decode.loss_seg": 0.8967, "decode.acc_seg": 66.77853, "aux.loss_seg": 0.4223, "aux.acc_seg": 62.25532, "loss": 1.319, "time": 0.51157}
{"mode": "train", "epoch": 3, "iter": 3450, "lr": 0.00176, "memory": 18769, "data_time": 0.00796, "decode.loss_seg": 0.80826, "decode.acc_seg": 71.52145, "aux.loss_seg": 0.39755, "aux.acc_seg": 66.06428, "loss": 1.20581, "time": 0.53184}
{"mode": "train", "epoch": 3, "iter": 3500, "lr": 0.00163, "memory": 18769, "data_time": 0.01729, "decode.loss_seg": 0.93491, "decode.acc_seg": 66.93284, "aux.loss_seg": 0.44335, "aux.acc_seg": 62.50706, "loss": 1.37825, "time": 0.50863}
{"mode": "train", "epoch": 3, "iter": 3550, "lr": 0.00149, "memory": 18769, "data_time": 0.01508, "decode.loss_seg": 0.83299, "decode.acc_seg": 68.06603, "aux.loss_seg": 0.39352, "aux.acc_seg": 64.31708, "loss": 1.22651, "time": 0.4878}
{"mode": "train", "epoch": 3, "iter": 3600, "lr": 0.00135, "memory": 18769, "data_time": 0.01767, "decode.loss_seg": 0.85169, "decode.acc_seg": 68.78356, "aux.loss_seg": 0.41387, "aux.acc_seg": 63.44249, "loss": 1.26557, "time": 0.52104}
{"mode": "train", "epoch": 3, "iter": 3650, "lr": 0.00121, "memory": 18769, "data_time": 0.01266, "decode.loss_seg": 0.81452, "decode.acc_seg": 70.02614, "aux.loss_seg": 0.40687, "aux.acc_seg": 63.9243, "loss": 1.22139, "time": 0.5223}
{"mode": "train", "epoch": 3, "iter": 3700, "lr": 0.00106, "memory": 18769, "data_time": 0.02352, "decode.loss_seg": 0.82119, "decode.acc_seg": 68.09784, "aux.loss_seg": 0.38855, "aux.acc_seg": 63.46468, "loss": 1.20974, "time": 0.51934}
{"mode": "train", "epoch": 3, "iter": 3750, "lr": 0.00092, "memory": 18769, "data_time": 0.01184, "decode.loss_seg": 0.80677, "decode.acc_seg": 68.79207, "aux.loss_seg": 0.39522, "aux.acc_seg": 64.00271, "loss": 1.20199, "time": 0.52691}
{"mode": "train", "epoch": 3, "iter": 3800, "lr": 0.00077, "memory": 18769, "data_time": 0.01189, "decode.loss_seg": 0.8575, "decode.acc_seg": 67.27045, "aux.loss_seg": 0.41135, "aux.acc_seg": 61.88615, "loss": 1.26886, "time": 0.48421}
{"mode": "train", "epoch": 3, "iter": 3850, "lr": 0.00062, "memory": 18769, "data_time": 0.02259, "decode.loss_seg": 0.78501, "decode.acc_seg": 69.15109, "aux.loss_seg": 0.38544, "aux.acc_seg": 64.07875, "loss": 1.17044, "time": 0.56094}
{"mode": "train", "epoch": 3, "iter": 3900, "lr": 0.00046, "memory": 18769, "data_time": 0.0207, "decode.loss_seg": 0.9008, "decode.acc_seg": 68.10497, "aux.loss_seg": 0.44198, "aux.acc_seg": 61.80645, "loss": 1.34278, "time": 0.51389}
{"mode": "train", "epoch": 3, "iter": 3950, "lr": 0.0003, "memory": 18769, "data_time": 0.00989, "decode.loss_seg": 0.88198, "decode.acc_seg": 65.80739, "aux.loss_seg": 0.42807, "aux.acc_seg": 60.37457, "loss": 1.31004, "time": 0.52411}
{"mode": "train", "epoch": 3, "iter": 500, "lr": 0.00011, "memory": 18769, "aAcc": 0.806, "mIoU": 0.2268, "mAcc": 0.2892, "IoU.road": 0.8729, "IoU.sidewalk": 0.3741, "IoU.building": 0.6674, "IoU.wall": 0.0, "IoU.fence": 0.0, "IoU.pole": 0.053, "IoU.traffic light": 0.0, "IoU.traffic sign": 0.0197, "IoU.vegetation": 0.7343, "IoU.terrain": 0.2834, "IoU.sky": 0.7327, "IoU.person": 0.0601, "IoU.rider": 0.0, "IoU.car": 0.5118, "IoU.truck": 0.0, "IoU.bus": 0.0, "IoU.train": 0.0, "IoU.motorcycle": 0.0, "IoU.bicycle": 0.0004, "Acc.road": 0.9374, "Acc.sidewalk": 0.5601, "Acc.building": 0.7845, "Acc.wall": 0.0, "Acc.fence": 0.0, "Acc.pole": 0.0562, "Acc.traffic light": 0.0, "Acc.traffic sign": 0.0198, "Acc.vegetation": 0.9104, "Acc.terrain": 0.3393, "Acc.sky": 0.9543, "Acc.person": 0.0663, "Acc.rider": 0.0, "Acc.car": 0.8668, "Acc.truck": 0.0, "Acc.bus": 0.0, "Acc.train": 0.0, "Acc.motorcycle": 0.0, "Acc.bicycle": 0.0004, "data_time": 0.01662, "decode.loss_seg": 0.9466, "decode.acc_seg": 68.18167, "aux.loss_seg": 0.45152, "aux.acc_seg": 63.28744, "loss": 1.39812, "time": 0.515}
