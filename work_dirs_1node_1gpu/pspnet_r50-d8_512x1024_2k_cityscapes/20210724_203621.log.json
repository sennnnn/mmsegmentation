{"env_info": "sys.platform: linux\nPython: 3.7.10 (default, Feb 26 2021, 18:47:35) [GCC 7.3.0]\nCUDA available: True\nGPU 0: Tesla V100-SXM2-32GB\nCUDA_HOME: /mnt/cache/share/polaris/dep/cuda-10.1-cudnn7.6.5\nNVCC: Cuda compilation tools, release 10.1, V10.1.243\nGCC: gcc (GCC) 5.4.0\nPyTorch: 1.8.0\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) Math Kernel Library Version 2020.0.2 Product Build 20200624 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v1.7.0 (Git Hash 7aed236906b1f7a05c0917e5257a1af05e9ff683)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 10.1\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_37,code=compute_37\n  - CuDNN 7.6.3\n  - Magma 2.5.2\n  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=10.1, CUDNN_VERSION=7.6.3, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.8.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, \n\nTorchVision: 0.9.0\nOpenCV: 4.5.1\nMMCV: 1.3.8\nMMCV Compiler: GCC 7.3\nMMCV CUDA Compiler: 10.1\nMMSegmentation: 0.15.0+3835e1d", "seed": null, "exp_name": "pspnet_r50-d8_512x1024_2k_cityscapes.py", "mmseg_version": "0.15.0+3835e1d", "config": "norm_cfg = dict(type='SyncBN', requires_grad=True)\nmodel = dict(\n    type='EncoderDecoder',\n    pretrained='open-mmlab://resnet50_v1c',\n    backbone=dict(\n        type='ResNetV1c',\n        depth=50,\n        num_stages=4,\n        out_indices=(0, 1, 2, 3),\n        dilations=(1, 1, 2, 4),\n        strides=(1, 2, 1, 1),\n        norm_cfg=dict(type='SyncBN', requires_grad=True),\n        norm_eval=False,\n        style='pytorch',\n        contract_dilation=True,\n        pretrained='open-mmlab://resnet50_v1c'),\n    decode_head=dict(\n        type='PSPHead',\n        in_channels=2048,\n        in_index=3,\n        channels=512,\n        pool_scales=(1, 2, 3, 6),\n        dropout_ratio=0.1,\n        num_classes=19,\n        norm_cfg=dict(type='SyncBN', requires_grad=True),\n        align_corners=False,\n        loss_decode=dict(\n            type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0)),\n    auxiliary_head=dict(\n        type='FCNHead',\n        in_channels=1024,\n        in_index=2,\n        channels=256,\n        num_convs=1,\n        concat_input=False,\n        dropout_ratio=0.1,\n        num_classes=19,\n        norm_cfg=dict(type='SyncBN', requires_grad=True),\n        align_corners=False,\n        loss_decode=dict(\n            type='CrossEntropyLoss', use_sigmoid=False, loss_weight=0.4)),\n    train_cfg=dict(),\n    test_cfg=dict(mode='whole'))\ndataset_type = 'CityscapesDataset'\ndata_root = 'data/cityscapes/'\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ncrop_size = (512, 1024)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations'),\n    dict(type='Resize', img_scale=(2048, 1024), ratio_range=(0.5, 2.0)),\n    dict(type='RandomCrop', crop_size=(512, 1024), cat_max_ratio=0.75),\n    dict(type='RandomFlip', prob=0.5),\n    dict(type='PhotoMetricDistortion'),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='Pad', size=(512, 1024), pad_val=0, seg_pad_val=255),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_semantic_seg'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(2048, 1024),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=2,\n    workers_per_gpu=2,\n    train=dict(\n        type='CityscapesDataset',\n        data_root='data/cityscapes/',\n        img_dir='leftImg8bit/train',\n        ann_dir='gtFine/train',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations'),\n            dict(\n                type='Resize', img_scale=(2048, 1024), ratio_range=(0.5, 2.0)),\n            dict(type='RandomCrop', crop_size=(512, 1024), cat_max_ratio=0.75),\n            dict(type='RandomFlip', prob=0.5),\n            dict(type='PhotoMetricDistortion'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size=(512, 1024), pad_val=0, seg_pad_val=255),\n            dict(type='DefaultFormatBundle'),\n            dict(type='Collect', keys=['img', 'gt_semantic_seg'])\n        ]),\n    val=dict(\n        type='CityscapesDataset',\n        data_root='data/cityscapes/',\n        img_dir='leftImg8bit/val',\n        ann_dir='gtFine/val',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(2048, 1024),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]),\n    test=dict(\n        type='CityscapesDataset',\n        data_root='data/cityscapes/',\n        img_dir='leftImg8bit/val',\n        ann_dir='gtFine/val',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(2048, 1024),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]))\nlog_config = dict(\n    interval=50, hooks=[dict(type='TextLoggerHook', by_epoch=False)])\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = None\nresume_from = None\nworkflow = [('train', 1)]\ncudnn_benchmark = True\noptimizer = dict(type='SGD', lr=0.01, momentum=0.9, weight_decay=0.0005)\noptimizer_config = dict()\nlr_config = dict(policy='poly', power=0.9, min_lr=0.0001, by_epoch=False)\nrunner = dict(type='IterBasedRunner', max_iters=2000)\ncheckpoint_config = dict(by_epoch=False, interval=8000)\nevaluation = dict(interval=8000, metric='mIoU')\nwork_dir = 'work_dirs_1node_1gpu/pspnet_r50-d8_512x1024_2k_cityscapes'\ngpu_ids = range(0, 1)\nseed = None\n", "CLASSES": ["road", "sidewalk", "building", "wall", "fence", "pole", "traffic light", "traffic sign", "vegetation", "terrain", "sky", "person", "rider", "car", "truck", "bus", "train", "motorcycle", "bicycle"], "PALETTE": [[128, 64, 128], [244, 35, 232], [70, 70, 70], [102, 102, 156], [190, 153, 153], [153, 153, 153], [250, 170, 30], [220, 220, 0], [107, 142, 35], [152, 251, 152], [70, 130, 180], [220, 20, 60], [255, 0, 0], [0, 0, 142], [0, 0, 70], [0, 60, 100], [0, 80, 100], [0, 0, 230], [119, 11, 32]]}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 0.00978, "memory": 18765, "data_time": 0.02393, "decode.loss_seg": 1.70802, "decode.acc_seg": 46.84583, "aux.loss_seg": 0.78499, "aux.acc_seg": 38.03815, "loss": 2.49302, "time": 0.63611}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 0.00956, "memory": 18765, "data_time": 0.02824, "decode.loss_seg": 1.42667, "decode.acc_seg": 55.09599, "aux.loss_seg": 0.61858, "aux.acc_seg": 51.21849, "loss": 2.04526, "time": 0.505}
{"mode": "train", "epoch": 1, "iter": 150, "lr": 0.00933, "memory": 18765, "data_time": 0.00991, "decode.loss_seg": 1.39172, "decode.acc_seg": 54.11123, "aux.loss_seg": 0.58461, "aux.acc_seg": 50.55973, "loss": 1.97633, "time": 0.45781}
{"mode": "train", "epoch": 1, "iter": 200, "lr": 0.00911, "memory": 18765, "data_time": 0.00745, "decode.loss_seg": 1.22329, "decode.acc_seg": 59.48735, "aux.loss_seg": 0.51155, "aux.acc_seg": 58.12397, "loss": 1.73483, "time": 0.49224}
{"mode": "train", "epoch": 1, "iter": 250, "lr": 0.00888, "memory": 18765, "data_time": 0.00767, "decode.loss_seg": 1.1478, "decode.acc_seg": 62.23983, "aux.loss_seg": 0.49642, "aux.acc_seg": 60.0322, "loss": 1.64422, "time": 0.47068}
{"mode": "train", "epoch": 1, "iter": 300, "lr": 0.00866, "memory": 18765, "data_time": 0.01372, "decode.loss_seg": 1.12335, "decode.acc_seg": 63.14481, "aux.loss_seg": 0.50545, "aux.acc_seg": 59.07526, "loss": 1.6288, "time": 0.46909}
{"mode": "train", "epoch": 1, "iter": 350, "lr": 0.00843, "memory": 18765, "data_time": 0.01313, "decode.loss_seg": 0.92631, "decode.acc_seg": 68.14558, "aux.loss_seg": 0.42419, "aux.acc_seg": 64.59189, "loss": 1.3505, "time": 0.47165}
{"mode": "train", "epoch": 1, "iter": 400, "lr": 0.0082, "memory": 18765, "data_time": 0.02491, "decode.loss_seg": 0.81344, "decode.acc_seg": 70.34096, "aux.loss_seg": 0.37892, "aux.acc_seg": 65.92939, "loss": 1.19237, "time": 0.47786}
{"mode": "train", "epoch": 1, "iter": 450, "lr": 0.00798, "memory": 18765, "data_time": 0.00863, "decode.loss_seg": 1.03031, "decode.acc_seg": 66.71515, "aux.loss_seg": 0.44789, "aux.acc_seg": 63.50836, "loss": 1.4782, "time": 0.45363}
{"mode": "train", "epoch": 1, "iter": 500, "lr": 0.00775, "memory": 18765, "data_time": 0.01383, "decode.loss_seg": 0.88284, "decode.acc_seg": 71.34437, "aux.loss_seg": 0.40987, "aux.acc_seg": 67.54857, "loss": 1.29271, "time": 0.47442}
{"mode": "train", "epoch": 1, "iter": 550, "lr": 0.00752, "memory": 18765, "data_time": 0.00779, "decode.loss_seg": 0.85256, "decode.acc_seg": 71.05082, "aux.loss_seg": 0.39115, "aux.acc_seg": 66.91889, "loss": 1.24371, "time": 0.48597}
{"mode": "train", "epoch": 1, "iter": 600, "lr": 0.00729, "memory": 18765, "data_time": 0.01948, "decode.loss_seg": 0.88083, "decode.acc_seg": 69.4432, "aux.loss_seg": 0.39503, "aux.acc_seg": 66.9237, "loss": 1.27585, "time": 0.48977}
{"mode": "train", "epoch": 1, "iter": 650, "lr": 0.00706, "memory": 18765, "data_time": 0.01856, "decode.loss_seg": 0.9136, "decode.acc_seg": 68.66666, "aux.loss_seg": 0.42021, "aux.acc_seg": 64.54769, "loss": 1.33381, "time": 0.53754}
{"mode": "train", "epoch": 1, "iter": 700, "lr": 0.00682, "memory": 18765, "data_time": 0.00875, "decode.loss_seg": 0.84233, "decode.acc_seg": 70.1548, "aux.loss_seg": 0.3821, "aux.acc_seg": 67.34741, "loss": 1.22442, "time": 0.48821}
{"mode": "train", "epoch": 1, "iter": 750, "lr": 0.00659, "memory": 18765, "data_time": 0.01049, "decode.loss_seg": 0.81938, "decode.acc_seg": 70.27025, "aux.loss_seg": 0.36638, "aux.acc_seg": 67.53713, "loss": 1.18575, "time": 0.48591}
{"mode": "train", "epoch": 1, "iter": 800, "lr": 0.00636, "memory": 18765, "data_time": 0.02612, "decode.loss_seg": 0.75087, "decode.acc_seg": 71.84484, "aux.loss_seg": 0.35862, "aux.acc_seg": 68.08421, "loss": 1.10949, "time": 0.49034}
{"mode": "train", "epoch": 1, "iter": 850, "lr": 0.00612, "memory": 18765, "data_time": 0.01243, "decode.loss_seg": 0.71215, "decode.acc_seg": 73.59061, "aux.loss_seg": 0.33423, "aux.acc_seg": 70.12283, "loss": 1.04638, "time": 0.47182}
{"mode": "train", "epoch": 1, "iter": 900, "lr": 0.00589, "memory": 18765, "data_time": 0.01723, "decode.loss_seg": 0.74316, "decode.acc_seg": 72.41156, "aux.loss_seg": 0.3542, "aux.acc_seg": 68.04314, "loss": 1.09735, "time": 0.67257}
{"mode": "train", "epoch": 1, "iter": 950, "lr": 0.00565, "memory": 18765, "data_time": 0.01013, "decode.loss_seg": 0.68517, "decode.acc_seg": 74.86663, "aux.loss_seg": 0.33461, "aux.acc_seg": 70.95761, "loss": 1.01978, "time": 0.54503}
{"mode": "train", "epoch": 1, "iter": 1000, "lr": 0.00541, "memory": 18765, "data_time": 0.00924, "decode.loss_seg": 0.80741, "decode.acc_seg": 72.27971, "aux.loss_seg": 0.36651, "aux.acc_seg": 69.62333, "loss": 1.17392, "time": 0.48364}
{"mode": "train", "epoch": 1, "iter": 1050, "lr": 0.00517, "memory": 18765, "data_time": 0.01039, "decode.loss_seg": 0.77858, "decode.acc_seg": 72.22069, "aux.loss_seg": 0.36208, "aux.acc_seg": 68.09668, "loss": 1.14066, "time": 0.4593}
{"mode": "train", "epoch": 1, "iter": 1100, "lr": 0.00493, "memory": 18765, "data_time": 0.01028, "decode.loss_seg": 0.69803, "decode.acc_seg": 72.92269, "aux.loss_seg": 0.33351, "aux.acc_seg": 69.42492, "loss": 1.03154, "time": 0.62396}
{"mode": "train", "epoch": 1, "iter": 1150, "lr": 0.00469, "memory": 18765, "data_time": 0.01118, "decode.loss_seg": 0.74761, "decode.acc_seg": 73.62099, "aux.loss_seg": 0.3544, "aux.acc_seg": 70.08249, "loss": 1.10201, "time": 0.64003}
{"mode": "train", "epoch": 1, "iter": 1200, "lr": 0.00444, "memory": 18765, "data_time": 0.01562, "decode.loss_seg": 0.59712, "decode.acc_seg": 76.71599, "aux.loss_seg": 0.29399, "aux.acc_seg": 73.54857, "loss": 0.8911, "time": 0.52747}
{"mode": "train", "epoch": 1, "iter": 1250, "lr": 0.0042, "memory": 18765, "data_time": 0.04184, "decode.loss_seg": 0.52483, "decode.acc_seg": 77.86882, "aux.loss_seg": 0.26325, "aux.acc_seg": 74.80375, "loss": 0.78807, "time": 0.50498}
{"mode": "train", "epoch": 1, "iter": 1300, "lr": 0.00395, "memory": 18765, "data_time": 0.01136, "decode.loss_seg": 0.59811, "decode.acc_seg": 75.3772, "aux.loss_seg": 0.30125, "aux.acc_seg": 71.87683, "loss": 0.89936, "time": 0.45015}
{"mode": "train", "epoch": 1, "iter": 1350, "lr": 0.00371, "memory": 18765, "data_time": 0.00818, "decode.loss_seg": 0.51035, "decode.acc_seg": 78.80099, "aux.loss_seg": 0.27003, "aux.acc_seg": 74.55012, "loss": 0.78039, "time": 0.48607}
{"mode": "train", "epoch": 1, "iter": 1400, "lr": 0.00346, "memory": 18765, "data_time": 0.00994, "decode.loss_seg": 0.55529, "decode.acc_seg": 76.93965, "aux.loss_seg": 0.27847, "aux.acc_seg": 73.30345, "loss": 0.83376, "time": 0.48316}
{"mode": "train", "epoch": 1, "iter": 1450, "lr": 0.0032, "memory": 18765, "data_time": 0.01541, "decode.loss_seg": 0.50343, "decode.acc_seg": 79.39477, "aux.loss_seg": 0.26407, "aux.acc_seg": 75.44642, "loss": 0.7675, "time": 0.46095}
{"mode": "train", "epoch": 2, "iter": 1500, "lr": 0.00295, "memory": 18765, "data_time": 0.01887, "decode.loss_seg": 0.5402, "decode.acc_seg": 77.23427, "aux.loss_seg": 0.28191, "aux.acc_seg": 73.15218, "loss": 0.82211, "time": 0.50022}
{"mode": "train", "epoch": 2, "iter": 1550, "lr": 0.00269, "memory": 18765, "data_time": 0.0106, "decode.loss_seg": 0.60933, "decode.acc_seg": 74.96549, "aux.loss_seg": 0.30607, "aux.acc_seg": 71.53711, "loss": 0.9154, "time": 0.4584}
{"mode": "train", "epoch": 2, "iter": 1600, "lr": 0.00243, "memory": 18765, "data_time": 0.01145, "decode.loss_seg": 0.54348, "decode.acc_seg": 77.56796, "aux.loss_seg": 0.29243, "aux.acc_seg": 72.95582, "loss": 0.83591, "time": 0.45568}
{"mode": "train", "epoch": 2, "iter": 1650, "lr": 0.00217, "memory": 18765, "data_time": 0.01136, "decode.loss_seg": 0.54626, "decode.acc_seg": 78.39914, "aux.loss_seg": 0.28517, "aux.acc_seg": 74.21099, "loss": 0.83143, "time": 0.48898}
{"mode": "train", "epoch": 2, "iter": 1700, "lr": 0.0019, "memory": 18765, "data_time": 0.01056, "decode.loss_seg": 0.50116, "decode.acc_seg": 80.16811, "aux.loss_seg": 0.26703, "aux.acc_seg": 76.38186, "loss": 0.76819, "time": 0.50582}
{"mode": "train", "epoch": 2, "iter": 1750, "lr": 0.00163, "memory": 18765, "data_time": 0.01039, "decode.loss_seg": 0.54748, "decode.acc_seg": 79.08446, "aux.loss_seg": 0.27707, "aux.acc_seg": 75.57334, "loss": 0.82455, "time": 0.50094}
{"mode": "train", "epoch": 2, "iter": 1800, "lr": 0.00135, "memory": 18765, "data_time": 0.0316, "decode.loss_seg": 0.43475, "decode.acc_seg": 78.38798, "aux.loss_seg": 0.23292, "aux.acc_seg": 74.8426, "loss": 0.66767, "time": 0.50474}
{"mode": "train", "epoch": 2, "iter": 1850, "lr": 0.00107, "memory": 18765, "data_time": 0.01092, "decode.loss_seg": 0.51051, "decode.acc_seg": 79.12346, "aux.loss_seg": 0.27089, "aux.acc_seg": 74.61451, "loss": 0.78141, "time": 0.49404}
{"mode": "train", "epoch": 2, "iter": 1900, "lr": 0.00077, "memory": 18765, "data_time": 0.02058, "decode.loss_seg": 0.4861, "decode.acc_seg": 80.13689, "aux.loss_seg": 0.2535, "aux.acc_seg": 76.2146, "loss": 0.7396, "time": 0.48816}
{"mode": "train", "epoch": 2, "iter": 1950, "lr": 0.00046, "memory": 18765, "data_time": 0.01153, "decode.loss_seg": 0.50665, "decode.acc_seg": 78.17751, "aux.loss_seg": 0.26637, "aux.acc_seg": 74.20717, "loss": 0.77302, "time": 0.49724}
{"mode": "train", "epoch": 2, "iter": 2000, "lr": 0.00011, "memory": 18765, "data_time": 0.0274, "decode.loss_seg": 0.45926, "decode.acc_seg": 78.89303, "aux.loss_seg": 0.23609, "aux.acc_seg": 75.97247, "loss": 0.69535, "time": 0.51437}
