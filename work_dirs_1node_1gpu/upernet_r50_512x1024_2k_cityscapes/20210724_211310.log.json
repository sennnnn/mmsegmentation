{"env_info": "sys.platform: linux\nPython: 3.7.10 (default, Feb 26 2021, 18:47:35) [GCC 7.3.0]\nCUDA available: True\nGPU 0: Tesla V100-SXM2-32GB\nCUDA_HOME: /mnt/cache/share/polaris/dep/cuda-10.1-cudnn7.6.5\nNVCC: Cuda compilation tools, release 10.1, V10.1.243\nGCC: gcc (GCC) 5.4.0\nPyTorch: 1.8.0\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) Math Kernel Library Version 2020.0.2 Product Build 20200624 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v1.7.0 (Git Hash 7aed236906b1f7a05c0917e5257a1af05e9ff683)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 10.1\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_37,code=compute_37\n  - CuDNN 7.6.3\n  - Magma 2.5.2\n  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=10.1, CUDNN_VERSION=7.6.3, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.8.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, \n\nTorchVision: 0.9.0\nOpenCV: 4.5.1\nMMCV: 1.3.8\nMMCV Compiler: GCC 7.3\nMMCV CUDA Compiler: 10.1\nMMSegmentation: 0.15.0+eb03a01", "seed": null, "exp_name": "upernet_r50_512x1024_2k_cityscapes.py", "mmseg_version": "0.15.0+eb03a01", "config": "norm_cfg = dict(type='SyncBN', requires_grad=True)\nmodel = dict(\n    type='EncoderDecoder',\n    pretrained='open-mmlab://resnet50_v1c',\n    backbone=dict(\n        type='ResNetV1c',\n        depth=50,\n        num_stages=4,\n        out_indices=(0, 1, 2, 3),\n        dilations=(1, 1, 1, 1),\n        strides=(1, 2, 2, 2),\n        norm_cfg=dict(type='SyncBN', requires_grad=True),\n        norm_eval=False,\n        style='pytorch',\n        contract_dilation=True,\n        pretrained='open-mmlab://resnet50_v1c'),\n    decode_head=dict(\n        type='UPerHead',\n        in_channels=[256, 512, 1024, 2048],\n        in_index=[0, 1, 2, 3],\n        pool_scales=(1, 2, 3, 6),\n        channels=512,\n        dropout_ratio=0.1,\n        num_classes=19,\n        norm_cfg=dict(type='SyncBN', requires_grad=True),\n        align_corners=False,\n        loss_decode=dict(\n            type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0)),\n    auxiliary_head=dict(\n        type='FCNHead',\n        in_channels=1024,\n        in_index=2,\n        channels=256,\n        num_convs=1,\n        concat_input=False,\n        dropout_ratio=0.1,\n        num_classes=19,\n        norm_cfg=dict(type='SyncBN', requires_grad=True),\n        align_corners=False,\n        loss_decode=dict(\n            type='CrossEntropyLoss', use_sigmoid=False, loss_weight=0.4)),\n    train_cfg=dict(),\n    test_cfg=dict(mode='whole'))\ndataset_type = 'CityscapesDataset'\ndata_root = 'data/cityscapes/'\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ncrop_size = (512, 1024)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations'),\n    dict(type='Resize', img_scale=(2048, 1024), ratio_range=(0.5, 2.0)),\n    dict(type='RandomCrop', crop_size=(512, 1024), cat_max_ratio=0.75),\n    dict(type='RandomFlip', prob=0.5),\n    dict(type='PhotoMetricDistortion'),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='Pad', size=(512, 1024), pad_val=0, seg_pad_val=255),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_semantic_seg'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(2048, 1024),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=2,\n    workers_per_gpu=2,\n    train=dict(\n        type='CityscapesDataset',\n        data_root='data/cityscapes/',\n        img_dir='leftImg8bit/train',\n        ann_dir='gtFine/train',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations'),\n            dict(\n                type='Resize', img_scale=(2048, 1024), ratio_range=(0.5, 2.0)),\n            dict(type='RandomCrop', crop_size=(512, 1024), cat_max_ratio=0.75),\n            dict(type='RandomFlip', prob=0.5),\n            dict(type='PhotoMetricDistortion'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size=(512, 1024), pad_val=0, seg_pad_val=255),\n            dict(type='DefaultFormatBundle'),\n            dict(type='Collect', keys=['img', 'gt_semantic_seg'])\n        ]),\n    val=dict(\n        type='CityscapesDataset',\n        data_root='data/cityscapes/',\n        img_dir='leftImg8bit/val',\n        ann_dir='gtFine/val',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(2048, 1024),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]),\n    test=dict(\n        type='CityscapesDataset',\n        data_root='data/cityscapes/',\n        img_dir='leftImg8bit/val',\n        ann_dir='gtFine/val',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(2048, 1024),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]))\nlog_config = dict(\n    interval=50, hooks=[dict(type='TextLoggerHook', by_epoch=False)])\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = None\nresume_from = None\nworkflow = [('train', 1)]\ncudnn_benchmark = True\noptimizer = dict(type='SGD', lr=0.01, momentum=0.9, weight_decay=0.0005)\noptimizer_config = dict()\nlr_config = dict(policy='poly', power=0.9, min_lr=0.0001, by_epoch=False)\nrunner = dict(type='IterBasedRunner', max_iters=2000)\ncheckpoint_config = dict(by_epoch=False, interval=8000)\nevaluation = dict(interval=8000, metric='mIoU')\nwork_dir = 'work_dirs_1node_1gpu/upernet_r50_512x1024_2k_cityscapes'\ngpu_ids = range(0, 1)\nseed = None\n", "CLASSES": ["road", "sidewalk", "building", "wall", "fence", "pole", "traffic light", "traffic sign", "vegetation", "terrain", "sky", "person", "rider", "car", "truck", "bus", "train", "motorcycle", "bicycle"], "PALETTE": [[128, 64, 128], [244, 35, 232], [70, 70, 70], [102, 102, 156], [190, 153, 153], [153, 153, 153], [250, 170, 30], [220, 220, 0], [107, 142, 35], [152, 251, 152], [70, 130, 180], [220, 20, 60], [255, 0, 0], [0, 0, 142], [0, 0, 70], [0, 60, 100], [0, 80, 100], [0, 0, 230], [119, 11, 32]]}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 0.00978, "memory": 19971, "data_time": 0.02628, "decode.loss_seg": 1.73318, "decode.acc_seg": 43.31321, "aux.loss_seg": 0.81882, "aux.acc_seg": 28.45165, "loss": 2.552, "time": 0.62437}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 0.00956, "memory": 19971, "data_time": 0.00986, "decode.loss_seg": 1.38607, "decode.acc_seg": 54.27325, "aux.loss_seg": 0.61495, "aux.acc_seg": 50.87655, "loss": 2.00102, "time": 0.3765}
{"mode": "train", "epoch": 1, "iter": 150, "lr": 0.00933, "memory": 19971, "data_time": 0.00887, "decode.loss_seg": 1.43594, "decode.acc_seg": 54.34993, "aux.loss_seg": 0.57826, "aux.acc_seg": 54.50907, "loss": 2.0142, "time": 0.35725}
{"mode": "train", "epoch": 1, "iter": 200, "lr": 0.00911, "memory": 19971, "data_time": 0.00931, "decode.loss_seg": 1.2194, "decode.acc_seg": 60.40013, "aux.loss_seg": 0.5165, "aux.acc_seg": 58.51168, "loss": 1.7359, "time": 0.36136}
{"mode": "train", "epoch": 1, "iter": 250, "lr": 0.00888, "memory": 19971, "data_time": 0.00893, "decode.loss_seg": 1.12829, "decode.acc_seg": 62.13621, "aux.loss_seg": 0.49218, "aux.acc_seg": 60.47168, "loss": 1.62047, "time": 0.39682}
{"mode": "train", "epoch": 1, "iter": 300, "lr": 0.00866, "memory": 19971, "data_time": 0.01453, "decode.loss_seg": 1.16903, "decode.acc_seg": 62.25661, "aux.loss_seg": 0.48873, "aux.acc_seg": 60.09615, "loss": 1.65776, "time": 0.40003}
{"mode": "train", "epoch": 1, "iter": 350, "lr": 0.00843, "memory": 19971, "data_time": 0.02952, "decode.loss_seg": 1.02349, "decode.acc_seg": 63.39409, "aux.loss_seg": 0.43621, "aux.acc_seg": 63.00806, "loss": 1.4597, "time": 0.39497}
{"mode": "train", "epoch": 1, "iter": 400, "lr": 0.0082, "memory": 19971, "data_time": 0.02969, "decode.loss_seg": 0.96998, "decode.acc_seg": 65.31507, "aux.loss_seg": 0.43011, "aux.acc_seg": 63.25692, "loss": 1.40009, "time": 0.42549}
{"mode": "train", "epoch": 1, "iter": 450, "lr": 0.00798, "memory": 19971, "data_time": 0.01883, "decode.loss_seg": 0.86087, "decode.acc_seg": 67.82902, "aux.loss_seg": 0.38656, "aux.acc_seg": 65.54416, "loss": 1.24743, "time": 0.53787}
{"mode": "train", "epoch": 1, "iter": 500, "lr": 0.00775, "memory": 19971, "data_time": 0.03626, "decode.loss_seg": 0.94189, "decode.acc_seg": 68.20062, "aux.loss_seg": 0.42544, "aux.acc_seg": 64.9442, "loss": 1.36732, "time": 0.57431}
{"mode": "train", "epoch": 1, "iter": 550, "lr": 0.00752, "memory": 19971, "data_time": 0.05296, "decode.loss_seg": 0.91694, "decode.acc_seg": 67.907, "aux.loss_seg": 0.41316, "aux.acc_seg": 65.23532, "loss": 1.3301, "time": 0.51357}
{"mode": "train", "epoch": 1, "iter": 600, "lr": 0.00729, "memory": 19971, "data_time": 0.02992, "decode.loss_seg": 0.87556, "decode.acc_seg": 68.90329, "aux.loss_seg": 0.402, "aux.acc_seg": 66.267, "loss": 1.27756, "time": 0.5769}
{"mode": "train", "epoch": 1, "iter": 650, "lr": 0.00706, "memory": 19971, "data_time": 0.05785, "decode.loss_seg": 0.92121, "decode.acc_seg": 68.21398, "aux.loss_seg": 0.40161, "aux.acc_seg": 66.27506, "loss": 1.32282, "time": 0.54198}
{"mode": "train", "epoch": 1, "iter": 700, "lr": 0.00682, "memory": 19971, "data_time": 0.03745, "decode.loss_seg": 0.94274, "decode.acc_seg": 67.36391, "aux.loss_seg": 0.42217, "aux.acc_seg": 64.56918, "loss": 1.36491, "time": 0.48334}
{"mode": "train", "epoch": 1, "iter": 750, "lr": 0.00659, "memory": 19971, "data_time": 0.01557, "decode.loss_seg": 0.72097, "decode.acc_seg": 71.81661, "aux.loss_seg": 0.33671, "aux.acc_seg": 68.98334, "loss": 1.05767, "time": 0.37984}
{"mode": "train", "epoch": 1, "iter": 800, "lr": 0.00636, "memory": 19971, "data_time": 0.02574, "decode.loss_seg": 0.79163, "decode.acc_seg": 71.23681, "aux.loss_seg": 0.36599, "aux.acc_seg": 68.39544, "loss": 1.15763, "time": 0.67012}
{"mode": "train", "epoch": 1, "iter": 850, "lr": 0.00612, "memory": 19971, "data_time": 0.02838, "decode.loss_seg": 0.79896, "decode.acc_seg": 71.61651, "aux.loss_seg": 0.36146, "aux.acc_seg": 69.04014, "loss": 1.16042, "time": 0.61724}
{"mode": "train", "epoch": 1, "iter": 900, "lr": 0.00589, "memory": 19971, "data_time": 0.01463, "decode.loss_seg": 0.78575, "decode.acc_seg": 72.18832, "aux.loss_seg": 0.3588, "aux.acc_seg": 69.34784, "loss": 1.14455, "time": 0.37916}
{"mode": "train", "epoch": 1, "iter": 950, "lr": 0.00565, "memory": 19971, "data_time": 0.02579, "decode.loss_seg": 0.69643, "decode.acc_seg": 73.45684, "aux.loss_seg": 0.33222, "aux.acc_seg": 70.08704, "loss": 1.02864, "time": 0.41359}
{"mode": "train", "epoch": 1, "iter": 1000, "lr": 0.00541, "memory": 19971, "data_time": 0.01238, "decode.loss_seg": 0.71171, "decode.acc_seg": 74.60165, "aux.loss_seg": 0.34887, "aux.acc_seg": 70.47251, "loss": 1.06058, "time": 0.36394}
{"mode": "train", "epoch": 1, "iter": 1050, "lr": 0.00517, "memory": 19971, "data_time": 0.01444, "decode.loss_seg": 0.7124, "decode.acc_seg": 72.52126, "aux.loss_seg": 0.33372, "aux.acc_seg": 69.7245, "loss": 1.04612, "time": 0.3978}
{"mode": "train", "epoch": 1, "iter": 1100, "lr": 0.00493, "memory": 19971, "data_time": 0.02139, "decode.loss_seg": 0.66377, "decode.acc_seg": 74.57714, "aux.loss_seg": 0.32579, "aux.acc_seg": 71.23978, "loss": 0.98955, "time": 0.44279}
{"mode": "train", "epoch": 1, "iter": 1150, "lr": 0.00469, "memory": 19971, "data_time": 0.0152, "decode.loss_seg": 0.68623, "decode.acc_seg": 74.52562, "aux.loss_seg": 0.32275, "aux.acc_seg": 71.76764, "loss": 1.00898, "time": 0.48853}
{"mode": "train", "epoch": 1, "iter": 1200, "lr": 0.00444, "memory": 19971, "data_time": 0.02195, "decode.loss_seg": 0.69338, "decode.acc_seg": 75.50152, "aux.loss_seg": 0.32869, "aux.acc_seg": 72.06732, "loss": 1.02207, "time": 0.52381}
{"mode": "train", "epoch": 1, "iter": 1250, "lr": 0.0042, "memory": 19971, "data_time": 0.01329, "decode.loss_seg": 0.62868, "decode.acc_seg": 76.28846, "aux.loss_seg": 0.30257, "aux.acc_seg": 73.1079, "loss": 0.93125, "time": 0.39407}
{"mode": "train", "epoch": 1, "iter": 1300, "lr": 0.00395, "memory": 19971, "data_time": 0.04647, "decode.loss_seg": 0.60627, "decode.acc_seg": 74.58455, "aux.loss_seg": 0.30962, "aux.acc_seg": 70.26733, "loss": 0.91589, "time": 0.62244}
{"mode": "train", "epoch": 1, "iter": 1350, "lr": 0.00371, "memory": 19971, "data_time": 0.0289, "decode.loss_seg": 0.6575, "decode.acc_seg": 73.6951, "aux.loss_seg": 0.3097, "aux.acc_seg": 71.16238, "loss": 0.9672, "time": 0.67387}
{"mode": "train", "epoch": 1, "iter": 1400, "lr": 0.00346, "memory": 19971, "data_time": 0.01403, "decode.loss_seg": 0.566, "decode.acc_seg": 75.65369, "aux.loss_seg": 0.28764, "aux.acc_seg": 71.69166, "loss": 0.85364, "time": 0.64781}
{"mode": "train", "epoch": 1, "iter": 1450, "lr": 0.0032, "memory": 19971, "data_time": 0.01919, "decode.loss_seg": 0.52333, "decode.acc_seg": 78.16646, "aux.loss_seg": 0.27703, "aux.acc_seg": 73.56311, "loss": 0.80035, "time": 0.49621}
{"mode": "train", "epoch": 2, "iter": 1500, "lr": 0.00295, "memory": 19971, "data_time": 0.05209, "decode.loss_seg": 0.54259, "decode.acc_seg": 76.84424, "aux.loss_seg": 0.27186, "aux.acc_seg": 73.85832, "loss": 0.81445, "time": 0.5428}
{"mode": "train", "epoch": 2, "iter": 1550, "lr": 0.00269, "memory": 19971, "data_time": 0.02023, "decode.loss_seg": 0.57137, "decode.acc_seg": 76.65288, "aux.loss_seg": 0.29925, "aux.acc_seg": 71.98123, "loss": 0.87062, "time": 0.5068}
{"mode": "train", "epoch": 2, "iter": 1600, "lr": 0.00243, "memory": 19971, "data_time": 0.04855, "decode.loss_seg": 0.5426, "decode.acc_seg": 78.43361, "aux.loss_seg": 0.28359, "aux.acc_seg": 74.7672, "loss": 0.82619, "time": 0.55147}
{"mode": "train", "epoch": 2, "iter": 1650, "lr": 0.00217, "memory": 19971, "data_time": 0.01376, "decode.loss_seg": 0.54458, "decode.acc_seg": 78.72811, "aux.loss_seg": 0.28066, "aux.acc_seg": 74.65905, "loss": 0.82525, "time": 0.40089}
{"mode": "train", "epoch": 2, "iter": 1700, "lr": 0.0019, "memory": 19971, "data_time": 0.02227, "decode.loss_seg": 0.54416, "decode.acc_seg": 78.45857, "aux.loss_seg": 0.28434, "aux.acc_seg": 74.77042, "loss": 0.8285, "time": 0.611}
{"mode": "train", "epoch": 2, "iter": 1750, "lr": 0.00163, "memory": 19971, "data_time": 0.03224, "decode.loss_seg": 0.59206, "decode.acc_seg": 76.39458, "aux.loss_seg": 0.29114, "aux.acc_seg": 73.48768, "loss": 0.8832, "time": 0.49662}
{"mode": "train", "epoch": 2, "iter": 1800, "lr": 0.00135, "memory": 19971, "data_time": 0.03149, "decode.loss_seg": 0.45542, "decode.acc_seg": 80.18457, "aux.loss_seg": 0.24559, "aux.acc_seg": 76.38005, "loss": 0.70101, "time": 0.507}
{"mode": "train", "epoch": 2, "iter": 1850, "lr": 0.00107, "memory": 19971, "data_time": 0.03176, "decode.loss_seg": 0.54502, "decode.acc_seg": 77.82396, "aux.loss_seg": 0.28373, "aux.acc_seg": 73.92406, "loss": 0.82875, "time": 0.4821}
{"mode": "train", "epoch": 2, "iter": 1900, "lr": 0.00077, "memory": 19971, "data_time": 0.01085, "decode.loss_seg": 0.4721, "decode.acc_seg": 80.40783, "aux.loss_seg": 0.25257, "aux.acc_seg": 76.53711, "loss": 0.72466, "time": 0.37209}
{"mode": "train", "epoch": 2, "iter": 1950, "lr": 0.00046, "memory": 19971, "data_time": 0.01444, "decode.loss_seg": 0.49803, "decode.acc_seg": 79.7566, "aux.loss_seg": 0.27175, "aux.acc_seg": 74.71362, "loss": 0.76978, "time": 0.50499}
{"mode": "train", "epoch": 2, "iter": 2000, "lr": 0.00011, "memory": 19971, "data_time": 0.02811, "decode.loss_seg": 0.51473, "decode.acc_seg": 77.7881, "aux.loss_seg": 0.26527, "aux.acc_seg": 74.56621, "loss": 0.78, "time": 0.44808}
