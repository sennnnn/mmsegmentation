{"env_info": "sys.platform: linux\nPython: 3.7.10 (default, Feb 26 2021, 18:47:35) [GCC 7.3.0]\nCUDA available: True\nGPU 0: Tesla V100-SXM2-32GB\nCUDA_HOME: /mnt/cache/share/polaris/dep/cuda-10.1-cudnn7.6.5\nNVCC: Cuda compilation tools, release 10.1, V10.1.243\nGCC: gcc (GCC) 5.4.0\nPyTorch: 1.8.0\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) Math Kernel Library Version 2020.0.2 Product Build 20200624 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v1.7.0 (Git Hash 7aed236906b1f7a05c0917e5257a1af05e9ff683)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 10.1\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_37,code=compute_37\n  - CuDNN 7.6.3\n  - Magma 2.5.2\n  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=10.1, CUDNN_VERSION=7.6.3, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.8.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, \n\nTorchVision: 0.9.0\nOpenCV: 4.5.1\nMMCV: 1.3.8\nMMCV Compiler: GCC 7.3\nMMCV CUDA Compiler: 10.1\nMMSegmentation: 0.14.1+9988853", "seed": null, "exp_name": "fcn_r50-d8_512x1024_4k_dummy_cityscapes.py", "mmseg_version": "0.14.1+9988853", "config": "norm_cfg = dict(type='SyncBN', requires_grad=True)\nmodel = dict(\n    type='EncoderDecoder',\n    pretrained='open-mmlab://resnet50_v1c',\n    backbone=dict(\n        type='ResNetV1c',\n        depth=50,\n        num_stages=4,\n        out_indices=(0, 1, 2, 3),\n        dilations=(1, 1, 2, 4),\n        strides=(1, 2, 1, 1),\n        norm_cfg=dict(type='SyncBN', requires_grad=True),\n        norm_eval=False,\n        style='pytorch',\n        contract_dilation=True,\n        pretrained='open-mmlab://resnet50_v1c'),\n    decode_head=dict(\n        type='FCNHead',\n        in_channels=2048,\n        in_index=3,\n        channels=512,\n        num_convs=2,\n        concat_input=True,\n        dropout_ratio=0.1,\n        num_classes=19,\n        norm_cfg=dict(type='SyncBN', requires_grad=True),\n        align_corners=False,\n        loss_decode=dict(\n            type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0)),\n    auxiliary_head=dict(\n        type='FCNHead',\n        in_channels=1024,\n        in_index=2,\n        channels=256,\n        num_convs=1,\n        concat_input=False,\n        dropout_ratio=0.1,\n        num_classes=19,\n        norm_cfg=dict(type='SyncBN', requires_grad=True),\n        align_corners=False,\n        loss_decode=dict(\n            type='CrossEntropyLoss', use_sigmoid=False, loss_weight=0.4)),\n    train_cfg=dict(),\n    test_cfg=dict(mode='whole'))\ndataset_type = 'DummyCityscapes'\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ncrop_size = (512, 1024)\ntrain_pipeline = [\n    dict(type='Resize', img_scale=(2048, 1024), ratio_range=(0.5, 2.0)),\n    dict(type='RandomCrop', crop_size=(512, 1024), cat_max_ratio=0.75),\n    dict(type='RandomFlip', prob=0.5),\n    dict(type='PhotoMetricDistortion'),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_semantic_seg'])\n]\ntest_pipeline = [\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(2048, 1024),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=2,\n    workers_per_gpu=2,\n    train=dict(\n        type='DummyCityscapes',\n        pipeline=[\n            dict(\n                type='Resize', img_scale=(2048, 1024), ratio_range=(0.5, 2.0)),\n            dict(type='RandomCrop', crop_size=(512, 1024), cat_max_ratio=0.75),\n            dict(type='RandomFlip', prob=0.5),\n            dict(type='PhotoMetricDistortion'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='DefaultFormatBundle'),\n            dict(type='Collect', keys=['img', 'gt_semantic_seg'])\n        ]),\n    val=dict(\n        type='DummyCityscapes',\n        pipeline=[\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(2048, 1024),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]),\n    test=dict(\n        type='DummyCityscapes',\n        pipeline=[\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(2048, 1024),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]))\nlog_config = dict(\n    interval=50, hooks=[dict(type='TextLoggerHook', by_epoch=False)])\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = None\nresume_from = None\nworkflow = [('train', 1)]\ncudnn_benchmark = True\noptimizer = dict(type='SGD', lr=0.01, momentum=0.9, weight_decay=0.0005)\noptimizer_config = dict()\nlr_config = dict(policy='poly', power=0.9, min_lr=0.0001, by_epoch=False)\nrunner = dict(type='IterBasedRunner', max_iters=4000)\ncheckpoint_config = dict(by_epoch=False, interval=2000)\nevaluation = dict(interval=2000, metric='mIoU')\nwork_dir = 'work_dirs_1node_1gpu/fcn_r50-d8_512x1024_4k_dummy_cityscapes'\ngpu_ids = range(0, 1)\nseed = None\n", "CLASSES": ["road", "sidewalk", "building", "wall", "fence", "pole", "traffic light", "traffic sign", "vegetation", "terrain", "sky", "person", "rider", "car", "truck", "bus", "train", "motorcycle", "bicycle"], "PALETTE": [[128, 64, 128], [244, 35, 232], [70, 70, 70], [102, 102, 156], [190, 153, 153], [153, 153, 153], [250, 170, 30], [220, 220, 0], [107, 142, 35], [152, 251, 152], [70, 130, 180], [220, 20, 60], [255, 0, 0], [0, 0, 142], [0, 0, 70], [0, 60, 100], [0, 80, 100], [0, 0, 230], [119, 11, 32]]}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 0.00989, "memory": 18773, "data_time": 0.08655, "decode.loss_seg": 2.95004, "decode.acc_seg": 5.26526, "aux.loss_seg": 1.17908, "aux.acc_seg": 5.26291, "loss": 4.12913, "time": 0.69703}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 0.00978, "memory": 18773, "data_time": 0.01397, "decode.loss_seg": 2.94887, "decode.acc_seg": 5.25871, "aux.loss_seg": 1.1789, "aux.acc_seg": 5.26495, "loss": 4.12777, "time": 0.58338}
{"mode": "train", "epoch": 1, "iter": 150, "lr": 0.00967, "memory": 18773, "data_time": 0.01094, "decode.loss_seg": 2.94823, "decode.acc_seg": 5.26368, "aux.loss_seg": 1.17882, "aux.acc_seg": 5.26764, "loss": 4.12705, "time": 0.46173}
{"mode": "train", "epoch": 1, "iter": 200, "lr": 0.00956, "memory": 18773, "data_time": 0.0234, "decode.loss_seg": 2.94774, "decode.acc_seg": 5.26315, "aux.loss_seg": 1.17873, "aux.acc_seg": 5.2636, "loss": 4.12647, "time": 0.47415}
{"mode": "train", "epoch": 1, "iter": 250, "lr": 0.00944, "memory": 18773, "data_time": 0.02262, "decode.loss_seg": 2.94734, "decode.acc_seg": 5.26508, "aux.loss_seg": 1.17867, "aux.acc_seg": 5.25977, "loss": 4.12602, "time": 0.42209}
{"mode": "train", "epoch": 1, "iter": 300, "lr": 0.00933, "memory": 18773, "data_time": 0.01863, "decode.loss_seg": 2.94699, "decode.acc_seg": 5.26252, "aux.loss_seg": 1.17861, "aux.acc_seg": 5.26126, "loss": 4.12559, "time": 0.40932}
{"mode": "train", "epoch": 1, "iter": 350, "lr": 0.00922, "memory": 18773, "data_time": 0.0254, "decode.loss_seg": 2.94666, "decode.acc_seg": 5.26179, "aux.loss_seg": 1.17855, "aux.acc_seg": 5.26797, "loss": 4.12521, "time": 0.42034}
{"mode": "train", "epoch": 1, "iter": 400, "lr": 0.00911, "memory": 18773, "data_time": 0.01462, "decode.loss_seg": 2.94642, "decode.acc_seg": 5.26103, "aux.loss_seg": 1.1785, "aux.acc_seg": 5.26317, "loss": 4.12492, "time": 0.41606}
{"mode": "train", "epoch": 1, "iter": 450, "lr": 0.00899, "memory": 18773, "data_time": 0.01848, "decode.loss_seg": 2.94619, "decode.acc_seg": 5.26468, "aux.loss_seg": 1.17846, "aux.acc_seg": 5.26216, "loss": 4.12465, "time": 0.4105}
{"mode": "train", "epoch": 1, "iter": 500, "lr": 0.00888, "memory": 18773, "data_time": 0.01995, "decode.loss_seg": 2.94599, "decode.acc_seg": 5.26133, "aux.loss_seg": 1.17842, "aux.acc_seg": 5.26116, "loss": 4.12442, "time": 0.41819}
{"mode": "train", "epoch": 1, "iter": 550, "lr": 0.00877, "memory": 18773, "data_time": 0.0261, "decode.loss_seg": 2.94583, "decode.acc_seg": 5.26402, "aux.loss_seg": 1.17838, "aux.acc_seg": 5.26631, "loss": 4.12421, "time": 0.42114}
{"mode": "train", "epoch": 1, "iter": 600, "lr": 0.00866, "memory": 18773, "data_time": 0.03303, "decode.loss_seg": 2.94569, "decode.acc_seg": 5.26095, "aux.loss_seg": 1.17835, "aux.acc_seg": 5.26149, "loss": 4.12404, "time": 0.44265}
{"mode": "train", "epoch": 1, "iter": 650, "lr": 0.00854, "memory": 18773, "data_time": 0.01459, "decode.loss_seg": 2.94556, "decode.acc_seg": 5.26213, "aux.loss_seg": 1.17832, "aux.acc_seg": 5.26365, "loss": 4.12388, "time": 0.40208}
{"mode": "train", "epoch": 1, "iter": 700, "lr": 0.00843, "memory": 18773, "data_time": 0.01682, "decode.loss_seg": 2.94545, "decode.acc_seg": 5.26453, "aux.loss_seg": 1.17829, "aux.acc_seg": 5.26075, "loss": 4.12374, "time": 0.41815}
{"mode": "train", "epoch": 1, "iter": 750, "lr": 0.00831, "memory": 18773, "data_time": 0.02495, "decode.loss_seg": 2.94534, "decode.acc_seg": 5.26372, "aux.loss_seg": 1.17826, "aux.acc_seg": 5.26341, "loss": 4.1236, "time": 0.42259}
{"mode": "train", "epoch": 1, "iter": 800, "lr": 0.0082, "memory": 18773, "data_time": 0.02181, "decode.loss_seg": 2.94525, "decode.acc_seg": 5.26447, "aux.loss_seg": 1.17823, "aux.acc_seg": 5.26563, "loss": 4.12348, "time": 0.41296}
{"mode": "train", "epoch": 1, "iter": 850, "lr": 0.00809, "memory": 18773, "data_time": 0.01947, "decode.loss_seg": 2.94518, "decode.acc_seg": 5.26409, "aux.loss_seg": 1.17821, "aux.acc_seg": 5.26212, "loss": 4.12339, "time": 0.41277}
{"mode": "train", "epoch": 1, "iter": 900, "lr": 0.00797, "memory": 18773, "data_time": 0.023, "decode.loss_seg": 2.94512, "decode.acc_seg": 5.26052, "aux.loss_seg": 1.17819, "aux.acc_seg": 5.26697, "loss": 4.12331, "time": 0.4161}
{"mode": "train", "epoch": 1, "iter": 950, "lr": 0.00786, "memory": 18773, "data_time": 0.02237, "decode.loss_seg": 2.94505, "decode.acc_seg": 5.26298, "aux.loss_seg": 1.17817, "aux.acc_seg": 5.26275, "loss": 4.12322, "time": 0.42767}
{"mode": "train", "epoch": 1, "iter": 1000, "lr": 0.00774, "memory": 18773, "data_time": 0.01683, "decode.loss_seg": 2.945, "decode.acc_seg": 5.26491, "aux.loss_seg": 1.17815, "aux.acc_seg": 5.26453, "loss": 4.12314, "time": 0.41613}
{"mode": "train", "epoch": 1, "iter": 1050, "lr": 0.00763, "memory": 18773, "data_time": 0.02651, "decode.loss_seg": 2.94496, "decode.acc_seg": 5.2654, "aux.loss_seg": 1.17813, "aux.acc_seg": 5.26141, "loss": 4.12309, "time": 0.4349}
{"mode": "train", "epoch": 1, "iter": 1100, "lr": 0.00751, "memory": 18773, "data_time": 0.01658, "decode.loss_seg": 2.94491, "decode.acc_seg": 5.2683, "aux.loss_seg": 1.17812, "aux.acc_seg": 5.26473, "loss": 4.12302, "time": 0.39844}
{"mode": "train", "epoch": 1, "iter": 1150, "lr": 0.0074, "memory": 18773, "data_time": 0.02084, "decode.loss_seg": 2.94486, "decode.acc_seg": 5.26258, "aux.loss_seg": 1.1781, "aux.acc_seg": 5.27056, "loss": 4.12296, "time": 0.41388}
{"mode": "train", "epoch": 1, "iter": 1200, "lr": 0.00728, "memory": 18773, "data_time": 0.01072, "decode.loss_seg": 2.94484, "decode.acc_seg": 5.26302, "aux.loss_seg": 1.17809, "aux.acc_seg": 5.2672, "loss": 4.12292, "time": 0.40092}
{"mode": "train", "epoch": 1, "iter": 1250, "lr": 0.00717, "memory": 18773, "data_time": 0.0196, "decode.loss_seg": 2.9448, "decode.acc_seg": 5.26191, "aux.loss_seg": 1.17807, "aux.acc_seg": 5.26665, "loss": 4.12288, "time": 0.41412}
{"mode": "train", "epoch": 1, "iter": 1300, "lr": 0.00705, "memory": 18773, "data_time": 0.01706, "decode.loss_seg": 2.94477, "decode.acc_seg": 5.26517, "aux.loss_seg": 1.17807, "aux.acc_seg": 5.2609, "loss": 4.12284, "time": 0.41084}
{"mode": "train", "epoch": 1, "iter": 1350, "lr": 0.00694, "memory": 18773, "data_time": 0.01814, "decode.loss_seg": 2.94475, "decode.acc_seg": 5.27224, "aux.loss_seg": 1.17805, "aux.acc_seg": 5.26648, "loss": 4.1228, "time": 0.41589}
{"mode": "train", "epoch": 1, "iter": 1400, "lr": 0.00682, "memory": 18773, "data_time": 0.0151, "decode.loss_seg": 2.94473, "decode.acc_seg": 5.25994, "aux.loss_seg": 1.17804, "aux.acc_seg": 5.26019, "loss": 4.12277, "time": 0.40588}
{"mode": "train", "epoch": 1, "iter": 1450, "lr": 0.0067, "memory": 18773, "data_time": 0.0218, "decode.loss_seg": 2.94471, "decode.acc_seg": 5.2616, "aux.loss_seg": 1.17803, "aux.acc_seg": 5.2595, "loss": 4.12274, "time": 0.42148}
{"mode": "train", "epoch": 2, "iter": 1500, "lr": 0.00659, "memory": 18773, "data_time": 0.03427, "decode.loss_seg": 2.94469, "decode.acc_seg": 5.26599, "aux.loss_seg": 1.17802, "aux.acc_seg": 5.26325, "loss": 4.12271, "time": 0.43491}
{"mode": "train", "epoch": 2, "iter": 1550, "lr": 0.00647, "memory": 18773, "data_time": 0.01671, "decode.loss_seg": 2.94468, "decode.acc_seg": 5.268, "aux.loss_seg": 1.17801, "aux.acc_seg": 5.26736, "loss": 4.12269, "time": 0.41005}
{"mode": "train", "epoch": 2, "iter": 1600, "lr": 0.00635, "memory": 18773, "data_time": 0.01523, "decode.loss_seg": 2.94466, "decode.acc_seg": 5.26527, "aux.loss_seg": 1.178, "aux.acc_seg": 5.26548, "loss": 4.12267, "time": 0.41016}
{"mode": "train", "epoch": 2, "iter": 1650, "lr": 0.00624, "memory": 18773, "data_time": 0.02641, "decode.loss_seg": 2.94465, "decode.acc_seg": 5.26493, "aux.loss_seg": 1.178, "aux.acc_seg": 5.26381, "loss": 4.12265, "time": 0.43346}
{"mode": "train", "epoch": 2, "iter": 1700, "lr": 0.00612, "memory": 18773, "data_time": 0.02343, "decode.loss_seg": 2.94464, "decode.acc_seg": 5.26012, "aux.loss_seg": 1.17799, "aux.acc_seg": 5.25886, "loss": 4.12263, "time": 0.42198}
{"mode": "train", "epoch": 2, "iter": 1750, "lr": 0.006, "memory": 18773, "data_time": 0.01464, "decode.loss_seg": 2.94463, "decode.acc_seg": 5.26552, "aux.loss_seg": 1.17798, "aux.acc_seg": 5.26086, "loss": 4.12261, "time": 0.40457}
{"mode": "train", "epoch": 2, "iter": 1800, "lr": 0.00588, "memory": 18773, "data_time": 0.01264, "decode.loss_seg": 2.94462, "decode.acc_seg": 5.2661, "aux.loss_seg": 1.17797, "aux.acc_seg": 5.26394, "loss": 4.12259, "time": 0.40008}
{"mode": "train", "epoch": 2, "iter": 1850, "lr": 0.00576, "memory": 18773, "data_time": 0.01328, "decode.loss_seg": 2.94461, "decode.acc_seg": 5.26546, "aux.loss_seg": 1.17797, "aux.acc_seg": 5.26116, "loss": 4.12258, "time": 0.39967}
{"mode": "train", "epoch": 2, "iter": 1900, "lr": 0.00565, "memory": 18773, "data_time": 0.02007, "decode.loss_seg": 2.9446, "decode.acc_seg": 5.26988, "aux.loss_seg": 1.17796, "aux.acc_seg": 5.26039, "loss": 4.12256, "time": 0.44483}
{"mode": "train", "epoch": 2, "iter": 1950, "lr": 0.00553, "memory": 18773, "data_time": 0.01802, "decode.loss_seg": 2.94459, "decode.acc_seg": 5.26965, "aux.loss_seg": 1.17796, "aux.acc_seg": 5.2657, "loss": 4.12255, "time": 0.41849}
{"mode": "train", "epoch": 2, "iter": 500, "lr": 0.00541, "memory": 18773, "aAcc": 0.0526, "mIoU": 0.0252, "mAcc": 0.0526, "IoU.road": 0.0243, "IoU.sidewalk": 0.0115, "IoU.building": 0.0243, "IoU.wall": 0.0301, "IoU.fence": 0.0247, "IoU.pole": 0.0358, "IoU.traffic light": 0.0284, "IoU.traffic sign": 0.0154, "IoU.vegetation": 0.0326, "IoU.terrain": 0.034, "IoU.sky": 0.018, "IoU.person": 0.0312, "IoU.rider": 0.0155, "IoU.car": 0.0356, "IoU.truck": 0.0277, "IoU.bus": 0.0277, "IoU.train": 0.0094, "IoU.motorcycle": 0.0219, "IoU.bicycle": 0.03, "Acc.road": 0.0433, "Acc.sidewalk": 0.0145, "Acc.building": 0.043, "Acc.wall": 0.066, "Acc.fence": 0.0446, "Acc.pole": 0.101, "Acc.traffic light": 0.0582, "Acc.traffic sign": 0.0212, "Acc.vegetation": 0.0788, "Acc.terrain": 0.0879, "Acc.sky": 0.0267, "Acc.person": 0.071, "Acc.rider": 0.0215, "Acc.car": 0.099, "Acc.truck": 0.0549, "Acc.bus": 0.0548, "Acc.train": 0.0113, "Acc.motorcycle": 0.0361, "Acc.bicycle": 0.0656, "data_time": 0.01445, "decode.loss_seg": 2.94459, "decode.acc_seg": 5.26118, "aux.loss_seg": 1.17795, "aux.acc_seg": 5.2645, "loss": 4.12254, "time": 0.44888}
{"mode": "train", "epoch": 2, "iter": 2050, "lr": 0.00529, "memory": 18773, "data_time": 5.63047, "decode.loss_seg": 2.94458, "decode.acc_seg": 5.27105, "aux.loss_seg": 1.17795, "aux.acc_seg": 5.26263, "loss": 4.12253, "time": 6.07055}
{"mode": "train", "epoch": 2, "iter": 2100, "lr": 0.00517, "memory": 18773, "data_time": 0.02367, "decode.loss_seg": 2.94458, "decode.acc_seg": 5.26521, "aux.loss_seg": 1.17795, "aux.acc_seg": 5.26516, "loss": 4.12253, "time": 0.41643}
{"mode": "train", "epoch": 2, "iter": 2150, "lr": 0.00505, "memory": 18773, "data_time": 0.01824, "decode.loss_seg": 2.94457, "decode.acc_seg": 5.26244, "aux.loss_seg": 1.17794, "aux.acc_seg": 5.26614, "loss": 4.12251, "time": 0.41551}
{"mode": "train", "epoch": 2, "iter": 2200, "lr": 0.00493, "memory": 18773, "data_time": 0.0134, "decode.loss_seg": 2.94457, "decode.acc_seg": 5.26415, "aux.loss_seg": 1.17793, "aux.acc_seg": 5.26497, "loss": 4.1225, "time": 0.40719}
{"mode": "train", "epoch": 2, "iter": 2250, "lr": 0.00481, "memory": 18773, "data_time": 0.01882, "decode.loss_seg": 2.94456, "decode.acc_seg": 5.26055, "aux.loss_seg": 1.17793, "aux.acc_seg": 5.2596, "loss": 4.1225, "time": 0.41365}
{"mode": "train", "epoch": 2, "iter": 2300, "lr": 0.00469, "memory": 18773, "data_time": 0.01775, "decode.loss_seg": 2.94456, "decode.acc_seg": 5.26777, "aux.loss_seg": 1.17793, "aux.acc_seg": 5.26105, "loss": 4.12249, "time": 0.40415}
{"mode": "train", "epoch": 2, "iter": 2350, "lr": 0.00456, "memory": 18773, "data_time": 0.01265, "decode.loss_seg": 2.94455, "decode.acc_seg": 5.26617, "aux.loss_seg": 1.17792, "aux.acc_seg": 5.26866, "loss": 4.12247, "time": 0.3978}
{"mode": "train", "epoch": 2, "iter": 2400, "lr": 0.00444, "memory": 18773, "data_time": 0.01702, "decode.loss_seg": 2.94455, "decode.acc_seg": 5.27109, "aux.loss_seg": 1.17792, "aux.acc_seg": 5.26747, "loss": 4.12247, "time": 0.41168}
{"mode": "train", "epoch": 2, "iter": 2450, "lr": 0.00432, "memory": 18773, "data_time": 0.03039, "decode.loss_seg": 2.94454, "decode.acc_seg": 5.26558, "aux.loss_seg": 1.17791, "aux.acc_seg": 5.26672, "loss": 4.12246, "time": 0.44239}
{"mode": "train", "epoch": 2, "iter": 2500, "lr": 0.0042, "memory": 18773, "data_time": 0.02123, "decode.loss_seg": 2.94454, "decode.acc_seg": 5.26561, "aux.loss_seg": 1.17792, "aux.acc_seg": 5.26383, "loss": 4.12246, "time": 0.42109}
{"mode": "train", "epoch": 2, "iter": 2550, "lr": 0.00407, "memory": 18773, "data_time": 0.01617, "decode.loss_seg": 2.94454, "decode.acc_seg": 5.26712, "aux.loss_seg": 1.17791, "aux.acc_seg": 5.26626, "loss": 4.12245, "time": 0.41239}
{"mode": "train", "epoch": 2, "iter": 2600, "lr": 0.00395, "memory": 18773, "data_time": 0.01603, "decode.loss_seg": 2.94454, "decode.acc_seg": 5.2649, "aux.loss_seg": 1.17791, "aux.acc_seg": 5.26842, "loss": 4.12244, "time": 0.4059}
{"mode": "train", "epoch": 2, "iter": 2650, "lr": 0.00383, "memory": 18773, "data_time": 0.02549, "decode.loss_seg": 2.94453, "decode.acc_seg": 5.26185, "aux.loss_seg": 1.17791, "aux.acc_seg": 5.2671, "loss": 4.12244, "time": 0.41993}
{"mode": "train", "epoch": 2, "iter": 2700, "lr": 0.0037, "memory": 18773, "data_time": 0.01442, "decode.loss_seg": 2.94453, "decode.acc_seg": 5.26913, "aux.loss_seg": 1.17791, "aux.acc_seg": 5.26314, "loss": 4.12244, "time": 0.40869}
{"mode": "train", "epoch": 2, "iter": 2750, "lr": 0.00358, "memory": 18773, "data_time": 0.03231, "decode.loss_seg": 2.94453, "decode.acc_seg": 5.26427, "aux.loss_seg": 1.1779, "aux.acc_seg": 5.2626, "loss": 4.12243, "time": 0.44063}
{"mode": "train", "epoch": 2, "iter": 2800, "lr": 0.00345, "memory": 18773, "data_time": 0.01714, "decode.loss_seg": 2.94453, "decode.acc_seg": 5.26704, "aux.loss_seg": 1.1779, "aux.acc_seg": 5.26166, "loss": 4.12243, "time": 0.43782}
{"mode": "train", "epoch": 2, "iter": 2850, "lr": 0.00333, "memory": 18773, "data_time": 0.01644, "decode.loss_seg": 2.94452, "decode.acc_seg": 5.2665, "aux.loss_seg": 1.1779, "aux.acc_seg": 5.26573, "loss": 4.12242, "time": 0.39583}
{"mode": "train", "epoch": 2, "iter": 2900, "lr": 0.0032, "memory": 18773, "data_time": 0.00916, "decode.loss_seg": 2.94453, "decode.acc_seg": 5.26595, "aux.loss_seg": 1.1779, "aux.acc_seg": 5.25734, "loss": 4.12242, "time": 0.46892}
{"mode": "train", "epoch": 2, "iter": 2950, "lr": 0.00307, "memory": 18773, "data_time": 0.02055, "decode.loss_seg": 2.94452, "decode.acc_seg": 5.26338, "aux.loss_seg": 1.1779, "aux.acc_seg": 5.26536, "loss": 4.12242, "time": 0.47483}
{"mode": "train", "epoch": 3, "iter": 3000, "lr": 0.00295, "memory": 18773, "data_time": 0.02161, "decode.loss_seg": 2.94452, "decode.acc_seg": 5.26603, "aux.loss_seg": 1.17789, "aux.acc_seg": 5.26337, "loss": 4.12241, "time": 0.43689}
{"mode": "train", "epoch": 3, "iter": 3050, "lr": 0.00282, "memory": 18773, "data_time": 0.01041, "decode.loss_seg": 2.94452, "decode.acc_seg": 5.26054, "aux.loss_seg": 1.17789, "aux.acc_seg": 5.26625, "loss": 4.12241, "time": 0.3933}
{"mode": "train", "epoch": 3, "iter": 3100, "lr": 0.00269, "memory": 18773, "data_time": 0.01181, "decode.loss_seg": 2.94452, "decode.acc_seg": 5.27012, "aux.loss_seg": 1.17789, "aux.acc_seg": 5.26819, "loss": 4.12241, "time": 0.40682}
{"mode": "train", "epoch": 3, "iter": 3150, "lr": 0.00256, "memory": 18773, "data_time": 0.0084, "decode.loss_seg": 2.94451, "decode.acc_seg": 5.26858, "aux.loss_seg": 1.17789, "aux.acc_seg": 5.26249, "loss": 4.1224, "time": 0.50915}
{"mode": "train", "epoch": 3, "iter": 3200, "lr": 0.00243, "memory": 18773, "data_time": 0.01248, "decode.loss_seg": 2.94451, "decode.acc_seg": 5.27247, "aux.loss_seg": 1.17789, "aux.acc_seg": 5.26788, "loss": 4.1224, "time": 0.38369}
{"mode": "train", "epoch": 3, "iter": 3250, "lr": 0.0023, "memory": 18773, "data_time": 0.00879, "decode.loss_seg": 2.94451, "decode.acc_seg": 5.26351, "aux.loss_seg": 1.17789, "aux.acc_seg": 5.27308, "loss": 4.1224, "time": 0.46936}
{"mode": "train", "epoch": 3, "iter": 3300, "lr": 0.00217, "memory": 18773, "data_time": 0.01208, "decode.loss_seg": 2.94451, "decode.acc_seg": 5.2692, "aux.loss_seg": 1.17788, "aux.acc_seg": 5.26332, "loss": 4.1224, "time": 0.40294}
{"mode": "train", "epoch": 3, "iter": 3350, "lr": 0.00203, "memory": 18773, "data_time": 0.00857, "decode.loss_seg": 2.94451, "decode.acc_seg": 5.27069, "aux.loss_seg": 1.17788, "aux.acc_seg": 5.26433, "loss": 4.12239, "time": 0.38138}
{"mode": "train", "epoch": 3, "iter": 3400, "lr": 0.0019, "memory": 18773, "data_time": 0.03126, "decode.loss_seg": 2.94451, "decode.acc_seg": 5.2685, "aux.loss_seg": 1.17788, "aux.acc_seg": 5.26527, "loss": 4.12239, "time": 0.50245}
{"mode": "train", "epoch": 3, "iter": 3450, "lr": 0.00176, "memory": 18773, "data_time": 0.00755, "decode.loss_seg": 2.94451, "decode.acc_seg": 5.26245, "aux.loss_seg": 1.17788, "aux.acc_seg": 5.26574, "loss": 4.12239, "time": 0.37741}
{"mode": "train", "epoch": 3, "iter": 3500, "lr": 0.00163, "memory": 18773, "data_time": 0.00732, "decode.loss_seg": 2.94451, "decode.acc_seg": 5.27035, "aux.loss_seg": 1.17788, "aux.acc_seg": 5.26276, "loss": 4.12239, "time": 0.37736}
{"mode": "train", "epoch": 3, "iter": 3550, "lr": 0.00149, "memory": 18773, "data_time": 0.00766, "decode.loss_seg": 2.9445, "decode.acc_seg": 5.26735, "aux.loss_seg": 1.17788, "aux.acc_seg": 5.26274, "loss": 4.12238, "time": 0.37761}
{"mode": "train", "epoch": 3, "iter": 3600, "lr": 0.00135, "memory": 18773, "data_time": 0.00822, "decode.loss_seg": 2.94451, "decode.acc_seg": 5.26841, "aux.loss_seg": 1.17788, "aux.acc_seg": 5.25903, "loss": 4.12239, "time": 0.3787}
{"mode": "train", "epoch": 3, "iter": 3650, "lr": 0.00121, "memory": 18773, "data_time": 0.00797, "decode.loss_seg": 2.9445, "decode.acc_seg": 5.27057, "aux.loss_seg": 1.17788, "aux.acc_seg": 5.26484, "loss": 4.12238, "time": 0.37711}
{"mode": "train", "epoch": 3, "iter": 3700, "lr": 0.00106, "memory": 18773, "data_time": 0.00767, "decode.loss_seg": 2.9445, "decode.acc_seg": 5.26556, "aux.loss_seg": 1.17788, "aux.acc_seg": 5.2667, "loss": 4.12238, "time": 0.37674}
{"mode": "train", "epoch": 3, "iter": 3750, "lr": 0.00092, "memory": 18773, "data_time": 0.00786, "decode.loss_seg": 2.9445, "decode.acc_seg": 5.2671, "aux.loss_seg": 1.17788, "aux.acc_seg": 5.26558, "loss": 4.12238, "time": 0.37706}
{"mode": "train", "epoch": 3, "iter": 3800, "lr": 0.00077, "memory": 18773, "data_time": 0.00768, "decode.loss_seg": 2.9445, "decode.acc_seg": 5.26429, "aux.loss_seg": 1.17788, "aux.acc_seg": 5.26872, "loss": 4.12238, "time": 0.37692}
{"mode": "train", "epoch": 3, "iter": 3850, "lr": 0.00062, "memory": 18773, "data_time": 0.00759, "decode.loss_seg": 2.9445, "decode.acc_seg": 5.27034, "aux.loss_seg": 1.17788, "aux.acc_seg": 5.26187, "loss": 4.12238, "time": 0.37642}
{"mode": "train", "epoch": 3, "iter": 3900, "lr": 0.00046, "memory": 18773, "data_time": 0.00781, "decode.loss_seg": 2.9445, "decode.acc_seg": 5.26314, "aux.loss_seg": 1.17788, "aux.acc_seg": 5.26166, "loss": 4.12238, "time": 0.37631}
{"mode": "train", "epoch": 3, "iter": 3950, "lr": 0.0003, "memory": 18773, "data_time": 0.00761, "decode.loss_seg": 2.9445, "decode.acc_seg": 5.26912, "aux.loss_seg": 1.17788, "aux.acc_seg": 5.26384, "loss": 4.12238, "time": 0.37606}
{"mode": "train", "epoch": 3, "iter": 500, "lr": 0.00011, "memory": 18773, "aAcc": 0.0527, "mIoU": 0.0249, "mAcc": 0.0526, "IoU.road": 0.0202, "IoU.sidewalk": 0.0184, "IoU.building": 0.0201, "IoU.wall": 0.025, "IoU.fence": 0.0193, "IoU.pole": 0.0404, "IoU.traffic light": 0.0261, "IoU.traffic sign": 0.0162, "IoU.vegetation": 0.0282, "IoU.terrain": 0.034, "IoU.sky": 0.0207, "IoU.person": 0.0249, "IoU.rider": 0.0124, "IoU.car": 0.0351, "IoU.truck": 0.0241, "IoU.bus": 0.0306, "IoU.train": 0.0146, "IoU.motorcycle": 0.0303, "IoU.bicycle": 0.0334, "Acc.road": 0.0317, "Acc.sidewalk": 0.0276, "Acc.building": 0.0314, "Acc.wall": 0.0453, "Acc.fence": 0.0295, "Acc.pole": 0.1484, "Acc.traffic light": 0.0494, "Acc.traffic sign": 0.0229, "Acc.vegetation": 0.0571, "Acc.terrain": 0.0877, "Acc.sky": 0.0329, "Acc.person": 0.0452, "Acc.rider": 0.0159, "Acc.car": 0.095, "Acc.truck": 0.0425, "Acc.bus": 0.0678, "Acc.train": 0.0199, "Acc.motorcycle": 0.0665, "Acc.bicycle": 0.0836, "data_time": 0.0075, "decode.loss_seg": 2.9445, "decode.acc_seg": 5.26438, "aux.loss_seg": 1.17788, "aux.acc_seg": 5.26708, "loss": 4.12238, "time": 0.39985}
