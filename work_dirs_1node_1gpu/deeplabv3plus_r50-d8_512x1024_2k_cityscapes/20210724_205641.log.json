{"env_info": "sys.platform: linux\nPython: 3.7.10 (default, Feb 26 2021, 18:47:35) [GCC 7.3.0]\nCUDA available: True\nGPU 0: Tesla V100-SXM2-32GB\nCUDA_HOME: /mnt/cache/share/polaris/dep/cuda-10.1-cudnn7.6.5\nNVCC: Cuda compilation tools, release 10.1, V10.1.243\nGCC: gcc (GCC) 5.4.0\nPyTorch: 1.8.0\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) Math Kernel Library Version 2020.0.2 Product Build 20200624 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v1.7.0 (Git Hash 7aed236906b1f7a05c0917e5257a1af05e9ff683)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 10.1\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_37,code=compute_37\n  - CuDNN 7.6.3\n  - Magma 2.5.2\n  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=10.1, CUDNN_VERSION=7.6.3, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.8.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, \n\nTorchVision: 0.9.0\nOpenCV: 4.5.1\nMMCV: 1.3.8\nMMCV Compiler: GCC 7.3\nMMCV CUDA Compiler: 10.1\nMMSegmentation: 0.15.0+eb03a01", "seed": null, "exp_name": "deeplabv3plus_r50-d8_512x1024_2k_cityscapes.py", "mmseg_version": "0.15.0+eb03a01", "config": "norm_cfg = dict(type='SyncBN', requires_grad=True)\nmodel = dict(\n    type='EncoderDecoder',\n    pretrained='open-mmlab://resnet50_v1c',\n    backbone=dict(\n        type='ResNetV1c',\n        depth=50,\n        num_stages=4,\n        out_indices=(0, 1, 2, 3),\n        dilations=(1, 1, 2, 4),\n        strides=(1, 2, 1, 1),\n        norm_cfg=dict(type='SyncBN', requires_grad=True),\n        norm_eval=False,\n        style='pytorch',\n        contract_dilation=True,\n        pretrained='open-mmlab://resnet50_v1c'),\n    decode_head=dict(\n        type='DepthwiseSeparableASPPHead',\n        in_channels=2048,\n        in_index=3,\n        channels=512,\n        dilations=(1, 12, 24, 36),\n        c1_in_channels=256,\n        c1_channels=48,\n        dropout_ratio=0.1,\n        num_classes=19,\n        norm_cfg=dict(type='SyncBN', requires_grad=True),\n        align_corners=False,\n        loss_decode=dict(\n            type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0)),\n    auxiliary_head=dict(\n        type='FCNHead',\n        in_channels=1024,\n        in_index=2,\n        channels=256,\n        num_convs=1,\n        concat_input=False,\n        dropout_ratio=0.1,\n        num_classes=19,\n        norm_cfg=dict(type='SyncBN', requires_grad=True),\n        align_corners=False,\n        loss_decode=dict(\n            type='CrossEntropyLoss', use_sigmoid=False, loss_weight=0.4)),\n    train_cfg=dict(),\n    test_cfg=dict(mode='whole'))\ndataset_type = 'CityscapesDataset'\ndata_root = 'data/cityscapes/'\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ncrop_size = (512, 1024)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations'),\n    dict(type='Resize', img_scale=(2048, 1024), ratio_range=(0.5, 2.0)),\n    dict(type='RandomCrop', crop_size=(512, 1024), cat_max_ratio=0.75),\n    dict(type='RandomFlip', prob=0.5),\n    dict(type='PhotoMetricDistortion'),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='Pad', size=(512, 1024), pad_val=0, seg_pad_val=255),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_semantic_seg'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(2048, 1024),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=2,\n    workers_per_gpu=2,\n    train=dict(\n        type='CityscapesDataset',\n        data_root='data/cityscapes/',\n        img_dir='leftImg8bit/train',\n        ann_dir='gtFine/train',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations'),\n            dict(\n                type='Resize', img_scale=(2048, 1024), ratio_range=(0.5, 2.0)),\n            dict(type='RandomCrop', crop_size=(512, 1024), cat_max_ratio=0.75),\n            dict(type='RandomFlip', prob=0.5),\n            dict(type='PhotoMetricDistortion'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size=(512, 1024), pad_val=0, seg_pad_val=255),\n            dict(type='DefaultFormatBundle'),\n            dict(type='Collect', keys=['img', 'gt_semantic_seg'])\n        ]),\n    val=dict(\n        type='CityscapesDataset',\n        data_root='data/cityscapes/',\n        img_dir='leftImg8bit/val',\n        ann_dir='gtFine/val',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(2048, 1024),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]),\n    test=dict(\n        type='CityscapesDataset',\n        data_root='data/cityscapes/',\n        img_dir='leftImg8bit/val',\n        ann_dir='gtFine/val',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(2048, 1024),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]))\nlog_config = dict(\n    interval=50, hooks=[dict(type='TextLoggerHook', by_epoch=False)])\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = None\nresume_from = None\nworkflow = [('train', 1)]\ncudnn_benchmark = True\noptimizer = dict(type='SGD', lr=0.01, momentum=0.9, weight_decay=0.0005)\noptimizer_config = dict()\nlr_config = dict(policy='poly', power=0.9, min_lr=0.0001, by_epoch=False)\nrunner = dict(type='IterBasedRunner', max_iters=2000)\ncheckpoint_config = dict(by_epoch=False, interval=8000)\nevaluation = dict(interval=8000, metric='mIoU')\nwork_dir = 'work_dirs_1node_1gpu/deeplabv3plus_r50-d8_512x1024_2k_cityscapes'\ngpu_ids = range(0, 1)\nseed = None\n", "CLASSES": ["road", "sidewalk", "building", "wall", "fence", "pole", "traffic light", "traffic sign", "vegetation", "terrain", "sky", "person", "rider", "car", "truck", "bus", "train", "motorcycle", "bicycle"], "PALETTE": [[128, 64, 128], [244, 35, 232], [70, 70, 70], [102, 102, 156], [190, 153, 153], [153, 153, 153], [250, 170, 30], [220, 220, 0], [107, 142, 35], [152, 251, 152], [70, 130, 180], [220, 20, 60], [255, 0, 0], [0, 0, 142], [0, 0, 70], [0, 60, 100], [0, 80, 100], [0, 0, 230], [119, 11, 32]]}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 0.00978, "memory": 18769, "data_time": 0.03961, "decode.loss_seg": 1.84882, "decode.acc_seg": 35.61731, "aux.loss_seg": 0.77406, "aux.acc_seg": 35.56178, "loss": 2.62288, "time": 0.68397}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 0.00956, "memory": 18769, "data_time": 0.0201, "decode.loss_seg": 1.57352, "decode.acc_seg": 48.85888, "aux.loss_seg": 0.66221, "aux.acc_seg": 46.52888, "loss": 2.23573, "time": 0.51822}
{"mode": "train", "epoch": 1, "iter": 150, "lr": 0.00933, "memory": 18769, "data_time": 0.01039, "decode.loss_seg": 1.72935, "decode.acc_seg": 41.411, "aux.loss_seg": 0.7105, "aux.acc_seg": 38.7089, "loss": 2.43985, "time": 0.49463}
{"mode": "train", "epoch": 1, "iter": 200, "lr": 0.00911, "memory": 18769, "data_time": 0.01437, "decode.loss_seg": 1.69635, "decode.acc_seg": 40.71823, "aux.loss_seg": 0.7159, "aux.acc_seg": 35.77927, "loss": 2.41226, "time": 0.51007}
{"mode": "train", "epoch": 1, "iter": 250, "lr": 0.00888, "memory": 18769, "data_time": 0.02279, "decode.loss_seg": 1.68479, "decode.acc_seg": 41.8065, "aux.loss_seg": 0.67068, "aux.acc_seg": 39.70035, "loss": 2.35546, "time": 0.50639}
{"mode": "train", "epoch": 1, "iter": 300, "lr": 0.00866, "memory": 18769, "data_time": 0.01606, "decode.loss_seg": 1.76807, "decode.acc_seg": 43.96753, "aux.loss_seg": 0.71842, "aux.acc_seg": 40.10868, "loss": 2.48649, "time": 0.50392}
{"mode": "train", "epoch": 1, "iter": 350, "lr": 0.00843, "memory": 18769, "data_time": 0.01129, "decode.loss_seg": 1.62185, "decode.acc_seg": 44.64109, "aux.loss_seg": 0.66156, "aux.acc_seg": 41.49956, "loss": 2.28341, "time": 0.49431}
{"mode": "train", "epoch": 1, "iter": 400, "lr": 0.0082, "memory": 18769, "data_time": 0.01426, "decode.loss_seg": 1.47537, "decode.acc_seg": 47.0698, "aux.loss_seg": 0.62481, "aux.acc_seg": 43.20422, "loss": 2.10018, "time": 0.50492}
{"mode": "train", "epoch": 1, "iter": 450, "lr": 0.00798, "memory": 18769, "data_time": 0.01125, "decode.loss_seg": 1.528, "decode.acc_seg": 46.13466, "aux.loss_seg": 0.65165, "aux.acc_seg": 42.29558, "loss": 2.17965, "time": 0.50999}
{"mode": "train", "epoch": 1, "iter": 500, "lr": 0.00775, "memory": 18769, "data_time": 0.01249, "decode.loss_seg": 1.50439, "decode.acc_seg": 47.66514, "aux.loss_seg": 0.65479, "aux.acc_seg": 41.81766, "loss": 2.15918, "time": 0.48457}
{"mode": "train", "epoch": 1, "iter": 550, "lr": 0.00752, "memory": 18769, "data_time": 0.01033, "decode.loss_seg": 1.49113, "decode.acc_seg": 50.02723, "aux.loss_seg": 0.66346, "aux.acc_seg": 42.65443, "loss": 2.15459, "time": 0.5206}
{"mode": "train", "epoch": 1, "iter": 600, "lr": 0.00729, "memory": 18769, "data_time": 0.0135, "decode.loss_seg": 1.423, "decode.acc_seg": 50.13902, "aux.loss_seg": 0.63662, "aux.acc_seg": 43.97236, "loss": 2.05962, "time": 0.49813}
{"mode": "train", "epoch": 1, "iter": 650, "lr": 0.00706, "memory": 18769, "data_time": 0.01181, "decode.loss_seg": 1.50855, "decode.acc_seg": 46.94888, "aux.loss_seg": 0.65056, "aux.acc_seg": 41.85259, "loss": 2.15911, "time": 0.4995}
{"mode": "train", "epoch": 1, "iter": 700, "lr": 0.00682, "memory": 18769, "data_time": 0.0127, "decode.loss_seg": 1.42722, "decode.acc_seg": 51.8669, "aux.loss_seg": 0.64073, "aux.acc_seg": 45.06935, "loss": 2.06795, "time": 0.52955}
{"mode": "train", "epoch": 1, "iter": 750, "lr": 0.00659, "memory": 18769, "data_time": 0.01482, "decode.loss_seg": 1.34418, "decode.acc_seg": 49.02984, "aux.loss_seg": 0.59717, "aux.acc_seg": 44.22863, "loss": 1.94135, "time": 0.52143}
{"mode": "train", "epoch": 1, "iter": 800, "lr": 0.00636, "memory": 18769, "data_time": 0.0143, "decode.loss_seg": 1.31661, "decode.acc_seg": 51.93788, "aux.loss_seg": 0.60044, "aux.acc_seg": 46.47299, "loss": 1.91705, "time": 0.52861}
{"mode": "train", "epoch": 1, "iter": 850, "lr": 0.00612, "memory": 18769, "data_time": 0.01166, "decode.loss_seg": 1.31816, "decode.acc_seg": 52.47212, "aux.loss_seg": 0.58269, "aux.acc_seg": 48.91834, "loss": 1.90085, "time": 0.49847}
{"mode": "train", "epoch": 1, "iter": 900, "lr": 0.00589, "memory": 18769, "data_time": 0.01611, "decode.loss_seg": 1.33791, "decode.acc_seg": 52.16342, "aux.loss_seg": 0.60635, "aux.acc_seg": 45.76081, "loss": 1.94426, "time": 0.52908}
{"mode": "train", "epoch": 1, "iter": 950, "lr": 0.00565, "memory": 18769, "data_time": 0.01159, "decode.loss_seg": 1.3992, "decode.acc_seg": 49.76142, "aux.loss_seg": 0.61426, "aux.acc_seg": 45.34037, "loss": 2.01346, "time": 0.52274}
{"mode": "train", "epoch": 1, "iter": 1000, "lr": 0.00541, "memory": 18769, "data_time": 0.0251, "decode.loss_seg": 1.47494, "decode.acc_seg": 49.34277, "aux.loss_seg": 0.63019, "aux.acc_seg": 44.88297, "loss": 2.10513, "time": 0.54098}
{"mode": "train", "epoch": 1, "iter": 1050, "lr": 0.00517, "memory": 18769, "data_time": 0.01793, "decode.loss_seg": 1.23908, "decode.acc_seg": 55.39387, "aux.loss_seg": 0.57212, "aux.acc_seg": 49.66211, "loss": 1.81119, "time": 0.55213}
{"mode": "train", "epoch": 1, "iter": 1100, "lr": 0.00493, "memory": 18769, "data_time": 0.00774, "decode.loss_seg": 1.37343, "decode.acc_seg": 51.4733, "aux.loss_seg": 0.62553, "aux.acc_seg": 45.21187, "loss": 1.99897, "time": 0.50872}
{"mode": "train", "epoch": 1, "iter": 1150, "lr": 0.00469, "memory": 18769, "data_time": 0.03051, "decode.loss_seg": 1.33832, "decode.acc_seg": 52.60376, "aux.loss_seg": 0.58614, "aux.acc_seg": 48.79822, "loss": 1.92446, "time": 0.53005}
{"mode": "train", "epoch": 1, "iter": 1200, "lr": 0.00444, "memory": 18769, "data_time": 0.02158, "decode.loss_seg": 1.30414, "decode.acc_seg": 55.37069, "aux.loss_seg": 0.5994, "aux.acc_seg": 49.62463, "loss": 1.90354, "time": 0.51435}
{"mode": "train", "epoch": 1, "iter": 1250, "lr": 0.0042, "memory": 18769, "data_time": 0.01382, "decode.loss_seg": 1.25992, "decode.acc_seg": 54.61439, "aux.loss_seg": 0.58051, "aux.acc_seg": 49.21105, "loss": 1.84042, "time": 0.50565}
{"mode": "train", "epoch": 1, "iter": 1300, "lr": 0.00395, "memory": 18769, "data_time": 0.0122, "decode.loss_seg": 1.24435, "decode.acc_seg": 54.52174, "aux.loss_seg": 0.56729, "aux.acc_seg": 48.66773, "loss": 1.81165, "time": 0.50517}
{"mode": "train", "epoch": 1, "iter": 1350, "lr": 0.00371, "memory": 18769, "data_time": 0.01794, "decode.loss_seg": 1.15025, "decode.acc_seg": 57.41556, "aux.loss_seg": 0.52962, "aux.acc_seg": 51.27955, "loss": 1.67987, "time": 0.50361}
{"mode": "train", "epoch": 1, "iter": 1400, "lr": 0.00346, "memory": 18769, "data_time": 0.0211, "decode.loss_seg": 1.10227, "decode.acc_seg": 59.69379, "aux.loss_seg": 0.51772, "aux.acc_seg": 53.88592, "loss": 1.61999, "time": 0.52101}
{"mode": "train", "epoch": 1, "iter": 1450, "lr": 0.0032, "memory": 18769, "data_time": 0.01101, "decode.loss_seg": 1.13102, "decode.acc_seg": 56.97171, "aux.loss_seg": 0.51728, "aux.acc_seg": 52.00829, "loss": 1.6483, "time": 0.48399}
{"mode": "train", "epoch": 2, "iter": 1500, "lr": 0.00295, "memory": 18769, "data_time": 0.02999, "decode.loss_seg": 1.23111, "decode.acc_seg": 57.76397, "aux.loss_seg": 0.56508, "aux.acc_seg": 51.40044, "loss": 1.79619, "time": 0.51264}
{"mode": "train", "epoch": 2, "iter": 1550, "lr": 0.00269, "memory": 18769, "data_time": 0.02435, "decode.loss_seg": 1.25922, "decode.acc_seg": 56.2947, "aux.loss_seg": 0.56629, "aux.acc_seg": 52.06763, "loss": 1.82551, "time": 0.66115}
{"mode": "train", "epoch": 2, "iter": 1600, "lr": 0.00243, "memory": 18769, "data_time": 0.00983, "decode.loss_seg": 1.13308, "decode.acc_seg": 58.87146, "aux.loss_seg": 0.53167, "aux.acc_seg": 52.5383, "loss": 1.66475, "time": 0.48429}
{"mode": "train", "epoch": 2, "iter": 1650, "lr": 0.00217, "memory": 18769, "data_time": 0.02193, "decode.loss_seg": 1.14169, "decode.acc_seg": 58.65532, "aux.loss_seg": 0.53677, "aux.acc_seg": 52.9023, "loss": 1.67846, "time": 0.6444}
{"mode": "train", "epoch": 2, "iter": 1700, "lr": 0.0019, "memory": 18769, "data_time": 0.01087, "decode.loss_seg": 1.13683, "decode.acc_seg": 59.77684, "aux.loss_seg": 0.52932, "aux.acc_seg": 53.75648, "loss": 1.66615, "time": 0.48115}
{"mode": "train", "epoch": 2, "iter": 1750, "lr": 0.00163, "memory": 18769, "data_time": 0.05951, "decode.loss_seg": 1.0233, "decode.acc_seg": 62.63567, "aux.loss_seg": 0.50237, "aux.acc_seg": 55.46251, "loss": 1.52568, "time": 0.73604}
{"mode": "train", "epoch": 2, "iter": 1800, "lr": 0.00135, "memory": 18769, "data_time": 0.01367, "decode.loss_seg": 1.07277, "decode.acc_seg": 61.37557, "aux.loss_seg": 0.50587, "aux.acc_seg": 55.2378, "loss": 1.57865, "time": 0.60347}
{"mode": "train", "epoch": 2, "iter": 1850, "lr": 0.00107, "memory": 18769, "data_time": 0.0159, "decode.loss_seg": 1.04435, "decode.acc_seg": 61.6978, "aux.loss_seg": 0.49904, "aux.acc_seg": 55.68909, "loss": 1.54339, "time": 0.61055}
{"mode": "train", "epoch": 2, "iter": 1900, "lr": 0.00077, "memory": 18769, "data_time": 0.01393, "decode.loss_seg": 1.08445, "decode.acc_seg": 61.21166, "aux.loss_seg": 0.517, "aux.acc_seg": 54.9918, "loss": 1.60146, "time": 0.53148}
{"mode": "train", "epoch": 2, "iter": 1950, "lr": 0.00046, "memory": 18769, "data_time": 0.01142, "decode.loss_seg": 1.16959, "decode.acc_seg": 58.001, "aux.loss_seg": 0.55192, "aux.acc_seg": 51.90164, "loss": 1.72152, "time": 0.50271}
{"mode": "train", "epoch": 2, "iter": 2000, "lr": 0.00011, "memory": 18769, "data_time": 0.01191, "decode.loss_seg": 1.09376, "decode.acc_seg": 59.23017, "aux.loss_seg": 0.50797, "aux.acc_seg": 55.15888, "loss": 1.60173, "time": 0.49938}
