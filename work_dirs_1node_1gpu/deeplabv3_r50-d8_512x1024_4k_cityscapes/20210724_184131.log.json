{"env_info": "sys.platform: linux\nPython: 3.7.10 (default, Feb 26 2021, 18:47:35) [GCC 7.3.0]\nCUDA available: True\nGPU 0: Tesla V100-SXM2-32GB\nCUDA_HOME: /mnt/cache/share/polaris/dep/cuda-10.1-cudnn7.6.5\nNVCC: Cuda compilation tools, release 10.1, V10.1.243\nGCC: gcc (GCC) 5.4.0\nPyTorch: 1.8.0\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) Math Kernel Library Version 2020.0.2 Product Build 20200624 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v1.7.0 (Git Hash 7aed236906b1f7a05c0917e5257a1af05e9ff683)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 10.1\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_37,code=compute_37\n  - CuDNN 7.6.3\n  - Magma 2.5.2\n  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=10.1, CUDNN_VERSION=7.6.3, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.8.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, \n\nTorchVision: 0.9.0\nOpenCV: 4.5.1\nMMCV: 1.3.8\nMMCV Compiler: GCC 7.3\nMMCV CUDA Compiler: 10.1\nMMSegmentation: 0.15.0+4d34581", "seed": null, "exp_name": "deeplabv3_r50-d8_512x1024_4k_cityscapes.py", "mmseg_version": "0.15.0+4d34581", "config": "norm_cfg = dict(type='SyncBN', requires_grad=True)\nmodel = dict(\n    type='EncoderDecoder',\n    pretrained='open-mmlab://resnet50_v1c',\n    backbone=dict(\n        type='ResNetV1c',\n        depth=50,\n        num_stages=4,\n        out_indices=(0, 1, 2, 3),\n        dilations=(1, 1, 2, 4),\n        strides=(1, 2, 1, 1),\n        norm_cfg=dict(type='SyncBN', requires_grad=True),\n        norm_eval=False,\n        style='pytorch',\n        contract_dilation=True,\n        pretrained='open-mmlab://resnet50_v1c'),\n    decode_head=dict(\n        type='ASPPHead',\n        in_channels=2048,\n        in_index=3,\n        channels=512,\n        dilations=(1, 12, 24, 36),\n        dropout_ratio=0.1,\n        num_classes=19,\n        norm_cfg=dict(type='SyncBN', requires_grad=True),\n        align_corners=False,\n        loss_decode=dict(\n            type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0)),\n    auxiliary_head=dict(\n        type='FCNHead',\n        in_channels=1024,\n        in_index=2,\n        channels=256,\n        num_convs=1,\n        concat_input=False,\n        dropout_ratio=0.1,\n        num_classes=19,\n        norm_cfg=dict(type='SyncBN', requires_grad=True),\n        align_corners=False,\n        loss_decode=dict(\n            type='CrossEntropyLoss', use_sigmoid=False, loss_weight=0.4)),\n    train_cfg=dict(),\n    test_cfg=dict(mode='whole'))\ndataset_type = 'CityscapesDataset'\ndata_root = 'data/cityscapes/'\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ncrop_size = (512, 1024)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations'),\n    dict(type='Resize', img_scale=(2048, 1024), ratio_range=(0.5, 2.0)),\n    dict(type='RandomCrop', crop_size=(512, 1024), cat_max_ratio=0.75),\n    dict(type='RandomFlip', prob=0.5),\n    dict(type='PhotoMetricDistortion'),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='Pad', size=(512, 1024), pad_val=0, seg_pad_val=255),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_semantic_seg'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(2048, 1024),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=2,\n    workers_per_gpu=2,\n    train=dict(\n        type='CityscapesDataset',\n        data_root='data/cityscapes/',\n        img_dir='leftImg8bit/train',\n        ann_dir='gtFine/train',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations'),\n            dict(\n                type='Resize', img_scale=(2048, 1024), ratio_range=(0.5, 2.0)),\n            dict(type='RandomCrop', crop_size=(512, 1024), cat_max_ratio=0.75),\n            dict(type='RandomFlip', prob=0.5),\n            dict(type='PhotoMetricDistortion'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size=(512, 1024), pad_val=0, seg_pad_val=255),\n            dict(type='DefaultFormatBundle'),\n            dict(type='Collect', keys=['img', 'gt_semantic_seg'])\n        ]),\n    val=dict(\n        type='CityscapesDataset',\n        data_root='data/cityscapes/',\n        img_dir='leftImg8bit/val',\n        ann_dir='gtFine/val',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(2048, 1024),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]),\n    test=dict(\n        type='CityscapesDataset',\n        data_root='data/cityscapes/',\n        img_dir='leftImg8bit/val',\n        ann_dir='gtFine/val',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(2048, 1024),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]))\nlog_config = dict(\n    interval=50, hooks=[dict(type='TextLoggerHook', by_epoch=False)])\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = None\nresume_from = None\nworkflow = [('train', 1)]\ncudnn_benchmark = True\noptimizer = dict(type='SGD', lr=0.01, momentum=0.9, weight_decay=0.0005)\noptimizer_config = dict()\nlr_config = dict(policy='poly', power=0.9, min_lr=0.0001, by_epoch=False)\nrunner = dict(type='IterBasedRunner', max_iters=4000)\ncheckpoint_config = dict(by_epoch=False, interval=2000)\nevaluation = dict(interval=2000, metric='mIoU')\nwork_dir = 'work_dirs_1node_1gpu/deeplabv3_r50-d8_512x1024_4k_cityscapes'\ngpu_ids = range(0, 1)\nseed = None\n", "CLASSES": ["road", "sidewalk", "building", "wall", "fence", "pole", "traffic light", "traffic sign", "vegetation", "terrain", "sky", "person", "rider", "car", "truck", "bus", "train", "motorcycle", "bicycle"], "PALETTE": [[128, 64, 128], [244, 35, 232], [70, 70, 70], [102, 102, 156], [190, 153, 153], [153, 153, 153], [250, 170, 30], [220, 220, 0], [107, 142, 35], [152, 251, 152], [70, 130, 180], [220, 20, 60], [255, 0, 0], [0, 0, 142], [0, 0, 70], [0, 60, 100], [0, 80, 100], [0, 0, 230], [119, 11, 32]]}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 0.00989, "memory": 18984, "data_time": 0.05281, "decode.loss_seg": 1.9512, "decode.acc_seg": 33.56909, "aux.loss_seg": 0.82715, "aux.acc_seg": 31.05947, "loss": 2.77835, "time": 0.91913}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 0.00978, "memory": 18984, "data_time": 0.00917, "decode.loss_seg": 1.60509, "decode.acc_seg": 44.52302, "aux.loss_seg": 0.64958, "aux.acc_seg": 42.55362, "loss": 2.25467, "time": 0.64646}
{"mode": "train", "epoch": 1, "iter": 150, "lr": 0.00967, "memory": 18984, "data_time": 0.02417, "decode.loss_seg": 1.91424, "decode.acc_seg": 36.01489, "aux.loss_seg": 0.70402, "aux.acc_seg": 40.52875, "loss": 2.61826, "time": 0.71244}
{"mode": "train", "epoch": 1, "iter": 200, "lr": 0.00956, "memory": 18984, "data_time": 0.01212, "decode.loss_seg": 1.70861, "decode.acc_seg": 43.03628, "aux.loss_seg": 0.6534, "aux.acc_seg": 45.44312, "loss": 2.362, "time": 0.63208}
{"mode": "train", "epoch": 1, "iter": 250, "lr": 0.00944, "memory": 18984, "data_time": 0.01972, "decode.loss_seg": 1.67837, "decode.acc_seg": 42.20051, "aux.loss_seg": 0.65186, "aux.acc_seg": 43.63957, "loss": 2.33023, "time": 0.79263}
{"mode": "train", "epoch": 1, "iter": 300, "lr": 0.00933, "memory": 18984, "data_time": 0.01785, "decode.loss_seg": 1.5688, "decode.acc_seg": 48.66019, "aux.loss_seg": 0.63539, "aux.acc_seg": 47.85887, "loss": 2.20418, "time": 0.8185}
{"mode": "train", "epoch": 1, "iter": 350, "lr": 0.00922, "memory": 18984, "data_time": 0.06493, "decode.loss_seg": 1.74626, "decode.acc_seg": 42.62667, "aux.loss_seg": 0.63977, "aux.acc_seg": 46.01539, "loss": 2.38603, "time": 0.82185}
{"mode": "train", "epoch": 1, "iter": 400, "lr": 0.00911, "memory": 18984, "data_time": 0.03056, "decode.loss_seg": 1.7511, "decode.acc_seg": 38.95747, "aux.loss_seg": 0.65855, "aux.acc_seg": 40.84994, "loss": 2.40966, "time": 0.78755}
{"mode": "train", "epoch": 1, "iter": 450, "lr": 0.00899, "memory": 18984, "data_time": 0.03072, "decode.loss_seg": 1.5797, "decode.acc_seg": 44.23854, "aux.loss_seg": 0.63183, "aux.acc_seg": 43.41659, "loss": 2.21153, "time": 0.79738}
{"mode": "train", "epoch": 1, "iter": 500, "lr": 0.00888, "memory": 18984, "data_time": 0.01127, "decode.loss_seg": 1.46277, "decode.acc_seg": 47.46491, "aux.loss_seg": 0.61302, "aux.acc_seg": 45.91155, "loss": 2.07578, "time": 0.64275}
{"mode": "train", "epoch": 1, "iter": 550, "lr": 0.00877, "memory": 18984, "data_time": 0.01858, "decode.loss_seg": 1.57255, "decode.acc_seg": 46.72512, "aux.loss_seg": 0.63996, "aux.acc_seg": 44.70522, "loss": 2.21251, "time": 0.66403}
{"mode": "train", "epoch": 1, "iter": 600, "lr": 0.00866, "memory": 18984, "data_time": 0.0164, "decode.loss_seg": 1.45185, "decode.acc_seg": 49.12392, "aux.loss_seg": 0.62749, "aux.acc_seg": 44.99483, "loss": 2.07934, "time": 0.66751}
{"mode": "train", "epoch": 1, "iter": 650, "lr": 0.00854, "memory": 18984, "data_time": 0.01329, "decode.loss_seg": 1.43835, "decode.acc_seg": 49.90532, "aux.loss_seg": 0.61005, "aux.acc_seg": 46.98167, "loss": 2.0484, "time": 0.65943}
{"mode": "train", "epoch": 1, "iter": 700, "lr": 0.00843, "memory": 18984, "data_time": 0.02366, "decode.loss_seg": 1.43865, "decode.acc_seg": 50.32756, "aux.loss_seg": 0.60663, "aux.acc_seg": 48.55907, "loss": 2.04528, "time": 0.66939}
{"mode": "train", "epoch": 1, "iter": 750, "lr": 0.00831, "memory": 18984, "data_time": 0.02992, "decode.loss_seg": 1.40997, "decode.acc_seg": 48.68422, "aux.loss_seg": 0.60387, "aux.acc_seg": 45.89146, "loss": 2.01385, "time": 0.66334}
{"mode": "train", "epoch": 1, "iter": 800, "lr": 0.0082, "memory": 18984, "data_time": 0.02308, "decode.loss_seg": 1.52917, "decode.acc_seg": 45.79585, "aux.loss_seg": 0.64612, "aux.acc_seg": 43.6074, "loss": 2.1753, "time": 0.66615}
{"mode": "train", "epoch": 1, "iter": 850, "lr": 0.00809, "memory": 18984, "data_time": 0.01995, "decode.loss_seg": 1.38857, "decode.acc_seg": 52.38486, "aux.loss_seg": 0.59669, "aux.acc_seg": 48.96397, "loss": 1.98526, "time": 0.65741}
{"mode": "train", "epoch": 1, "iter": 900, "lr": 0.00797, "memory": 18984, "data_time": 0.01063, "decode.loss_seg": 1.46142, "decode.acc_seg": 47.62277, "aux.loss_seg": 0.62677, "aux.acc_seg": 44.46455, "loss": 2.08818, "time": 0.67528}
{"mode": "train", "epoch": 1, "iter": 950, "lr": 0.00786, "memory": 18984, "data_time": 0.01936, "decode.loss_seg": 1.42087, "decode.acc_seg": 47.7003, "aux.loss_seg": 0.60863, "aux.acc_seg": 45.88935, "loss": 2.0295, "time": 0.68976}
{"mode": "train", "epoch": 1, "iter": 1000, "lr": 0.00774, "memory": 18984, "data_time": 0.00791, "decode.loss_seg": 1.36967, "decode.acc_seg": 53.3438, "aux.loss_seg": 0.60414, "aux.acc_seg": 49.76716, "loss": 1.97381, "time": 0.64383}
{"mode": "train", "epoch": 1, "iter": 1050, "lr": 0.00763, "memory": 18984, "data_time": 0.02625, "decode.loss_seg": 1.32465, "decode.acc_seg": 53.97478, "aux.loss_seg": 0.588, "aux.acc_seg": 49.60533, "loss": 1.91265, "time": 0.68887}
{"mode": "train", "epoch": 1, "iter": 1100, "lr": 0.00751, "memory": 18984, "data_time": 0.01586, "decode.loss_seg": 1.29382, "decode.acc_seg": 55.9582, "aux.loss_seg": 0.55813, "aux.acc_seg": 52.40873, "loss": 1.85195, "time": 0.66146}
{"mode": "train", "epoch": 1, "iter": 1150, "lr": 0.0074, "memory": 18984, "data_time": 0.0113, "decode.loss_seg": 1.22764, "decode.acc_seg": 55.14787, "aux.loss_seg": 0.55731, "aux.acc_seg": 50.88907, "loss": 1.78495, "time": 0.67337}
{"mode": "train", "epoch": 1, "iter": 1200, "lr": 0.00728, "memory": 18984, "data_time": 0.00756, "decode.loss_seg": 1.36368, "decode.acc_seg": 51.70976, "aux.loss_seg": 0.59307, "aux.acc_seg": 47.65109, "loss": 1.95675, "time": 0.68121}
{"mode": "train", "epoch": 1, "iter": 1250, "lr": 0.00717, "memory": 18984, "data_time": 0.0194, "decode.loss_seg": 1.19269, "decode.acc_seg": 56.15609, "aux.loss_seg": 0.53279, "aux.acc_seg": 52.96015, "loss": 1.72548, "time": 0.68281}
{"mode": "train", "epoch": 1, "iter": 1300, "lr": 0.00705, "memory": 18984, "data_time": 0.02747, "decode.loss_seg": 1.17499, "decode.acc_seg": 54.21146, "aux.loss_seg": 0.53573, "aux.acc_seg": 50.01351, "loss": 1.71071, "time": 0.68994}
{"mode": "train", "epoch": 1, "iter": 1350, "lr": 0.00694, "memory": 18984, "data_time": 0.00786, "decode.loss_seg": 1.32879, "decode.acc_seg": 52.57819, "aux.loss_seg": 0.5861, "aux.acc_seg": 48.64013, "loss": 1.91489, "time": 0.66977}
{"mode": "train", "epoch": 1, "iter": 1400, "lr": 0.00682, "memory": 18984, "data_time": 0.01658, "decode.loss_seg": 1.19939, "decode.acc_seg": 56.08248, "aux.loss_seg": 0.54725, "aux.acc_seg": 50.76715, "loss": 1.74664, "time": 0.66042}
{"mode": "train", "epoch": 1, "iter": 1450, "lr": 0.0067, "memory": 18984, "data_time": 0.01912, "decode.loss_seg": 1.18903, "decode.acc_seg": 56.97286, "aux.loss_seg": 0.5238, "aux.acc_seg": 53.46293, "loss": 1.71283, "time": 0.6558}
{"mode": "train", "epoch": 2, "iter": 1500, "lr": 0.00659, "memory": 18984, "data_time": 0.03221, "decode.loss_seg": 1.24481, "decode.acc_seg": 56.84868, "aux.loss_seg": 0.5496, "aux.acc_seg": 52.96809, "loss": 1.79441, "time": 0.67599}
{"mode": "train", "epoch": 2, "iter": 1550, "lr": 0.00647, "memory": 18984, "data_time": 0.02338, "decode.loss_seg": 1.15898, "decode.acc_seg": 57.91122, "aux.loss_seg": 0.52069, "aux.acc_seg": 53.74514, "loss": 1.67967, "time": 0.68964}
{"mode": "train", "epoch": 2, "iter": 1600, "lr": 0.00635, "memory": 18984, "data_time": 0.03504, "decode.loss_seg": 1.18, "decode.acc_seg": 58.17572, "aux.loss_seg": 0.51833, "aux.acc_seg": 54.98962, "loss": 1.69832, "time": 0.6935}
{"mode": "train", "epoch": 2, "iter": 1650, "lr": 0.00624, "memory": 18984, "data_time": 0.01251, "decode.loss_seg": 1.16975, "decode.acc_seg": 60.68853, "aux.loss_seg": 0.53311, "aux.acc_seg": 55.79379, "loss": 1.70286, "time": 0.65385}
{"mode": "train", "epoch": 2, "iter": 1700, "lr": 0.00612, "memory": 18984, "data_time": 0.03996, "decode.loss_seg": 1.23718, "decode.acc_seg": 56.50087, "aux.loss_seg": 0.55632, "aux.acc_seg": 52.61115, "loss": 1.79349, "time": 0.72378}
{"mode": "train", "epoch": 2, "iter": 1750, "lr": 0.006, "memory": 18984, "data_time": 0.01154, "decode.loss_seg": 1.19549, "decode.acc_seg": 55.57106, "aux.loss_seg": 0.5353, "aux.acc_seg": 51.79308, "loss": 1.73079, "time": 0.66772}
{"mode": "train", "epoch": 2, "iter": 1800, "lr": 0.00588, "memory": 18984, "data_time": 0.02034, "decode.loss_seg": 1.18541, "decode.acc_seg": 54.83703, "aux.loss_seg": 0.52337, "aux.acc_seg": 52.31074, "loss": 1.70878, "time": 0.66525}
{"mode": "train", "epoch": 2, "iter": 1850, "lr": 0.00576, "memory": 18984, "data_time": 0.02317, "decode.loss_seg": 1.25749, "decode.acc_seg": 55.43678, "aux.loss_seg": 0.55942, "aux.acc_seg": 51.29133, "loss": 1.81691, "time": 0.70471}
{"mode": "train", "epoch": 2, "iter": 1900, "lr": 0.00565, "memory": 18984, "data_time": 0.0143, "decode.loss_seg": 1.1606, "decode.acc_seg": 56.92915, "aux.loss_seg": 0.52222, "aux.acc_seg": 52.86053, "loss": 1.68282, "time": 0.6461}
{"mode": "train", "epoch": 2, "iter": 1950, "lr": 0.00553, "memory": 18984, "data_time": 0.03847, "decode.loss_seg": 1.25809, "decode.acc_seg": 54.6207, "aux.loss_seg": 0.56105, "aux.acc_seg": 50.40411, "loss": 1.81913, "time": 0.80904}
{"mode": "train", "epoch": 2, "iter": 500, "lr": 0.00541, "memory": 18984, "aAcc": 0.7232, "mIoU": 0.1542, "mAcc": 0.2178, "IoU.road": 0.8042, "IoU.sidewalk": 0.1033, "IoU.building": 0.5369, "IoU.wall": 0.0, "IoU.fence": 0.0, "IoU.pole": 0.0172, "IoU.traffic light": 0.0, "IoU.traffic sign": 0.0, "IoU.vegetation": 0.6407, "IoU.terrain": 0.0061, "IoU.sky": 0.4664, "IoU.person": 0.0077, "IoU.rider": 0.0, "IoU.car": 0.3471, "IoU.truck": 0.0, "IoU.bus": 0.0, "IoU.train": 0.0, "IoU.motorcycle": 0.0, "IoU.bicycle": 0.0, "Acc.road": 0.9245, "Acc.sidewalk": 0.1293, "Acc.building": 0.7286, "Acc.wall": 0.0, "Acc.fence": 0.0, "Acc.pole": 0.0179, "Acc.traffic light": 0.0, "Acc.traffic sign": 0.0, "Acc.vegetation": 0.7813, "Acc.terrain": 0.0069, "Acc.sky": 0.8781, "Acc.person": 0.0078, "Acc.rider": 0.0, "Acc.car": 0.6633, "Acc.truck": 0.0, "Acc.bus": 0.0, "Acc.train": 0.0, "Acc.motorcycle": 0.0, "Acc.bicycle": 0.0, "data_time": 0.02124, "decode.loss_seg": 1.21855, "decode.acc_seg": 54.7351, "aux.loss_seg": 0.54189, "aux.acc_seg": 51.28985, "loss": 1.76044, "time": 0.71861}
{"mode": "train", "epoch": 2, "iter": 2050, "lr": 0.00529, "memory": 18984, "data_time": 8.67451, "decode.loss_seg": 1.14118, "decode.acc_seg": 61.37647, "aux.loss_seg": 0.51134, "aux.acc_seg": 56.58506, "loss": 1.65251, "time": 9.43066}
{"mode": "train", "epoch": 2, "iter": 2100, "lr": 0.00517, "memory": 18984, "data_time": 0.03942, "decode.loss_seg": 1.15626, "decode.acc_seg": 59.29284, "aux.loss_seg": 0.52408, "aux.acc_seg": 53.9612, "loss": 1.68033, "time": 1.09098}
{"mode": "train", "epoch": 2, "iter": 2150, "lr": 0.00505, "memory": 18984, "data_time": 0.02122, "decode.loss_seg": 1.18736, "decode.acc_seg": 59.11559, "aux.loss_seg": 0.53361, "aux.acc_seg": 55.41936, "loss": 1.72098, "time": 0.81624}
{"mode": "train", "epoch": 2, "iter": 2200, "lr": 0.00493, "memory": 18984, "data_time": 0.01517, "decode.loss_seg": 1.08699, "decode.acc_seg": 60.15508, "aux.loss_seg": 0.49066, "aux.acc_seg": 56.72786, "loss": 1.57766, "time": 0.76499}
{"mode": "train", "epoch": 2, "iter": 2250, "lr": 0.00481, "memory": 18984, "data_time": 0.03495, "decode.loss_seg": 1.09498, "decode.acc_seg": 60.90545, "aux.loss_seg": 0.50264, "aux.acc_seg": 56.91722, "loss": 1.59761, "time": 0.81906}
{"mode": "train", "epoch": 2, "iter": 2300, "lr": 0.00469, "memory": 18984, "data_time": 0.00875, "decode.loss_seg": 1.11298, "decode.acc_seg": 59.595, "aux.loss_seg": 0.50911, "aux.acc_seg": 55.75959, "loss": 1.62209, "time": 0.82771}
{"mode": "train", "epoch": 2, "iter": 2350, "lr": 0.00456, "memory": 18984, "data_time": 0.0324, "decode.loss_seg": 1.06595, "decode.acc_seg": 61.44604, "aux.loss_seg": 0.50066, "aux.acc_seg": 55.8345, "loss": 1.56661, "time": 0.6694}
{"mode": "train", "epoch": 2, "iter": 2400, "lr": 0.00444, "memory": 18984, "data_time": 0.01052, "decode.loss_seg": 1.08717, "decode.acc_seg": 62.07878, "aux.loss_seg": 0.49079, "aux.acc_seg": 58.07988, "loss": 1.57796, "time": 0.68152}
{"mode": "train", "epoch": 2, "iter": 2450, "lr": 0.00432, "memory": 18984, "data_time": 0.02614, "decode.loss_seg": 1.01767, "decode.acc_seg": 63.76117, "aux.loss_seg": 0.47767, "aux.acc_seg": 58.81725, "loss": 1.49534, "time": 0.69342}
{"mode": "train", "epoch": 2, "iter": 2500, "lr": 0.0042, "memory": 18984, "data_time": 0.01721, "decode.loss_seg": 1.0209, "decode.acc_seg": 60.38802, "aux.loss_seg": 0.47206, "aux.acc_seg": 55.49632, "loss": 1.49296, "time": 0.66058}
{"mode": "train", "epoch": 2, "iter": 2550, "lr": 0.00407, "memory": 18984, "data_time": 0.01253, "decode.loss_seg": 1.02884, "decode.acc_seg": 63.7146, "aux.loss_seg": 0.47511, "aux.acc_seg": 59.83711, "loss": 1.50395, "time": 0.65108}
{"mode": "train", "epoch": 2, "iter": 2600, "lr": 0.00395, "memory": 18984, "data_time": 0.01587, "decode.loss_seg": 1.0292, "decode.acc_seg": 62.00482, "aux.loss_seg": 0.47864, "aux.acc_seg": 57.18503, "loss": 1.50784, "time": 0.69097}
{"mode": "train", "epoch": 2, "iter": 2650, "lr": 0.00383, "memory": 18984, "data_time": 0.01538, "decode.loss_seg": 1.04392, "decode.acc_seg": 63.78925, "aux.loss_seg": 0.49138, "aux.acc_seg": 58.89509, "loss": 1.5353, "time": 0.65635}
{"mode": "train", "epoch": 2, "iter": 2700, "lr": 0.0037, "memory": 18984, "data_time": 0.01001, "decode.loss_seg": 1.16574, "decode.acc_seg": 60.35918, "aux.loss_seg": 0.52509, "aux.acc_seg": 55.9341, "loss": 1.69083, "time": 0.6564}
{"mode": "train", "epoch": 2, "iter": 2750, "lr": 0.00358, "memory": 18984, "data_time": 0.00795, "decode.loss_seg": 0.97515, "decode.acc_seg": 62.95526, "aux.loss_seg": 0.45048, "aux.acc_seg": 58.72845, "loss": 1.42563, "time": 0.6733}
{"mode": "train", "epoch": 2, "iter": 2800, "lr": 0.00345, "memory": 18984, "data_time": 0.02906, "decode.loss_seg": 1.03753, "decode.acc_seg": 60.18911, "aux.loss_seg": 0.47524, "aux.acc_seg": 54.91073, "loss": 1.51277, "time": 0.67721}
{"mode": "train", "epoch": 2, "iter": 2850, "lr": 0.00333, "memory": 18984, "data_time": 0.01298, "decode.loss_seg": 0.96794, "decode.acc_seg": 64.64634, "aux.loss_seg": 0.45138, "aux.acc_seg": 59.88781, "loss": 1.41932, "time": 0.64709}
{"mode": "train", "epoch": 2, "iter": 2900, "lr": 0.0032, "memory": 18984, "data_time": 0.01873, "decode.loss_seg": 1.09042, "decode.acc_seg": 61.79648, "aux.loss_seg": 0.48419, "aux.acc_seg": 59.04339, "loss": 1.57461, "time": 0.66566}
{"mode": "train", "epoch": 2, "iter": 2950, "lr": 0.00307, "memory": 18984, "data_time": 0.02852, "decode.loss_seg": 0.87451, "decode.acc_seg": 66.2189, "aux.loss_seg": 0.41006, "aux.acc_seg": 61.84232, "loss": 1.28457, "time": 0.67068}
{"mode": "train", "epoch": 3, "iter": 3000, "lr": 0.00295, "memory": 18984, "data_time": 0.01809, "decode.loss_seg": 1.05874, "decode.acc_seg": 61.48365, "aux.loss_seg": 0.49146, "aux.acc_seg": 56.86777, "loss": 1.5502, "time": 0.67868}
{"mode": "train", "epoch": 3, "iter": 3050, "lr": 0.00282, "memory": 18984, "data_time": 0.03099, "decode.loss_seg": 1.0181, "decode.acc_seg": 62.49452, "aux.loss_seg": 0.47308, "aux.acc_seg": 58.57843, "loss": 1.49118, "time": 0.69396}
{"mode": "train", "epoch": 3, "iter": 3100, "lr": 0.00269, "memory": 18984, "data_time": 0.00774, "decode.loss_seg": 1.026, "decode.acc_seg": 61.95944, "aux.loss_seg": 0.47175, "aux.acc_seg": 57.91723, "loss": 1.49774, "time": 0.64993}
{"mode": "train", "epoch": 3, "iter": 3150, "lr": 0.00256, "memory": 18984, "data_time": 0.00751, "decode.loss_seg": 0.95435, "decode.acc_seg": 65.79824, "aux.loss_seg": 0.45091, "aux.acc_seg": 59.98491, "loss": 1.40526, "time": 0.66992}
{"mode": "train", "epoch": 3, "iter": 3200, "lr": 0.00243, "memory": 18984, "data_time": 0.02486, "decode.loss_seg": 0.94213, "decode.acc_seg": 64.53119, "aux.loss_seg": 0.44075, "aux.acc_seg": 60.35497, "loss": 1.38289, "time": 0.68154}
{"mode": "train", "epoch": 3, "iter": 3250, "lr": 0.0023, "memory": 18984, "data_time": 0.01937, "decode.loss_seg": 0.97856, "decode.acc_seg": 66.86967, "aux.loss_seg": 0.45154, "aux.acc_seg": 63.09777, "loss": 1.43011, "time": 0.65928}
{"mode": "train", "epoch": 3, "iter": 3300, "lr": 0.00217, "memory": 18984, "data_time": 0.00914, "decode.loss_seg": 0.89465, "decode.acc_seg": 68.73909, "aux.loss_seg": 0.42939, "aux.acc_seg": 64.51558, "loss": 1.32404, "time": 0.68368}
{"mode": "train", "epoch": 3, "iter": 3350, "lr": 0.00203, "memory": 18984, "data_time": 0.03791, "decode.loss_seg": 0.94153, "decode.acc_seg": 63.75215, "aux.loss_seg": 0.43798, "aux.acc_seg": 59.09057, "loss": 1.37951, "time": 0.70414}
{"mode": "train", "epoch": 3, "iter": 3400, "lr": 0.0019, "memory": 18984, "data_time": 0.01646, "decode.loss_seg": 1.03497, "decode.acc_seg": 62.84815, "aux.loss_seg": 0.47485, "aux.acc_seg": 58.20012, "loss": 1.50983, "time": 0.66154}
{"mode": "train", "epoch": 3, "iter": 3450, "lr": 0.00176, "memory": 18984, "data_time": 0.00868, "decode.loss_seg": 0.9798, "decode.acc_seg": 64.46468, "aux.loss_seg": 0.45127, "aux.acc_seg": 60.01164, "loss": 1.43106, "time": 0.68471}
{"mode": "train", "epoch": 3, "iter": 3500, "lr": 0.00163, "memory": 18984, "data_time": 0.01041, "decode.loss_seg": 0.97565, "decode.acc_seg": 64.62329, "aux.loss_seg": 0.4405, "aux.acc_seg": 61.12896, "loss": 1.41616, "time": 0.67484}
{"mode": "train", "epoch": 3, "iter": 3550, "lr": 0.00149, "memory": 18984, "data_time": 0.02306, "decode.loss_seg": 0.90302, "decode.acc_seg": 65.53359, "aux.loss_seg": 0.42137, "aux.acc_seg": 61.32203, "loss": 1.32438, "time": 0.67564}
{"mode": "train", "epoch": 3, "iter": 3600, "lr": 0.00135, "memory": 18984, "data_time": 0.04712, "decode.loss_seg": 0.92975, "decode.acc_seg": 67.25109, "aux.loss_seg": 0.44014, "aux.acc_seg": 62.21344, "loss": 1.3699, "time": 0.68061}
{"mode": "train", "epoch": 3, "iter": 3650, "lr": 0.00121, "memory": 18984, "data_time": 0.01812, "decode.loss_seg": 0.90909, "decode.acc_seg": 68.06927, "aux.loss_seg": 0.43225, "aux.acc_seg": 63.19942, "loss": 1.34134, "time": 0.66409}
{"mode": "train", "epoch": 3, "iter": 3700, "lr": 0.00106, "memory": 18984, "data_time": 0.02477, "decode.loss_seg": 0.86679, "decode.acc_seg": 67.47637, "aux.loss_seg": 0.41136, "aux.acc_seg": 62.69277, "loss": 1.27815, "time": 0.74795}
{"mode": "train", "epoch": 3, "iter": 3750, "lr": 0.00092, "memory": 18984, "data_time": 0.02456, "decode.loss_seg": 0.92478, "decode.acc_seg": 67.7572, "aux.loss_seg": 0.42695, "aux.acc_seg": 63.24874, "loss": 1.35173, "time": 0.73101}
{"mode": "train", "epoch": 3, "iter": 3800, "lr": 0.00077, "memory": 18984, "data_time": 0.01428, "decode.loss_seg": 0.80832, "decode.acc_seg": 69.67994, "aux.loss_seg": 0.37525, "aux.acc_seg": 66.1441, "loss": 1.18356, "time": 0.66216}
{"mode": "train", "epoch": 3, "iter": 3850, "lr": 0.00062, "memory": 18984, "data_time": 0.02739, "decode.loss_seg": 0.96608, "decode.acc_seg": 66.2428, "aux.loss_seg": 0.44736, "aux.acc_seg": 61.96104, "loss": 1.41344, "time": 0.86734}
{"mode": "train", "epoch": 3, "iter": 3900, "lr": 0.00046, "memory": 18984, "data_time": 0.02638, "decode.loss_seg": 0.98996, "decode.acc_seg": 64.77131, "aux.loss_seg": 0.45404, "aux.acc_seg": 60.61168, "loss": 1.44399, "time": 0.8744}
{"mode": "train", "epoch": 3, "iter": 3950, "lr": 0.0003, "memory": 18984, "data_time": 0.01636, "decode.loss_seg": 0.8588, "decode.acc_seg": 67.40872, "aux.loss_seg": 0.40937, "aux.acc_seg": 62.81148, "loss": 1.26817, "time": 0.84741}
{"mode": "train", "epoch": 3, "iter": 500, "lr": 0.00011, "memory": 18984, "aAcc": 0.7833, "mIoU": 0.2048, "mAcc": 0.2723, "IoU.road": 0.8529, "IoU.sidewalk": 0.2966, "IoU.building": 0.6298, "IoU.wall": 0.0, "IoU.fence": 0.0, "IoU.pole": 0.0995, "IoU.traffic light": 0.0, "IoU.traffic sign": 0.0, "IoU.vegetation": 0.7297, "IoU.terrain": 0.1988, "IoU.sky": 0.5975, "IoU.person": 0.0196, "IoU.rider": 0.0, "IoU.car": 0.4675, "IoU.truck": 0.0, "IoU.bus": 0.0, "IoU.train": 0.0, "IoU.motorcycle": 0.0, "IoU.bicycle": 0.0, "Acc.road": 0.9213, "Acc.sidewalk": 0.4246, "Acc.building": 0.7457, "Acc.wall": 0.0, "Acc.fence": 0.0, "Acc.pole": 0.1144, "Acc.traffic light": 0.0, "Acc.traffic sign": 0.0, "Acc.vegetation": 0.912, "Acc.terrain": 0.233, "Acc.sky": 0.924, "Acc.person": 0.0201, "Acc.rider": 0.0, "Acc.car": 0.8782, "Acc.truck": 0.0, "Acc.bus": 0.0, "Acc.train": 0.0, "Acc.motorcycle": 0.0, "Acc.bicycle": 0.0, "data_time": 0.01149, "decode.loss_seg": 0.92752, "decode.acc_seg": 66.75831, "aux.loss_seg": 0.42297, "aux.acc_seg": 63.25012, "loss": 1.35049, "time": 0.75708}
