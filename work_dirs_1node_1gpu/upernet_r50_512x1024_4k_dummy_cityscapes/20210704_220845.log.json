{"env_info": "sys.platform: linux\nPython: 3.7.10 (default, Feb 26 2021, 18:47:35) [GCC 7.3.0]\nCUDA available: True\nGPU 0: Tesla V100-SXM2-32GB\nCUDA_HOME: /mnt/cache/share/polaris/dep/cuda-10.1-cudnn7.6.5\nNVCC: Cuda compilation tools, release 10.1, V10.1.243\nGCC: gcc (GCC) 5.4.0\nPyTorch: 1.8.0\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) Math Kernel Library Version 2020.0.2 Product Build 20200624 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v1.7.0 (Git Hash 7aed236906b1f7a05c0917e5257a1af05e9ff683)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 10.1\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_37,code=compute_37\n  - CuDNN 7.6.3\n  - Magma 2.5.2\n  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=10.1, CUDNN_VERSION=7.6.3, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.8.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, \n\nTorchVision: 0.9.0\nOpenCV: 4.5.1\nMMCV: 1.3.8\nMMCV Compiler: GCC 7.3\nMMCV CUDA Compiler: 10.1\nMMSegmentation: 0.14.1+9988853", "seed": null, "exp_name": "upernet_r50_512x1024_4k_dummy_cityscapes.py", "mmseg_version": "0.14.1+9988853", "config": "norm_cfg = dict(type='SyncBN', requires_grad=True)\nmodel = dict(\n    type='EncoderDecoder',\n    pretrained='open-mmlab://resnet50_v1c',\n    backbone=dict(\n        type='ResNetV1c',\n        depth=50,\n        num_stages=4,\n        out_indices=(0, 1, 2, 3),\n        dilations=(1, 1, 1, 1),\n        strides=(1, 2, 2, 2),\n        norm_cfg=dict(type='SyncBN', requires_grad=True),\n        norm_eval=False,\n        style='pytorch',\n        contract_dilation=True,\n        pretrained='open-mmlab://resnet50_v1c'),\n    decode_head=dict(\n        type='UPerHead',\n        in_channels=[256, 512, 1024, 2048],\n        in_index=[0, 1, 2, 3],\n        pool_scales=(1, 2, 3, 6),\n        channels=512,\n        dropout_ratio=0.1,\n        num_classes=19,\n        norm_cfg=dict(type='SyncBN', requires_grad=True),\n        align_corners=False,\n        loss_decode=dict(\n            type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0)),\n    auxiliary_head=dict(\n        type='FCNHead',\n        in_channels=1024,\n        in_index=2,\n        channels=256,\n        num_convs=1,\n        concat_input=False,\n        dropout_ratio=0.1,\n        num_classes=19,\n        norm_cfg=dict(type='SyncBN', requires_grad=True),\n        align_corners=False,\n        loss_decode=dict(\n            type='CrossEntropyLoss', use_sigmoid=False, loss_weight=0.4)),\n    train_cfg=dict(),\n    test_cfg=dict(mode='whole'))\ndataset_type = 'DummyCityscapes'\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ncrop_size = (512, 1024)\ntrain_pipeline = [\n    dict(type='Resize', img_scale=(2048, 1024), ratio_range=(0.5, 2.0)),\n    dict(type='RandomCrop', crop_size=(512, 1024), cat_max_ratio=0.75),\n    dict(type='RandomFlip', prob=0.5),\n    dict(type='PhotoMetricDistortion'),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_semantic_seg'])\n]\ntest_pipeline = [\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(2048, 1024),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=2,\n    workers_per_gpu=2,\n    train=dict(\n        type='DummyCityscapes',\n        pipeline=[\n            dict(\n                type='Resize', img_scale=(2048, 1024), ratio_range=(0.5, 2.0)),\n            dict(type='RandomCrop', crop_size=(512, 1024), cat_max_ratio=0.75),\n            dict(type='RandomFlip', prob=0.5),\n            dict(type='PhotoMetricDistortion'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='DefaultFormatBundle'),\n            dict(type='Collect', keys=['img', 'gt_semantic_seg'])\n        ]),\n    val=dict(\n        type='DummyCityscapes',\n        pipeline=[\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(2048, 1024),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]),\n    test=dict(\n        type='DummyCityscapes',\n        pipeline=[\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(2048, 1024),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]))\nlog_config = dict(\n    interval=50, hooks=[dict(type='TextLoggerHook', by_epoch=False)])\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = None\nresume_from = None\nworkflow = [('train', 1)]\ncudnn_benchmark = True\noptimizer = dict(type='SGD', lr=0.01, momentum=0.9, weight_decay=0.0005)\noptimizer_config = dict()\nlr_config = dict(policy='poly', power=0.9, min_lr=0.0001, by_epoch=False)\nrunner = dict(type='IterBasedRunner', max_iters=4000)\ncheckpoint_config = dict(by_epoch=False, interval=2000)\nevaluation = dict(interval=2000, metric='mIoU')\nwork_dir = 'work_dirs_1node_1gpu/upernet_r50_512x1024_4k_dummy_cityscapes'\ngpu_ids = range(0, 1)\nseed = None\n", "CLASSES": ["road", "sidewalk", "building", "wall", "fence", "pole", "traffic light", "traffic sign", "vegetation", "terrain", "sky", "person", "rider", "car", "truck", "bus", "train", "motorcycle", "bicycle"], "PALETTE": [[128, 64, 128], [244, 35, 232], [70, 70, 70], [102, 102, 156], [190, 153, 153], [153, 153, 153], [250, 170, 30], [220, 220, 0], [107, 142, 35], [152, 251, 152], [70, 130, 180], [220, 20, 60], [255, 0, 0], [0, 0, 142], [0, 0, 70], [0, 60, 100], [0, 80, 100], [0, 0, 230], [119, 11, 32]]}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 0.00989, "memory": 19971, "data_time": 0.01176, "decode.loss_seg": 2.95271, "decode.acc_seg": 5.26306, "aux.loss_seg": 1.17907, "aux.acc_seg": 5.26393, "loss": 4.13178, "time": 0.58452}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 0.00978, "memory": 19971, "data_time": 0.00832, "decode.loss_seg": 2.95037, "decode.acc_seg": 5.26235, "aux.loss_seg": 1.17875, "aux.acc_seg": 5.25909, "loss": 4.12912, "time": 0.35384}
{"mode": "train", "epoch": 1, "iter": 150, "lr": 0.00967, "memory": 19971, "data_time": 0.00793, "decode.loss_seg": 2.94923, "decode.acc_seg": 5.26476, "aux.loss_seg": 1.17868, "aux.acc_seg": 5.26402, "loss": 4.12791, "time": 0.35338}
{"mode": "train", "epoch": 1, "iter": 200, "lr": 0.00956, "memory": 19971, "data_time": 0.00768, "decode.loss_seg": 2.94829, "decode.acc_seg": 5.26464, "aux.loss_seg": 1.17861, "aux.acc_seg": 5.26796, "loss": 4.12689, "time": 0.35328}
{"mode": "train", "epoch": 1, "iter": 250, "lr": 0.00944, "memory": 19971, "data_time": 0.00768, "decode.loss_seg": 2.94758, "decode.acc_seg": 5.26164, "aux.loss_seg": 1.17854, "aux.acc_seg": 5.25944, "loss": 4.12611, "time": 0.3575}
{"mode": "train", "epoch": 1, "iter": 300, "lr": 0.00933, "memory": 19971, "data_time": 0.00773, "decode.loss_seg": 2.94696, "decode.acc_seg": 5.26212, "aux.loss_seg": 1.17847, "aux.acc_seg": 5.26221, "loss": 4.12543, "time": 0.35401}
{"mode": "train", "epoch": 1, "iter": 350, "lr": 0.00922, "memory": 19971, "data_time": 0.00772, "decode.loss_seg": 2.94648, "decode.acc_seg": 5.26165, "aux.loss_seg": 1.17842, "aux.acc_seg": 5.26297, "loss": 4.12489, "time": 0.35385}
{"mode": "train", "epoch": 1, "iter": 400, "lr": 0.00911, "memory": 19971, "data_time": 0.00764, "decode.loss_seg": 2.94611, "decode.acc_seg": 5.2698, "aux.loss_seg": 1.17837, "aux.acc_seg": 5.26301, "loss": 4.12448, "time": 0.35393}
{"mode": "train", "epoch": 1, "iter": 450, "lr": 0.00899, "memory": 19971, "data_time": 0.00768, "decode.loss_seg": 2.94582, "decode.acc_seg": 5.26472, "aux.loss_seg": 1.17834, "aux.acc_seg": 5.2609, "loss": 4.12415, "time": 0.35369}
{"mode": "train", "epoch": 1, "iter": 500, "lr": 0.00888, "memory": 19971, "data_time": 0.00778, "decode.loss_seg": 2.94564, "decode.acc_seg": 5.26095, "aux.loss_seg": 1.17829, "aux.acc_seg": 5.25776, "loss": 4.12393, "time": 0.35447}
{"mode": "train", "epoch": 1, "iter": 550, "lr": 0.00877, "memory": 19971, "data_time": 0.00853, "decode.loss_seg": 2.94547, "decode.acc_seg": 5.26187, "aux.loss_seg": 1.17826, "aux.acc_seg": 5.26521, "loss": 4.12373, "time": 0.35863}
{"mode": "train", "epoch": 1, "iter": 600, "lr": 0.00866, "memory": 19971, "data_time": 0.00808, "decode.loss_seg": 2.94534, "decode.acc_seg": 5.26542, "aux.loss_seg": 1.17823, "aux.acc_seg": 5.26387, "loss": 4.12357, "time": 0.35587}
{"mode": "train", "epoch": 1, "iter": 650, "lr": 0.00854, "memory": 19971, "data_time": 0.00784, "decode.loss_seg": 2.94525, "decode.acc_seg": 5.26612, "aux.loss_seg": 1.17821, "aux.acc_seg": 5.26341, "loss": 4.12345, "time": 0.35376}
{"mode": "train", "epoch": 1, "iter": 700, "lr": 0.00843, "memory": 19971, "data_time": 0.00806, "decode.loss_seg": 2.94518, "decode.acc_seg": 5.26462, "aux.loss_seg": 1.17819, "aux.acc_seg": 5.26143, "loss": 4.12337, "time": 0.35382}
{"mode": "train", "epoch": 1, "iter": 750, "lr": 0.00831, "memory": 19971, "data_time": 0.00796, "decode.loss_seg": 2.94511, "decode.acc_seg": 5.26845, "aux.loss_seg": 1.17816, "aux.acc_seg": 5.26222, "loss": 4.12327, "time": 0.35362}
{"mode": "train", "epoch": 1, "iter": 800, "lr": 0.0082, "memory": 19971, "data_time": 0.00838, "decode.loss_seg": 2.94504, "decode.acc_seg": 5.27004, "aux.loss_seg": 1.17814, "aux.acc_seg": 5.27351, "loss": 4.12318, "time": 0.35437}
{"mode": "train", "epoch": 1, "iter": 850, "lr": 0.00809, "memory": 19971, "data_time": 0.00949, "decode.loss_seg": 2.945, "decode.acc_seg": 5.2638, "aux.loss_seg": 1.17813, "aux.acc_seg": 5.25973, "loss": 4.12313, "time": 0.35757}
{"mode": "train", "epoch": 1, "iter": 900, "lr": 0.00797, "memory": 19971, "data_time": 0.00895, "decode.loss_seg": 2.94495, "decode.acc_seg": 5.26489, "aux.loss_seg": 1.17811, "aux.acc_seg": 5.26468, "loss": 4.12307, "time": 0.35684}
{"mode": "train", "epoch": 1, "iter": 950, "lr": 0.00786, "memory": 19971, "data_time": 0.00921, "decode.loss_seg": 2.94491, "decode.acc_seg": 5.27131, "aux.loss_seg": 1.17809, "aux.acc_seg": 5.26732, "loss": 4.123, "time": 0.35745}
{"mode": "train", "epoch": 1, "iter": 1000, "lr": 0.00774, "memory": 19971, "data_time": 0.00957, "decode.loss_seg": 2.94488, "decode.acc_seg": 5.26559, "aux.loss_seg": 1.17808, "aux.acc_seg": 5.26282, "loss": 4.12296, "time": 0.35821}
{"mode": "train", "epoch": 1, "iter": 1050, "lr": 0.00763, "memory": 19971, "data_time": 0.00938, "decode.loss_seg": 2.94485, "decode.acc_seg": 5.26299, "aux.loss_seg": 1.17807, "aux.acc_seg": 5.26329, "loss": 4.12292, "time": 0.35753}
{"mode": "train", "epoch": 1, "iter": 1100, "lr": 0.00751, "memory": 19971, "data_time": 0.00932, "decode.loss_seg": 2.94482, "decode.acc_seg": 5.26688, "aux.loss_seg": 1.17806, "aux.acc_seg": 5.26896, "loss": 4.12288, "time": 0.35778}
{"mode": "train", "epoch": 1, "iter": 1150, "lr": 0.0074, "memory": 19971, "data_time": 0.00993, "decode.loss_seg": 2.94479, "decode.acc_seg": 5.26225, "aux.loss_seg": 1.17805, "aux.acc_seg": 5.26245, "loss": 4.12284, "time": 0.35866}
{"mode": "train", "epoch": 1, "iter": 1200, "lr": 0.00728, "memory": 19971, "data_time": 0.00947, "decode.loss_seg": 2.94477, "decode.acc_seg": 5.27131, "aux.loss_seg": 1.17804, "aux.acc_seg": 5.25728, "loss": 4.1228, "time": 0.35833}
{"mode": "train", "epoch": 1, "iter": 1250, "lr": 0.00717, "memory": 19971, "data_time": 0.00973, "decode.loss_seg": 2.94475, "decode.acc_seg": 5.26176, "aux.loss_seg": 1.17803, "aux.acc_seg": 5.26605, "loss": 4.12278, "time": 0.35842}
{"mode": "train", "epoch": 1, "iter": 1300, "lr": 0.00705, "memory": 19971, "data_time": 0.00903, "decode.loss_seg": 2.94474, "decode.acc_seg": 5.26244, "aux.loss_seg": 1.17802, "aux.acc_seg": 5.2635, "loss": 4.12276, "time": 0.35756}
{"mode": "train", "epoch": 1, "iter": 1350, "lr": 0.00694, "memory": 19971, "data_time": 0.00921, "decode.loss_seg": 2.94471, "decode.acc_seg": 5.26594, "aux.loss_seg": 1.17801, "aux.acc_seg": 5.26416, "loss": 4.12272, "time": 0.35751}
{"mode": "train", "epoch": 1, "iter": 1400, "lr": 0.00682, "memory": 19971, "data_time": 0.00911, "decode.loss_seg": 2.9447, "decode.acc_seg": 5.26499, "aux.loss_seg": 1.178, "aux.acc_seg": 5.2646, "loss": 4.1227, "time": 0.35832}
{"mode": "train", "epoch": 1, "iter": 1450, "lr": 0.0067, "memory": 19971, "data_time": 0.00896, "decode.loss_seg": 2.94469, "decode.acc_seg": 5.26542, "aux.loss_seg": 1.178, "aux.acc_seg": 5.26337, "loss": 4.12269, "time": 0.35718}
{"mode": "train", "epoch": 2, "iter": 1500, "lr": 0.00659, "memory": 19971, "data_time": 0.01135, "decode.loss_seg": 2.94468, "decode.acc_seg": 5.26458, "aux.loss_seg": 1.17799, "aux.acc_seg": 5.26205, "loss": 4.12267, "time": 0.35987}
{"mode": "train", "epoch": 2, "iter": 1550, "lr": 0.00647, "memory": 19971, "data_time": 0.00902, "decode.loss_seg": 2.94467, "decode.acc_seg": 5.26541, "aux.loss_seg": 1.17798, "aux.acc_seg": 5.26283, "loss": 4.12265, "time": 0.35726}
{"mode": "train", "epoch": 2, "iter": 1600, "lr": 0.00635, "memory": 19971, "data_time": 0.00924, "decode.loss_seg": 2.94466, "decode.acc_seg": 5.26161, "aux.loss_seg": 1.17798, "aux.acc_seg": 5.26711, "loss": 4.12264, "time": 0.35757}
{"mode": "train", "epoch": 2, "iter": 1650, "lr": 0.00624, "memory": 19971, "data_time": 0.00945, "decode.loss_seg": 2.94465, "decode.acc_seg": 5.26472, "aux.loss_seg": 1.17797, "aux.acc_seg": 5.2666, "loss": 4.12262, "time": 0.35877}
{"mode": "train", "epoch": 2, "iter": 1700, "lr": 0.00612, "memory": 19971, "data_time": 0.00919, "decode.loss_seg": 2.94464, "decode.acc_seg": 5.26668, "aux.loss_seg": 1.17796, "aux.acc_seg": 5.26404, "loss": 4.1226, "time": 0.35834}
{"mode": "train", "epoch": 2, "iter": 1750, "lr": 0.006, "memory": 19971, "data_time": 0.0092, "decode.loss_seg": 2.94463, "decode.acc_seg": 5.2647, "aux.loss_seg": 1.17797, "aux.acc_seg": 5.2652, "loss": 4.12259, "time": 0.35789}
{"mode": "train", "epoch": 2, "iter": 1800, "lr": 0.00588, "memory": 19971, "data_time": 0.03979, "decode.loss_seg": 2.94462, "decode.acc_seg": 5.26282, "aux.loss_seg": 1.17796, "aux.acc_seg": 5.26008, "loss": 4.12257, "time": 0.50233}
{"mode": "train", "epoch": 2, "iter": 1850, "lr": 0.00576, "memory": 19971, "data_time": 0.01147, "decode.loss_seg": 2.94461, "decode.acc_seg": 5.26216, "aux.loss_seg": 1.17795, "aux.acc_seg": 5.26595, "loss": 4.12256, "time": 0.36386}
{"mode": "train", "epoch": 2, "iter": 1900, "lr": 0.00565, "memory": 19971, "data_time": 0.0091, "decode.loss_seg": 2.94461, "decode.acc_seg": 5.2672, "aux.loss_seg": 1.17795, "aux.acc_seg": 5.26207, "loss": 4.12256, "time": 0.35697}
{"mode": "train", "epoch": 2, "iter": 1950, "lr": 0.00553, "memory": 19971, "data_time": 0.00906, "decode.loss_seg": 2.9446, "decode.acc_seg": 5.26973, "aux.loss_seg": 1.17795, "aux.acc_seg": 5.25995, "loss": 4.12254, "time": 0.35798}
{"mode": "train", "epoch": 2, "iter": 500, "lr": 0.00541, "memory": 19971, "aAcc": 0.0526, "mIoU": 0.0237, "mAcc": 0.0526, "IoU.road": 0.024, "IoU.sidewalk": 0.0288, "IoU.building": 0.0217, "IoU.wall": 0.0149, "IoU.fence": 0.0276, "IoU.pole": 0.0259, "IoU.traffic light": 0.037, "IoU.traffic sign": 0.0343, "IoU.vegetation": 0.0143, "IoU.terrain": 0.0155, "IoU.sky": 0.0146, "IoU.person": 0.0242, "IoU.rider": 0.0043, "IoU.car": 0.0301, "IoU.truck": 0.0408, "IoU.bus": 0.0389, "IoU.train": 0.0136, "IoU.motorcycle": 0.0197, "IoU.bicycle": 0.0199, "Acc.road": 0.0422, "Acc.sidewalk": 0.0602, "Acc.building": 0.0357, "Acc.wall": 0.0203, "Acc.fence": 0.0547, "Acc.pole": 0.0487, "Acc.traffic light": 0.111, "Acc.traffic sign": 0.0901, "Acc.vegetation": 0.0192, "Acc.terrain": 0.0215, "Acc.sky": 0.0197, "Acc.person": 0.0428, "Acc.rider": 0.0046, "Acc.car": 0.0659, "Acc.truck": 0.1544, "Acc.bus": 0.1288, "Acc.train": 0.0181, "Acc.motorcycle": 0.0305, "Acc.bicycle": 0.0311, "data_time": 0.00873, "decode.loss_seg": 2.94459, "decode.acc_seg": 5.26333, "aux.loss_seg": 1.17794, "aux.acc_seg": 5.26647, "loss": 4.12253, "time": 0.38971}
{"mode": "train", "epoch": 2, "iter": 2050, "lr": 0.00529, "memory": 19971, "data_time": 4.99064, "decode.loss_seg": 2.94458, "decode.acc_seg": 5.26635, "aux.loss_seg": 1.17794, "aux.acc_seg": 5.2673, "loss": 4.12252, "time": 5.34296}
{"mode": "train", "epoch": 2, "iter": 2100, "lr": 0.00517, "memory": 19971, "data_time": 0.00864, "decode.loss_seg": 2.94458, "decode.acc_seg": 5.26984, "aux.loss_seg": 1.17793, "aux.acc_seg": 5.26409, "loss": 4.12251, "time": 0.35832}
{"mode": "train", "epoch": 2, "iter": 2150, "lr": 0.00505, "memory": 19971, "data_time": 0.00853, "decode.loss_seg": 2.94458, "decode.acc_seg": 5.26525, "aux.loss_seg": 1.17793, "aux.acc_seg": 5.26513, "loss": 4.12251, "time": 0.3579}
{"mode": "train", "epoch": 2, "iter": 2200, "lr": 0.00493, "memory": 19971, "data_time": 0.00897, "decode.loss_seg": 2.94457, "decode.acc_seg": 5.26507, "aux.loss_seg": 1.17793, "aux.acc_seg": 5.26949, "loss": 4.1225, "time": 0.35862}
{"mode": "train", "epoch": 2, "iter": 2250, "lr": 0.00481, "memory": 19971, "data_time": 0.00876, "decode.loss_seg": 2.94457, "decode.acc_seg": 5.27205, "aux.loss_seg": 1.17793, "aux.acc_seg": 5.26001, "loss": 4.1225, "time": 0.35787}
{"mode": "train", "epoch": 2, "iter": 2300, "lr": 0.00469, "memory": 19971, "data_time": 0.00871, "decode.loss_seg": 2.94457, "decode.acc_seg": 5.26223, "aux.loss_seg": 1.17792, "aux.acc_seg": 5.26388, "loss": 4.12249, "time": 0.35795}
{"mode": "train", "epoch": 2, "iter": 2350, "lr": 0.00456, "memory": 19971, "data_time": 0.00895, "decode.loss_seg": 2.94456, "decode.acc_seg": 5.27264, "aux.loss_seg": 1.17792, "aux.acc_seg": 5.26232, "loss": 4.12247, "time": 0.35822}
{"mode": "train", "epoch": 2, "iter": 2400, "lr": 0.00444, "memory": 19971, "data_time": 0.00839, "decode.loss_seg": 2.94456, "decode.acc_seg": 5.26835, "aux.loss_seg": 1.17791, "aux.acc_seg": 5.26761, "loss": 4.12247, "time": 0.35654}
{"mode": "train", "epoch": 2, "iter": 2450, "lr": 0.00432, "memory": 19971, "data_time": 0.00875, "decode.loss_seg": 2.94455, "decode.acc_seg": 5.26671, "aux.loss_seg": 1.17791, "aux.acc_seg": 5.26505, "loss": 4.12247, "time": 0.35788}
{"mode": "train", "epoch": 2, "iter": 2500, "lr": 0.0042, "memory": 19971, "data_time": 0.00928, "decode.loss_seg": 2.94455, "decode.acc_seg": 5.26832, "aux.loss_seg": 1.17791, "aux.acc_seg": 5.26013, "loss": 4.12246, "time": 0.35842}
{"mode": "train", "epoch": 2, "iter": 2550, "lr": 0.00407, "memory": 19971, "data_time": 0.00864, "decode.loss_seg": 2.94454, "decode.acc_seg": 5.27002, "aux.loss_seg": 1.17791, "aux.acc_seg": 5.26723, "loss": 4.12245, "time": 0.35732}
{"mode": "train", "epoch": 2, "iter": 2600, "lr": 0.00395, "memory": 19971, "data_time": 0.00869, "decode.loss_seg": 2.94454, "decode.acc_seg": 5.26782, "aux.loss_seg": 1.1779, "aux.acc_seg": 5.26555, "loss": 4.12245, "time": 0.35723}
{"mode": "train", "epoch": 2, "iter": 2650, "lr": 0.00383, "memory": 19971, "data_time": 0.00824, "decode.loss_seg": 2.94454, "decode.acc_seg": 5.26433, "aux.loss_seg": 1.17791, "aux.acc_seg": 5.25743, "loss": 4.12245, "time": 0.35661}
{"mode": "train", "epoch": 2, "iter": 2700, "lr": 0.0037, "memory": 19971, "data_time": 0.00866, "decode.loss_seg": 2.94454, "decode.acc_seg": 5.2639, "aux.loss_seg": 1.1779, "aux.acc_seg": 5.26057, "loss": 4.12244, "time": 0.35756}
{"mode": "train", "epoch": 2, "iter": 2750, "lr": 0.00358, "memory": 19971, "data_time": 0.00849, "decode.loss_seg": 2.94454, "decode.acc_seg": 5.27129, "aux.loss_seg": 1.1779, "aux.acc_seg": 5.26624, "loss": 4.12244, "time": 0.35728}
{"mode": "train", "epoch": 2, "iter": 2800, "lr": 0.00345, "memory": 19971, "data_time": 0.00851, "decode.loss_seg": 2.94454, "decode.acc_seg": 5.26617, "aux.loss_seg": 1.1779, "aux.acc_seg": 5.26207, "loss": 4.12243, "time": 0.35753}
{"mode": "train", "epoch": 2, "iter": 2850, "lr": 0.00333, "memory": 19971, "data_time": 0.0085, "decode.loss_seg": 2.94453, "decode.acc_seg": 5.27073, "aux.loss_seg": 1.1779, "aux.acc_seg": 5.26538, "loss": 4.12243, "time": 0.35691}
{"mode": "train", "epoch": 2, "iter": 2900, "lr": 0.0032, "memory": 19971, "data_time": 0.00815, "decode.loss_seg": 2.94453, "decode.acc_seg": 5.26926, "aux.loss_seg": 1.1779, "aux.acc_seg": 5.26258, "loss": 4.12243, "time": 0.35702}
{"mode": "train", "epoch": 2, "iter": 2950, "lr": 0.00307, "memory": 19971, "data_time": 0.00843, "decode.loss_seg": 2.94453, "decode.acc_seg": 5.26451, "aux.loss_seg": 1.1779, "aux.acc_seg": 5.26502, "loss": 4.12243, "time": 0.35712}
{"mode": "train", "epoch": 3, "iter": 3000, "lr": 0.00295, "memory": 19971, "data_time": 0.0106, "decode.loss_seg": 2.94453, "decode.acc_seg": 5.2721, "aux.loss_seg": 1.17789, "aux.acc_seg": 5.26925, "loss": 4.12242, "time": 0.35966}
{"mode": "train", "epoch": 3, "iter": 3050, "lr": 0.00282, "memory": 19971, "data_time": 0.00865, "decode.loss_seg": 2.94453, "decode.acc_seg": 5.26648, "aux.loss_seg": 1.17789, "aux.acc_seg": 5.26425, "loss": 4.12242, "time": 0.35834}
{"mode": "train", "epoch": 3, "iter": 3100, "lr": 0.00269, "memory": 19971, "data_time": 0.00847, "decode.loss_seg": 2.94452, "decode.acc_seg": 5.26332, "aux.loss_seg": 1.17789, "aux.acc_seg": 5.26572, "loss": 4.12241, "time": 0.35782}
{"mode": "train", "epoch": 3, "iter": 3150, "lr": 0.00256, "memory": 19971, "data_time": 0.01784, "decode.loss_seg": 2.94452, "decode.acc_seg": 5.26942, "aux.loss_seg": 1.17789, "aux.acc_seg": 5.26097, "loss": 4.12241, "time": 0.49579}
{"mode": "train", "epoch": 3, "iter": 3200, "lr": 0.00243, "memory": 19971, "data_time": 0.0113, "decode.loss_seg": 2.94452, "decode.acc_seg": 5.26688, "aux.loss_seg": 1.17789, "aux.acc_seg": 5.26436, "loss": 4.12241, "time": 0.36283}
{"mode": "train", "epoch": 3, "iter": 3250, "lr": 0.0023, "memory": 19971, "data_time": 0.00964, "decode.loss_seg": 2.94452, "decode.acc_seg": 5.2667, "aux.loss_seg": 1.17789, "aux.acc_seg": 5.26373, "loss": 4.12241, "time": 0.35828}
{"mode": "train", "epoch": 3, "iter": 3300, "lr": 0.00217, "memory": 19971, "data_time": 0.00912, "decode.loss_seg": 2.94452, "decode.acc_seg": 5.26932, "aux.loss_seg": 1.17789, "aux.acc_seg": 5.26235, "loss": 4.1224, "time": 0.35891}
{"mode": "train", "epoch": 3, "iter": 3350, "lr": 0.00203, "memory": 19971, "data_time": 0.00917, "decode.loss_seg": 2.94452, "decode.acc_seg": 5.26702, "aux.loss_seg": 1.17789, "aux.acc_seg": 5.2667, "loss": 4.12241, "time": 0.35857}
{"mode": "train", "epoch": 3, "iter": 3400, "lr": 0.0019, "memory": 19971, "data_time": 0.00913, "decode.loss_seg": 2.94452, "decode.acc_seg": 5.2672, "aux.loss_seg": 1.17789, "aux.acc_seg": 5.27172, "loss": 4.1224, "time": 0.35792}
{"mode": "train", "epoch": 3, "iter": 3450, "lr": 0.00176, "memory": 19971, "data_time": 0.00893, "decode.loss_seg": 2.94451, "decode.acc_seg": 5.27673, "aux.loss_seg": 1.17789, "aux.acc_seg": 5.26057, "loss": 4.1224, "time": 0.35738}
{"mode": "train", "epoch": 3, "iter": 3500, "lr": 0.00163, "memory": 19971, "data_time": 0.00902, "decode.loss_seg": 2.94452, "decode.acc_seg": 5.27163, "aux.loss_seg": 1.17788, "aux.acc_seg": 5.26121, "loss": 4.1224, "time": 0.41908}
{"mode": "train", "epoch": 3, "iter": 3550, "lr": 0.00149, "memory": 19971, "data_time": 0.00819, "decode.loss_seg": 2.94451, "decode.acc_seg": 5.26249, "aux.loss_seg": 1.17788, "aux.acc_seg": 5.25895, "loss": 4.12239, "time": 0.35524}
{"mode": "train", "epoch": 3, "iter": 3600, "lr": 0.00135, "memory": 19971, "data_time": 0.00764, "decode.loss_seg": 2.94452, "decode.acc_seg": 5.26576, "aux.loss_seg": 1.17788, "aux.acc_seg": 5.26721, "loss": 4.1224, "time": 0.35484}
{"mode": "train", "epoch": 3, "iter": 3650, "lr": 0.00121, "memory": 19971, "data_time": 0.00771, "decode.loss_seg": 2.94452, "decode.acc_seg": 5.2682, "aux.loss_seg": 1.17788, "aux.acc_seg": 5.26085, "loss": 4.1224, "time": 0.35496}
{"mode": "train", "epoch": 3, "iter": 3700, "lr": 0.00106, "memory": 19971, "data_time": 0.00785, "decode.loss_seg": 2.94451, "decode.acc_seg": 5.27438, "aux.loss_seg": 1.17788, "aux.acc_seg": 5.26022, "loss": 4.1224, "time": 0.35516}
{"mode": "train", "epoch": 3, "iter": 3750, "lr": 0.00092, "memory": 19971, "data_time": 0.00772, "decode.loss_seg": 2.94451, "decode.acc_seg": 5.2656, "aux.loss_seg": 1.17788, "aux.acc_seg": 5.26692, "loss": 4.12239, "time": 0.35561}
{"mode": "train", "epoch": 3, "iter": 3800, "lr": 0.00077, "memory": 19971, "data_time": 0.00758, "decode.loss_seg": 2.94451, "decode.acc_seg": 5.26503, "aux.loss_seg": 1.17788, "aux.acc_seg": 5.26723, "loss": 4.12239, "time": 0.35493}
{"mode": "train", "epoch": 3, "iter": 3850, "lr": 0.00062, "memory": 19971, "data_time": 0.00776, "decode.loss_seg": 2.94451, "decode.acc_seg": 5.2682, "aux.loss_seg": 1.17788, "aux.acc_seg": 5.26281, "loss": 4.12239, "time": 0.35631}
{"mode": "train", "epoch": 3, "iter": 3900, "lr": 0.00046, "memory": 19971, "data_time": 0.00769, "decode.loss_seg": 2.94451, "decode.acc_seg": 5.27108, "aux.loss_seg": 1.17788, "aux.acc_seg": 5.26059, "loss": 4.12239, "time": 0.3563}
{"mode": "train", "epoch": 3, "iter": 3950, "lr": 0.0003, "memory": 19971, "data_time": 0.00785, "decode.loss_seg": 2.94451, "decode.acc_seg": 5.26776, "aux.loss_seg": 1.17788, "aux.acc_seg": 5.26174, "loss": 4.12239, "time": 0.35629}
{"mode": "train", "epoch": 3, "iter": 500, "lr": 0.00011, "memory": 19971, "aAcc": 0.0526, "mIoU": 0.0229, "mAcc": 0.0526, "IoU.road": 0.0209, "IoU.sidewalk": 0.032, "IoU.building": 0.0307, "IoU.wall": 0.0099, "IoU.fence": 0.0209, "IoU.pole": 0.0335, "IoU.traffic light": 0.0396, "IoU.traffic sign": 0.0284, "IoU.vegetation": 0.0115, "IoU.terrain": 0.0122, "IoU.sky": 0.015, "IoU.person": 0.0164, "IoU.rider": 0.0034, "IoU.car": 0.0223, "IoU.truck": 0.0424, "IoU.bus": 0.0366, "IoU.train": 0.0162, "IoU.motorcycle": 0.0188, "IoU.bicycle": 0.0238, "Acc.road": 0.0336, "Acc.sidewalk": 0.0755, "Acc.building": 0.0683, "Acc.wall": 0.0121, "Acc.fence": 0.0337, "Acc.pole": 0.0842, "Acc.traffic light": 0.1391, "Acc.traffic sign": 0.0583, "Acc.vegetation": 0.0145, "Acc.terrain": 0.0157, "Acc.sky": 0.0206, "Acc.person": 0.0232, "Acc.rider": 0.0036, "Acc.car": 0.0374, "Acc.truck": 0.1799, "Acc.bus": 0.107, "Acc.train": 0.0229, "Acc.motorcycle": 0.0284, "Acc.bicycle": 0.0416, "data_time": 0.00758, "decode.loss_seg": 2.94451, "decode.acc_seg": 5.2693, "aux.loss_seg": 1.17788, "aux.acc_seg": 5.26376, "loss": 4.12239, "time": 0.37826}
