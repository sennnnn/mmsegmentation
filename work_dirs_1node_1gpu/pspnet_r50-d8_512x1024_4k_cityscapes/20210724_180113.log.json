{"env_info": "sys.platform: linux\nPython: 3.7.10 (default, Feb 26 2021, 18:47:35) [GCC 7.3.0]\nCUDA available: True\nGPU 0: Tesla V100-SXM2-32GB\nCUDA_HOME: /mnt/cache/share/polaris/dep/cuda-10.1-cudnn7.6.5\nNVCC: Cuda compilation tools, release 10.1, V10.1.243\nGCC: gcc (GCC) 5.4.0\nPyTorch: 1.8.0\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) Math Kernel Library Version 2020.0.2 Product Build 20200624 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v1.7.0 (Git Hash 7aed236906b1f7a05c0917e5257a1af05e9ff683)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 10.1\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_37,code=compute_37\n  - CuDNN 7.6.3\n  - Magma 2.5.2\n  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=10.1, CUDNN_VERSION=7.6.3, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.8.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, \n\nTorchVision: 0.9.0\nOpenCV: 4.5.1\nMMCV: 1.3.8\nMMCV Compiler: GCC 7.3\nMMCV CUDA Compiler: 10.1\nMMSegmentation: 0.15.0+4d34581", "seed": null, "exp_name": "pspnet_r50-d8_512x1024_4k_cityscapes.py", "mmseg_version": "0.15.0+4d34581", "config": "norm_cfg = dict(type='SyncBN', requires_grad=True)\nmodel = dict(\n    type='EncoderDecoder',\n    pretrained='open-mmlab://resnet50_v1c',\n    backbone=dict(\n        type='ResNetV1c',\n        depth=50,\n        num_stages=4,\n        out_indices=(0, 1, 2, 3),\n        dilations=(1, 1, 2, 4),\n        strides=(1, 2, 1, 1),\n        norm_cfg=dict(type='SyncBN', requires_grad=True),\n        norm_eval=False,\n        style='pytorch',\n        contract_dilation=True,\n        pretrained='open-mmlab://resnet50_v1c'),\n    decode_head=dict(\n        type='PSPHead',\n        in_channels=2048,\n        in_index=3,\n        channels=512,\n        pool_scales=(1, 2, 3, 6),\n        dropout_ratio=0.1,\n        num_classes=19,\n        norm_cfg=dict(type='SyncBN', requires_grad=True),\n        align_corners=False,\n        loss_decode=dict(\n            type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0)),\n    auxiliary_head=dict(\n        type='FCNHead',\n        in_channels=1024,\n        in_index=2,\n        channels=256,\n        num_convs=1,\n        concat_input=False,\n        dropout_ratio=0.1,\n        num_classes=19,\n        norm_cfg=dict(type='SyncBN', requires_grad=True),\n        align_corners=False,\n        loss_decode=dict(\n            type='CrossEntropyLoss', use_sigmoid=False, loss_weight=0.4)),\n    train_cfg=dict(),\n    test_cfg=dict(mode='whole'))\ndataset_type = 'CityscapesDataset'\ndata_root = 'data/cityscapes/'\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ncrop_size = (512, 1024)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations'),\n    dict(type='Resize', img_scale=(2048, 1024), ratio_range=(0.5, 2.0)),\n    dict(type='RandomCrop', crop_size=(512, 1024), cat_max_ratio=0.75),\n    dict(type='RandomFlip', prob=0.5),\n    dict(type='PhotoMetricDistortion'),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='Pad', size=(512, 1024), pad_val=0, seg_pad_val=255),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_semantic_seg'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(2048, 1024),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=2,\n    workers_per_gpu=2,\n    train=dict(\n        type='CityscapesDataset',\n        data_root='data/cityscapes/',\n        img_dir='leftImg8bit/train',\n        ann_dir='gtFine/train',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations'),\n            dict(\n                type='Resize', img_scale=(2048, 1024), ratio_range=(0.5, 2.0)),\n            dict(type='RandomCrop', crop_size=(512, 1024), cat_max_ratio=0.75),\n            dict(type='RandomFlip', prob=0.5),\n            dict(type='PhotoMetricDistortion'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size=(512, 1024), pad_val=0, seg_pad_val=255),\n            dict(type='DefaultFormatBundle'),\n            dict(type='Collect', keys=['img', 'gt_semantic_seg'])\n        ]),\n    val=dict(\n        type='CityscapesDataset',\n        data_root='data/cityscapes/',\n        img_dir='leftImg8bit/val',\n        ann_dir='gtFine/val',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(2048, 1024),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]),\n    test=dict(\n        type='CityscapesDataset',\n        data_root='data/cityscapes/',\n        img_dir='leftImg8bit/val',\n        ann_dir='gtFine/val',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(2048, 1024),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]))\nlog_config = dict(\n    interval=50, hooks=[dict(type='TextLoggerHook', by_epoch=False)])\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = None\nresume_from = None\nworkflow = [('train', 1)]\ncudnn_benchmark = True\noptimizer = dict(type='SGD', lr=0.01, momentum=0.9, weight_decay=0.0005)\noptimizer_config = dict()\nlr_config = dict(policy='poly', power=0.9, min_lr=0.0001, by_epoch=False)\nrunner = dict(type='IterBasedRunner', max_iters=4000)\ncheckpoint_config = dict(by_epoch=False, interval=2000)\nevaluation = dict(interval=2000, metric='mIoU')\nwork_dir = 'work_dirs_1node_1gpu/pspnet_r50-d8_512x1024_4k_cityscapes'\ngpu_ids = range(0, 1)\nseed = None\n", "CLASSES": ["road", "sidewalk", "building", "wall", "fence", "pole", "traffic light", "traffic sign", "vegetation", "terrain", "sky", "person", "rider", "car", "truck", "bus", "train", "motorcycle", "bicycle"], "PALETTE": [[128, 64, 128], [244, 35, 232], [70, 70, 70], [102, 102, 156], [190, 153, 153], [153, 153, 153], [250, 170, 30], [220, 220, 0], [107, 142, 35], [152, 251, 152], [70, 130, 180], [220, 20, 60], [255, 0, 0], [0, 0, 142], [0, 0, 70], [0, 60, 100], [0, 80, 100], [0, 0, 230], [119, 11, 32]]}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 0.00989, "memory": 18765, "data_time": 0.05635, "decode.loss_seg": 1.63412, "decode.acc_seg": 48.38415, "aux.loss_seg": 0.78202, "aux.acc_seg": 35.20573, "loss": 2.41614, "time": 0.77769}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 0.00978, "memory": 18765, "data_time": 0.01098, "decode.loss_seg": 1.388, "decode.acc_seg": 54.6419, "aux.loss_seg": 0.6068, "aux.acc_seg": 51.66323, "loss": 1.9948, "time": 0.47774}
{"mode": "train", "epoch": 1, "iter": 150, "lr": 0.00967, "memory": 18765, "data_time": 0.01581, "decode.loss_seg": 1.31064, "decode.acc_seg": 55.69829, "aux.loss_seg": 0.55741, "aux.acc_seg": 53.9365, "loss": 1.86805, "time": 0.4785}
{"mode": "train", "epoch": 1, "iter": 200, "lr": 0.00956, "memory": 18765, "data_time": 0.01125, "decode.loss_seg": 1.27148, "decode.acc_seg": 59.38625, "aux.loss_seg": 0.5518, "aux.acc_seg": 55.96478, "loss": 1.82327, "time": 0.46482}
{"mode": "train", "epoch": 1, "iter": 250, "lr": 0.00944, "memory": 18765, "data_time": 0.01701, "decode.loss_seg": 1.06962, "decode.acc_seg": 63.72535, "aux.loss_seg": 0.47677, "aux.acc_seg": 59.89732, "loss": 1.54639, "time": 0.47784}
{"mode": "train", "epoch": 1, "iter": 300, "lr": 0.00933, "memory": 18765, "data_time": 0.02515, "decode.loss_seg": 1.08355, "decode.acc_seg": 64.10009, "aux.loss_seg": 0.47887, "aux.acc_seg": 60.51099, "loss": 1.56242, "time": 0.51432}
{"mode": "train", "epoch": 1, "iter": 350, "lr": 0.00922, "memory": 18765, "data_time": 0.0075, "decode.loss_seg": 0.98706, "decode.acc_seg": 65.6106, "aux.loss_seg": 0.44523, "aux.acc_seg": 61.73997, "loss": 1.43229, "time": 0.48722}
{"mode": "train", "epoch": 1, "iter": 400, "lr": 0.00911, "memory": 18765, "data_time": 0.01668, "decode.loss_seg": 0.9167, "decode.acc_seg": 63.28857, "aux.loss_seg": 0.41443, "aux.acc_seg": 59.33098, "loss": 1.33113, "time": 0.48457}
{"mode": "train", "epoch": 1, "iter": 450, "lr": 0.00899, "memory": 18765, "data_time": 0.01316, "decode.loss_seg": 0.90306, "decode.acc_seg": 67.05693, "aux.loss_seg": 0.40833, "aux.acc_seg": 63.64583, "loss": 1.31139, "time": 0.47559}
{"mode": "train", "epoch": 1, "iter": 500, "lr": 0.00888, "memory": 18765, "data_time": 0.00958, "decode.loss_seg": 0.99901, "decode.acc_seg": 65.52947, "aux.loss_seg": 0.4488, "aux.acc_seg": 62.05376, "loss": 1.44781, "time": 0.47116}
{"mode": "train", "epoch": 1, "iter": 550, "lr": 0.00877, "memory": 18765, "data_time": 0.04276, "decode.loss_seg": 0.87667, "decode.acc_seg": 69.59204, "aux.loss_seg": 0.39483, "aux.acc_seg": 66.1119, "loss": 1.2715, "time": 0.52649}
{"mode": "train", "epoch": 1, "iter": 600, "lr": 0.00866, "memory": 18765, "data_time": 0.02013, "decode.loss_seg": 0.94124, "decode.acc_seg": 68.27143, "aux.loss_seg": 0.41554, "aux.acc_seg": 64.96081, "loss": 1.35678, "time": 0.4913}
{"mode": "train", "epoch": 1, "iter": 650, "lr": 0.00854, "memory": 18765, "data_time": 0.02313, "decode.loss_seg": 0.98133, "decode.acc_seg": 66.53233, "aux.loss_seg": 0.43875, "aux.acc_seg": 63.28499, "loss": 1.42008, "time": 0.49007}
{"mode": "train", "epoch": 1, "iter": 700, "lr": 0.00843, "memory": 18765, "data_time": 0.01862, "decode.loss_seg": 0.88538, "decode.acc_seg": 68.7959, "aux.loss_seg": 0.39421, "aux.acc_seg": 66.25483, "loss": 1.27959, "time": 0.4903}
{"mode": "train", "epoch": 1, "iter": 750, "lr": 0.00831, "memory": 18765, "data_time": 0.03518, "decode.loss_seg": 0.87755, "decode.acc_seg": 66.93972, "aux.loss_seg": 0.37843, "aux.acc_seg": 65.74297, "loss": 1.25598, "time": 0.48905}
{"mode": "train", "epoch": 1, "iter": 800, "lr": 0.0082, "memory": 18765, "data_time": 0.01774, "decode.loss_seg": 0.7799, "decode.acc_seg": 71.81453, "aux.loss_seg": 0.36188, "aux.acc_seg": 68.39521, "loss": 1.14178, "time": 0.48024}
{"mode": "train", "epoch": 1, "iter": 850, "lr": 0.00809, "memory": 18765, "data_time": 0.0127, "decode.loss_seg": 0.86079, "decode.acc_seg": 70.51391, "aux.loss_seg": 0.38881, "aux.acc_seg": 66.74963, "loss": 1.2496, "time": 0.46456}
{"mode": "train", "epoch": 1, "iter": 900, "lr": 0.00797, "memory": 18765, "data_time": 0.00939, "decode.loss_seg": 0.81221, "decode.acc_seg": 72.09881, "aux.loss_seg": 0.36728, "aux.acc_seg": 69.07139, "loss": 1.17948, "time": 0.47046}
{"mode": "train", "epoch": 1, "iter": 950, "lr": 0.00786, "memory": 18765, "data_time": 0.01125, "decode.loss_seg": 0.72064, "decode.acc_seg": 72.87001, "aux.loss_seg": 0.33397, "aux.acc_seg": 69.96705, "loss": 1.05461, "time": 0.47383}
{"mode": "train", "epoch": 1, "iter": 1000, "lr": 0.00774, "memory": 18765, "data_time": 0.02138, "decode.loss_seg": 0.71474, "decode.acc_seg": 74.87741, "aux.loss_seg": 0.33827, "aux.acc_seg": 71.17914, "loss": 1.05301, "time": 0.49404}
{"mode": "train", "epoch": 1, "iter": 1050, "lr": 0.00763, "memory": 18765, "data_time": 0.00769, "decode.loss_seg": 0.75554, "decode.acc_seg": 72.01941, "aux.loss_seg": 0.35317, "aux.acc_seg": 68.17143, "loss": 1.10871, "time": 0.49732}
{"mode": "train", "epoch": 1, "iter": 1100, "lr": 0.00751, "memory": 18765, "data_time": 0.01219, "decode.loss_seg": 0.81817, "decode.acc_seg": 71.06931, "aux.loss_seg": 0.37894, "aux.acc_seg": 67.33738, "loss": 1.19711, "time": 0.47779}
{"mode": "train", "epoch": 1, "iter": 1150, "lr": 0.0074, "memory": 18765, "data_time": 0.02625, "decode.loss_seg": 0.71343, "decode.acc_seg": 73.5422, "aux.loss_seg": 0.3349, "aux.acc_seg": 70.27466, "loss": 1.04833, "time": 0.49142}
{"mode": "train", "epoch": 1, "iter": 1200, "lr": 0.00728, "memory": 18765, "data_time": 0.00751, "decode.loss_seg": 0.64662, "decode.acc_seg": 75.17179, "aux.loss_seg": 0.30914, "aux.acc_seg": 72.35566, "loss": 0.95576, "time": 0.49293}
{"mode": "train", "epoch": 1, "iter": 1250, "lr": 0.00717, "memory": 18765, "data_time": 0.0077, "decode.loss_seg": 0.62366, "decode.acc_seg": 77.09355, "aux.loss_seg": 0.30069, "aux.acc_seg": 73.77939, "loss": 0.92435, "time": 0.48865}
{"mode": "train", "epoch": 1, "iter": 1300, "lr": 0.00705, "memory": 18765, "data_time": 0.00738, "decode.loss_seg": 0.67793, "decode.acc_seg": 74.51762, "aux.loss_seg": 0.31773, "aux.acc_seg": 71.02227, "loss": 0.99566, "time": 0.53872}
{"mode": "train", "epoch": 1, "iter": 1350, "lr": 0.00694, "memory": 18765, "data_time": 0.01083, "decode.loss_seg": 0.63158, "decode.acc_seg": 74.65386, "aux.loss_seg": 0.30286, "aux.acc_seg": 71.27934, "loss": 0.93444, "time": 0.49332}
{"mode": "train", "epoch": 1, "iter": 1400, "lr": 0.00682, "memory": 18765, "data_time": 0.01214, "decode.loss_seg": 0.57026, "decode.acc_seg": 76.81011, "aux.loss_seg": 0.28426, "aux.acc_seg": 72.64917, "loss": 0.85452, "time": 0.46217}
{"mode": "train", "epoch": 1, "iter": 1450, "lr": 0.0067, "memory": 18765, "data_time": 0.00827, "decode.loss_seg": 0.44807, "decode.acc_seg": 80.36189, "aux.loss_seg": 0.22971, "aux.acc_seg": 77.00547, "loss": 0.67777, "time": 0.48359}
{"mode": "train", "epoch": 2, "iter": 1500, "lr": 0.00659, "memory": 18765, "data_time": 0.01482, "decode.loss_seg": 0.65102, "decode.acc_seg": 74.988, "aux.loss_seg": 0.32404, "aux.acc_seg": 70.80923, "loss": 0.97506, "time": 0.49576}
{"mode": "train", "epoch": 2, "iter": 1550, "lr": 0.00647, "memory": 18765, "data_time": 0.01354, "decode.loss_seg": 0.56515, "decode.acc_seg": 78.0814, "aux.loss_seg": 0.28319, "aux.acc_seg": 74.23087, "loss": 0.84834, "time": 0.47799}
{"mode": "train", "epoch": 2, "iter": 1600, "lr": 0.00635, "memory": 18765, "data_time": 0.00804, "decode.loss_seg": 0.58472, "decode.acc_seg": 75.8577, "aux.loss_seg": 0.29055, "aux.acc_seg": 72.05215, "loss": 0.87527, "time": 0.46785}
{"mode": "train", "epoch": 2, "iter": 1650, "lr": 0.00624, "memory": 18765, "data_time": 0.01315, "decode.loss_seg": 0.61265, "decode.acc_seg": 76.78533, "aux.loss_seg": 0.29428, "aux.acc_seg": 73.67879, "loss": 0.90693, "time": 0.51004}
{"mode": "train", "epoch": 2, "iter": 1700, "lr": 0.00612, "memory": 18765, "data_time": 0.01362, "decode.loss_seg": 0.61609, "decode.acc_seg": 76.65871, "aux.loss_seg": 0.30104, "aux.acc_seg": 73.09695, "loss": 0.91713, "time": 0.48762}
{"mode": "train", "epoch": 2, "iter": 1750, "lr": 0.006, "memory": 18765, "data_time": 0.01712, "decode.loss_seg": 0.54332, "decode.acc_seg": 78.74569, "aux.loss_seg": 0.27914, "aux.acc_seg": 74.80472, "loss": 0.82246, "time": 0.5676}
{"mode": "train", "epoch": 2, "iter": 1800, "lr": 0.00588, "memory": 18765, "data_time": 0.0355, "decode.loss_seg": 0.50128, "decode.acc_seg": 78.61415, "aux.loss_seg": 0.2483, "aux.acc_seg": 75.60904, "loss": 0.74958, "time": 0.63377}
{"mode": "train", "epoch": 2, "iter": 1850, "lr": 0.00576, "memory": 18765, "data_time": 0.02909, "decode.loss_seg": 0.53079, "decode.acc_seg": 79.23862, "aux.loss_seg": 0.27796, "aux.acc_seg": 74.51866, "loss": 0.80875, "time": 0.53166}
{"mode": "train", "epoch": 2, "iter": 1900, "lr": 0.00565, "memory": 18765, "data_time": 0.03091, "decode.loss_seg": 0.52796, "decode.acc_seg": 77.79893, "aux.loss_seg": 0.27668, "aux.acc_seg": 73.65607, "loss": 0.80464, "time": 0.61916}
{"mode": "train", "epoch": 2, "iter": 1950, "lr": 0.00553, "memory": 18765, "data_time": 0.03506, "decode.loss_seg": 0.59203, "decode.acc_seg": 76.3692, "aux.loss_seg": 0.29412, "aux.acc_seg": 73.23811, "loss": 0.88615, "time": 0.49781}
{"mode": "train", "epoch": 2, "iter": 500, "lr": 0.00541, "memory": 18765, "aAcc": 0.8795, "mIoU": 0.3881, "mAcc": 0.4651, "IoU.road": 0.9292, "IoU.sidewalk": 0.6056, "IoU.building": 0.7724, "IoU.wall": 0.002, "IoU.fence": 0.2136, "IoU.pole": 0.3592, "IoU.traffic light": 0.228, "IoU.traffic sign": 0.5275, "IoU.vegetation": 0.8089, "IoU.terrain": 0.2322, "IoU.sky": 0.7041, "IoU.person": 0.6289, "IoU.rider": 0.0018, "IoU.car": 0.7539, "IoU.truck": 0.0, "IoU.bus": 0.0125, "IoU.train": 0.0, "IoU.motorcycle": 0.0, "IoU.bicycle": 0.5934, "Acc.road": 0.9656, "Acc.sidewalk": 0.7158, "Acc.building": 0.8384, "Acc.wall": 0.002, "Acc.fence": 0.2593, "Acc.pole": 0.4564, "Acc.traffic light": 0.2418, "Acc.traffic sign": 0.6023, "Acc.vegetation": 0.9716, "Acc.terrain": 0.2622, "Acc.sky": 0.9759, "Acc.person": 0.8165, "Acc.rider": 0.0018, "Acc.car": 0.931, "Acc.truck": 0.0, "Acc.bus": 0.0128, "Acc.train": 0.0, "Acc.motorcycle": 0.0, "Acc.bicycle": 0.7829, "data_time": 0.00947, "decode.loss_seg": 0.50739, "decode.acc_seg": 77.42398, "aux.loss_seg": 0.25235, "aux.acc_seg": 74.63697, "loss": 0.75974, "time": 0.51869}
{"mode": "train", "epoch": 2, "iter": 2050, "lr": 0.00529, "memory": 18765, "data_time": 6.91112, "decode.loss_seg": 0.55495, "decode.acc_seg": 79.14086, "aux.loss_seg": 0.27886, "aux.acc_seg": 75.34762, "loss": 0.83381, "time": 7.37967}
{"mode": "train", "epoch": 2, "iter": 2100, "lr": 0.00517, "memory": 18765, "data_time": 0.01267, "decode.loss_seg": 0.50692, "decode.acc_seg": 79.28464, "aux.loss_seg": 0.24714, "aux.acc_seg": 76.42819, "loss": 0.75406, "time": 0.46624}
{"mode": "train", "epoch": 2, "iter": 2150, "lr": 0.00505, "memory": 18765, "data_time": 0.02019, "decode.loss_seg": 0.4674, "decode.acc_seg": 80.27626, "aux.loss_seg": 0.24364, "aux.acc_seg": 77.35498, "loss": 0.71105, "time": 0.51799}
{"mode": "train", "epoch": 2, "iter": 2200, "lr": 0.00493, "memory": 18765, "data_time": 0.01798, "decode.loss_seg": 0.57855, "decode.acc_seg": 76.87068, "aux.loss_seg": 0.28947, "aux.acc_seg": 73.18687, "loss": 0.86802, "time": 0.48773}
{"mode": "train", "epoch": 2, "iter": 2250, "lr": 0.00481, "memory": 18765, "data_time": 0.0174, "decode.loss_seg": 0.53093, "decode.acc_seg": 77.12798, "aux.loss_seg": 0.26267, "aux.acc_seg": 74.48454, "loss": 0.7936, "time": 0.49085}
{"mode": "train", "epoch": 2, "iter": 2300, "lr": 0.00469, "memory": 18765, "data_time": 0.01076, "decode.loss_seg": 0.52663, "decode.acc_seg": 77.6441, "aux.loss_seg": 0.26553, "aux.acc_seg": 74.08125, "loss": 0.79216, "time": 0.46551}
{"mode": "train", "epoch": 2, "iter": 2350, "lr": 0.00456, "memory": 18765, "data_time": 0.01545, "decode.loss_seg": 0.4183, "decode.acc_seg": 82.59837, "aux.loss_seg": 0.21429, "aux.acc_seg": 79.91506, "loss": 0.63259, "time": 0.483}
{"mode": "train", "epoch": 2, "iter": 2400, "lr": 0.00444, "memory": 18765, "data_time": 0.00971, "decode.loss_seg": 0.47211, "decode.acc_seg": 82.02053, "aux.loss_seg": 0.24643, "aux.acc_seg": 78.42148, "loss": 0.71854, "time": 0.4689}
{"mode": "train", "epoch": 2, "iter": 2450, "lr": 0.00432, "memory": 18765, "data_time": 0.0178, "decode.loss_seg": 0.4764, "decode.acc_seg": 81.27993, "aux.loss_seg": 0.23941, "aux.acc_seg": 77.93807, "loss": 0.7158, "time": 0.47922}
{"mode": "train", "epoch": 2, "iter": 2500, "lr": 0.0042, "memory": 18765, "data_time": 0.02069, "decode.loss_seg": 0.46875, "decode.acc_seg": 79.96645, "aux.loss_seg": 0.23248, "aux.acc_seg": 77.13272, "loss": 0.70123, "time": 0.5039}
{"mode": "train", "epoch": 2, "iter": 2550, "lr": 0.00407, "memory": 18765, "data_time": 0.01228, "decode.loss_seg": 0.44761, "decode.acc_seg": 81.98732, "aux.loss_seg": 0.23893, "aux.acc_seg": 78.15458, "loss": 0.68655, "time": 0.49458}
{"mode": "train", "epoch": 2, "iter": 2600, "lr": 0.00395, "memory": 18765, "data_time": 0.02004, "decode.loss_seg": 0.43596, "decode.acc_seg": 80.48491, "aux.loss_seg": 0.22632, "aux.acc_seg": 77.10555, "loss": 0.66228, "time": 0.50208}
{"mode": "train", "epoch": 2, "iter": 2650, "lr": 0.00383, "memory": 18765, "data_time": 0.00795, "decode.loss_seg": 0.45184, "decode.acc_seg": 82.6372, "aux.loss_seg": 0.23604, "aux.acc_seg": 79.33238, "loss": 0.68788, "time": 0.45981}
{"mode": "train", "epoch": 2, "iter": 2700, "lr": 0.0037, "memory": 18765, "data_time": 0.00869, "decode.loss_seg": 0.46982, "decode.acc_seg": 81.61138, "aux.loss_seg": 0.24723, "aux.acc_seg": 78.12003, "loss": 0.71704, "time": 0.46338}
{"mode": "train", "epoch": 2, "iter": 2750, "lr": 0.00358, "memory": 18765, "data_time": 0.01103, "decode.loss_seg": 0.47751, "decode.acc_seg": 78.82114, "aux.loss_seg": 0.23989, "aux.acc_seg": 75.86758, "loss": 0.7174, "time": 0.47227}
{"mode": "train", "epoch": 2, "iter": 2800, "lr": 0.00345, "memory": 18765, "data_time": 0.02021, "decode.loss_seg": 0.44793, "decode.acc_seg": 79.38028, "aux.loss_seg": 0.22697, "aux.acc_seg": 75.54011, "loss": 0.6749, "time": 0.4758}
{"mode": "train", "epoch": 2, "iter": 2850, "lr": 0.00333, "memory": 18765, "data_time": 0.00879, "decode.loss_seg": 0.43041, "decode.acc_seg": 81.42044, "aux.loss_seg": 0.22636, "aux.acc_seg": 78.0457, "loss": 0.65677, "time": 0.46668}
{"mode": "train", "epoch": 2, "iter": 2900, "lr": 0.0032, "memory": 18765, "data_time": 0.01788, "decode.loss_seg": 0.44389, "decode.acc_seg": 80.14412, "aux.loss_seg": 0.23422, "aux.acc_seg": 76.87528, "loss": 0.6781, "time": 0.49596}
{"mode": "train", "epoch": 2, "iter": 2950, "lr": 0.00307, "memory": 18765, "data_time": 0.01475, "decode.loss_seg": 0.43954, "decode.acc_seg": 78.37597, "aux.loss_seg": 0.22683, "aux.acc_seg": 75.48252, "loss": 0.66637, "time": 0.47777}
{"mode": "train", "epoch": 3, "iter": 3000, "lr": 0.00295, "memory": 18765, "data_time": 0.01743, "decode.loss_seg": 0.46978, "decode.acc_seg": 80.07459, "aux.loss_seg": 0.22814, "aux.acc_seg": 77.52154, "loss": 0.69792, "time": 0.52002}
{"mode": "train", "epoch": 3, "iter": 3050, "lr": 0.00282, "memory": 18765, "data_time": 0.01261, "decode.loss_seg": 0.41962, "decode.acc_seg": 82.33207, "aux.loss_seg": 0.2205, "aux.acc_seg": 79.22599, "loss": 0.64011, "time": 0.46459}
{"mode": "train", "epoch": 3, "iter": 3100, "lr": 0.00269, "memory": 18765, "data_time": 0.02585, "decode.loss_seg": 0.43444, "decode.acc_seg": 80.14101, "aux.loss_seg": 0.22116, "aux.acc_seg": 77.50931, "loss": 0.65561, "time": 0.49085}
{"mode": "train", "epoch": 3, "iter": 3150, "lr": 0.00256, "memory": 18765, "data_time": 0.01052, "decode.loss_seg": 0.42287, "decode.acc_seg": 83.3929, "aux.loss_seg": 0.22064, "aux.acc_seg": 80.3269, "loss": 0.64351, "time": 0.46515}
{"mode": "train", "epoch": 3, "iter": 3200, "lr": 0.00243, "memory": 18765, "data_time": 0.02182, "decode.loss_seg": 0.36836, "decode.acc_seg": 81.20219, "aux.loss_seg": 0.19872, "aux.acc_seg": 78.49738, "loss": 0.56708, "time": 0.47578}
{"mode": "train", "epoch": 3, "iter": 3250, "lr": 0.0023, "memory": 18765, "data_time": 0.01043, "decode.loss_seg": 0.44193, "decode.acc_seg": 81.7878, "aux.loss_seg": 0.23314, "aux.acc_seg": 78.78954, "loss": 0.67507, "time": 0.45731}
{"mode": "train", "epoch": 3, "iter": 3300, "lr": 0.00217, "memory": 18765, "data_time": 0.01595, "decode.loss_seg": 0.41983, "decode.acc_seg": 82.90164, "aux.loss_seg": 0.23272, "aux.acc_seg": 78.9872, "loss": 0.65254, "time": 0.4823}
{"mode": "train", "epoch": 3, "iter": 3350, "lr": 0.00203, "memory": 18765, "data_time": 0.01349, "decode.loss_seg": 0.40961, "decode.acc_seg": 82.40989, "aux.loss_seg": 0.22014, "aux.acc_seg": 78.84715, "loss": 0.62975, "time": 0.47547}
{"mode": "train", "epoch": 3, "iter": 3400, "lr": 0.0019, "memory": 18765, "data_time": 0.00882, "decode.loss_seg": 0.38136, "decode.acc_seg": 82.55238, "aux.loss_seg": 0.20924, "aux.acc_seg": 79.21668, "loss": 0.59061, "time": 0.47574}
{"mode": "train", "epoch": 3, "iter": 3450, "lr": 0.00176, "memory": 18765, "data_time": 0.02441, "decode.loss_seg": 0.4218, "decode.acc_seg": 83.55146, "aux.loss_seg": 0.22308, "aux.acc_seg": 80.19754, "loss": 0.64489, "time": 0.49988}
{"mode": "train", "epoch": 3, "iter": 3500, "lr": 0.00163, "memory": 18765, "data_time": 0.00913, "decode.loss_seg": 0.34571, "decode.acc_seg": 85.78052, "aux.loss_seg": 0.19406, "aux.acc_seg": 82.16847, "loss": 0.53976, "time": 0.49477}
{"mode": "train", "epoch": 3, "iter": 3550, "lr": 0.00149, "memory": 18765, "data_time": 0.03429, "decode.loss_seg": 0.37411, "decode.acc_seg": 81.84436, "aux.loss_seg": 0.19915, "aux.acc_seg": 79.28541, "loss": 0.57326, "time": 0.51459}
{"mode": "train", "epoch": 3, "iter": 3600, "lr": 0.00135, "memory": 18765, "data_time": 0.01156, "decode.loss_seg": 0.38262, "decode.acc_seg": 83.32371, "aux.loss_seg": 0.19736, "aux.acc_seg": 80.94824, "loss": 0.57999, "time": 0.46605}
{"mode": "train", "epoch": 3, "iter": 3650, "lr": 0.00121, "memory": 18765, "data_time": 0.00874, "decode.loss_seg": 0.35966, "decode.acc_seg": 82.20101, "aux.loss_seg": 0.19811, "aux.acc_seg": 78.64068, "loss": 0.55777, "time": 0.4666}
{"mode": "train", "epoch": 3, "iter": 3700, "lr": 0.00106, "memory": 18765, "data_time": 0.02273, "decode.loss_seg": 0.31404, "decode.acc_seg": 83.16303, "aux.loss_seg": 0.17071, "aux.acc_seg": 80.3682, "loss": 0.48475, "time": 0.49647}
{"mode": "train", "epoch": 3, "iter": 3750, "lr": 0.00092, "memory": 18765, "data_time": 0.01442, "decode.loss_seg": 0.35349, "decode.acc_seg": 83.4471, "aux.loss_seg": 0.18589, "aux.acc_seg": 81.2299, "loss": 0.53938, "time": 0.47187}
{"mode": "train", "epoch": 3, "iter": 3800, "lr": 0.00077, "memory": 18765, "data_time": 0.02339, "decode.loss_seg": 0.36534, "decode.acc_seg": 83.50561, "aux.loss_seg": 0.19966, "aux.acc_seg": 80.08014, "loss": 0.565, "time": 0.48625}
{"mode": "train", "epoch": 3, "iter": 3850, "lr": 0.00062, "memory": 18765, "data_time": 0.00958, "decode.loss_seg": 0.37254, "decode.acc_seg": 83.01288, "aux.loss_seg": 0.20689, "aux.acc_seg": 79.27195, "loss": 0.57944, "time": 0.46041}
{"mode": "train", "epoch": 3, "iter": 3900, "lr": 0.00046, "memory": 18765, "data_time": 0.01809, "decode.loss_seg": 0.47622, "decode.acc_seg": 80.22693, "aux.loss_seg": 0.25435, "aux.acc_seg": 76.77003, "loss": 0.73057, "time": 0.64714}
{"mode": "train", "epoch": 3, "iter": 3950, "lr": 0.0003, "memory": 18765, "data_time": 0.02539, "decode.loss_seg": 0.40646, "decode.acc_seg": 82.14256, "aux.loss_seg": 0.21466, "aux.acc_seg": 79.28998, "loss": 0.62112, "time": 0.60778}
{"mode": "train", "epoch": 3, "iter": 500, "lr": 0.00011, "memory": 18765, "aAcc": 0.9145, "mIoU": 0.4736, "mAcc": 0.5458, "IoU.road": 0.9469, "IoU.sidewalk": 0.6759, "IoU.building": 0.8469, "IoU.wall": 0.046, "IoU.fence": 0.2913, "IoU.pole": 0.473, "IoU.traffic light": 0.4569, "IoU.traffic sign": 0.5978, "IoU.vegetation": 0.8833, "IoU.terrain": 0.3593, "IoU.sky": 0.8723, "IoU.person": 0.6613, "IoU.rider": 0.1682, "IoU.car": 0.8266, "IoU.truck": 0.0204, "IoU.bus": 0.1567, "IoU.train": 0.0006, "IoU.motorcycle": 0.0539, "IoU.bicycle": 0.6607, "Acc.road": 0.9734, "Acc.sidewalk": 0.7903, "Acc.building": 0.9502, "Acc.wall": 0.0463, "Acc.fence": 0.3295, "Acc.pole": 0.5866, "Acc.traffic light": 0.5946, "Acc.traffic sign": 0.7695, "Acc.vegetation": 0.9432, "Acc.terrain": 0.3899, "Acc.sky": 0.9484, "Acc.person": 0.8263, "Acc.rider": 0.1836, "Acc.car": 0.964, "Acc.truck": 0.0207, "Acc.bus": 0.1774, "Acc.train": 0.0006, "Acc.motorcycle": 0.0571, "Acc.bicycle": 0.8178, "data_time": 0.03153, "decode.loss_seg": 0.39678, "decode.acc_seg": 82.68692, "aux.loss_seg": 0.2169, "aux.acc_seg": 79.20263, "loss": 0.61368, "time": 0.6818}
