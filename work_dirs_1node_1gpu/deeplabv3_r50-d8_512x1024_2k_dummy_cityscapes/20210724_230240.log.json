{"env_info": "sys.platform: linux\nPython: 3.7.10 (default, Feb 26 2021, 18:47:35) [GCC 7.3.0]\nCUDA available: True\nGPU 0: Tesla V100-SXM2-32GB\nCUDA_HOME: /mnt/cache/share/polaris/dep/cuda-10.1-cudnn7.6.5\nNVCC: Cuda compilation tools, release 10.1, V10.1.243\nGCC: gcc (GCC) 5.4.0\nPyTorch: 1.8.0\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) Math Kernel Library Version 2020.0.2 Product Build 20200624 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v1.7.0 (Git Hash 7aed236906b1f7a05c0917e5257a1af05e9ff683)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 10.1\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_37,code=compute_37\n  - CuDNN 7.6.3\n  - Magma 2.5.2\n  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=10.1, CUDNN_VERSION=7.6.3, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.8.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, \n\nTorchVision: 0.9.0\nOpenCV: 4.5.1\nMMCV: 1.3.8\nMMCV Compiler: GCC 7.3\nMMCV CUDA Compiler: 10.1\nMMSegmentation: 0.15.0+eb03a01", "seed": null, "exp_name": "deeplabv3_r50-d8_512x1024_2k_dummy_cityscapes.py", "mmseg_version": "0.15.0+eb03a01", "config": "norm_cfg = dict(type='SyncBN', requires_grad=True)\nmodel = dict(\n    type='EncoderDecoder',\n    pretrained='open-mmlab://resnet50_v1c',\n    backbone=dict(\n        type='ResNetV1c',\n        depth=50,\n        num_stages=4,\n        out_indices=(0, 1, 2, 3),\n        dilations=(1, 1, 2, 4),\n        strides=(1, 2, 1, 1),\n        norm_cfg=dict(type='SyncBN', requires_grad=True),\n        norm_eval=False,\n        style='pytorch',\n        contract_dilation=True,\n        pretrained='open-mmlab://resnet50_v1c'),\n    decode_head=dict(\n        type='ASPPHead',\n        in_channels=2048,\n        in_index=3,\n        channels=512,\n        dilations=(1, 12, 24, 36),\n        dropout_ratio=0.1,\n        num_classes=19,\n        norm_cfg=dict(type='SyncBN', requires_grad=True),\n        align_corners=False,\n        loss_decode=dict(\n            type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0)),\n    auxiliary_head=dict(\n        type='FCNHead',\n        in_channels=1024,\n        in_index=2,\n        channels=256,\n        num_convs=1,\n        concat_input=False,\n        dropout_ratio=0.1,\n        num_classes=19,\n        norm_cfg=dict(type='SyncBN', requires_grad=True),\n        align_corners=False,\n        loss_decode=dict(\n            type='CrossEntropyLoss', use_sigmoid=False, loss_weight=0.4)),\n    train_cfg=dict(),\n    test_cfg=dict(mode='whole'))\ndataset_type = 'CityscapesDataset'\ndata_root = 'data/cityscapes/'\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ncrop_size = (512, 1024)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations'),\n    dict(type='Resize', img_scale=(2048, 1024), ratio_range=(0.5, 2.0)),\n    dict(type='RandomCrop', crop_size=(512, 1024), cat_max_ratio=0.75),\n    dict(type='RandomFlip', prob=0.5),\n    dict(type='PhotoMetricDistortion'),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='Pad', size=(512, 1024), pad_val=0, seg_pad_val=255),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_semantic_seg'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(2048, 1024),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=2,\n    workers_per_gpu=2,\n    train=dict(\n        type='CityscapesDataset',\n        data_root='data/cityscapes/',\n        img_dir='leftImg8bit/train',\n        ann_dir='gtFine/train',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations'),\n            dict(\n                type='Resize', img_scale=(2048, 1024), ratio_range=(0.5, 2.0)),\n            dict(type='RandomCrop', crop_size=(512, 1024), cat_max_ratio=0.75),\n            dict(type='RandomFlip', prob=0.5),\n            dict(type='PhotoMetricDistortion'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size=(512, 1024), pad_val=0, seg_pad_val=255),\n            dict(type='DefaultFormatBundle'),\n            dict(type='Collect', keys=['img', 'gt_semantic_seg'])\n        ]),\n    val=dict(\n        type='CityscapesDataset',\n        data_root='data/cityscapes/',\n        img_dir='leftImg8bit/val',\n        ann_dir='gtFine/val',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(2048, 1024),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]),\n    test=dict(\n        type='CityscapesDataset',\n        data_root='data/cityscapes/',\n        img_dir='leftImg8bit/val',\n        ann_dir='gtFine/val',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(2048, 1024),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]))\nlog_config = dict(\n    interval=50, hooks=[dict(type='TextLoggerHook', by_epoch=False)])\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = None\nresume_from = None\nworkflow = [('train', 1)]\ncudnn_benchmark = True\noptimizer = dict(type='SGD', lr=0.01, momentum=0.9, weight_decay=0.0005)\noptimizer_config = dict()\nlr_config = dict(policy='poly', power=0.9, min_lr=0.0001, by_epoch=False)\nrunner = dict(type='IterBasedRunner', max_iters=2000)\ncheckpoint_config = dict(by_epoch=False, interval=8000)\nevaluation = dict(interval=8000, metric='mIoU')\nwork_dir = 'work_dirs_1node_1gpu/deeplabv3_r50-d8_512x1024_2k_dummy_cityscapes'\ngpu_ids = range(0, 1)\nseed = None\n", "CLASSES": ["road", "sidewalk", "building", "wall", "fence", "pole", "traffic light", "traffic sign", "vegetation", "terrain", "sky", "person", "rider", "car", "truck", "bus", "train", "motorcycle", "bicycle"], "PALETTE": [[128, 64, 128], [244, 35, 232], [70, 70, 70], [102, 102, 156], [190, 153, 153], [153, 153, 153], [250, 170, 30], [220, 220, 0], [107, 142, 35], [152, 251, 152], [70, 130, 180], [220, 20, 60], [255, 0, 0], [0, 0, 142], [0, 0, 70], [0, 60, 100], [0, 80, 100], [0, 0, 230], [119, 11, 32]]}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 0.00978, "memory": 18984, "data_time": 0.1078, "decode.loss_seg": 1.83619, "decode.acc_seg": 39.15788, "aux.loss_seg": 0.81216, "aux.acc_seg": 33.47193, "loss": 2.64836, "time": 1.16702}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 0.00956, "memory": 18984, "data_time": 0.01699, "decode.loss_seg": 1.68826, "decode.acc_seg": 42.09607, "aux.loss_seg": 0.68668, "aux.acc_seg": 41.00559, "loss": 2.37493, "time": 0.80984}
{"mode": "train", "epoch": 1, "iter": 150, "lr": 0.00933, "memory": 18984, "data_time": 0.01529, "decode.loss_seg": 1.81038, "decode.acc_seg": 39.59473, "aux.loss_seg": 0.69167, "aux.acc_seg": 41.40987, "loss": 2.50205, "time": 0.73223}
{"mode": "train", "epoch": 1, "iter": 200, "lr": 0.00911, "memory": 18984, "data_time": 0.02539, "decode.loss_seg": 1.97, "decode.acc_seg": 34.19233, "aux.loss_seg": 0.70538, "aux.acc_seg": 36.6028, "loss": 2.67538, "time": 0.90068}
{"mode": "train", "epoch": 1, "iter": 250, "lr": 0.00888, "memory": 18984, "data_time": 0.0144, "decode.loss_seg": 1.91432, "decode.acc_seg": 32.28149, "aux.loss_seg": 0.70928, "aux.acc_seg": 34.39748, "loss": 2.6236, "time": 0.67868}
{"mode": "train", "epoch": 1, "iter": 300, "lr": 0.00866, "memory": 18984, "data_time": 0.01229, "decode.loss_seg": 1.86607, "decode.acc_seg": 36.3836, "aux.loss_seg": 0.70974, "aux.acc_seg": 37.83354, "loss": 2.57581, "time": 0.67997}
{"mode": "train", "epoch": 1, "iter": 350, "lr": 0.00843, "memory": 18984, "data_time": 0.00879, "decode.loss_seg": 1.79695, "decode.acc_seg": 37.52552, "aux.loss_seg": 0.68579, "aux.acc_seg": 41.23248, "loss": 2.48274, "time": 0.66242}
{"mode": "train", "epoch": 1, "iter": 400, "lr": 0.0082, "memory": 18984, "data_time": 0.0126, "decode.loss_seg": 1.69074, "decode.acc_seg": 40.45269, "aux.loss_seg": 0.66578, "aux.acc_seg": 39.85452, "loss": 2.35652, "time": 0.65103}
{"mode": "train", "epoch": 1, "iter": 450, "lr": 0.00798, "memory": 18984, "data_time": 0.01347, "decode.loss_seg": 1.64309, "decode.acc_seg": 39.88253, "aux.loss_seg": 0.65858, "aux.acc_seg": 40.73922, "loss": 2.30167, "time": 0.6728}
{"mode": "train", "epoch": 1, "iter": 500, "lr": 0.00775, "memory": 18984, "data_time": 0.01073, "decode.loss_seg": 1.66364, "decode.acc_seg": 42.05272, "aux.loss_seg": 0.65386, "aux.acc_seg": 42.64804, "loss": 2.3175, "time": 0.66871}
{"mode": "train", "epoch": 1, "iter": 550, "lr": 0.00752, "memory": 18984, "data_time": 0.01392, "decode.loss_seg": 1.66306, "decode.acc_seg": 41.47279, "aux.loss_seg": 0.65333, "aux.acc_seg": 40.31323, "loss": 2.31639, "time": 0.67475}
{"mode": "train", "epoch": 1, "iter": 600, "lr": 0.00729, "memory": 18984, "data_time": 0.00748, "decode.loss_seg": 1.74255, "decode.acc_seg": 39.94448, "aux.loss_seg": 0.72297, "aux.acc_seg": 35.56806, "loss": 2.46552, "time": 0.64372}
{"mode": "train", "epoch": 1, "iter": 650, "lr": 0.00706, "memory": 18984, "data_time": 0.02247, "decode.loss_seg": 1.64995, "decode.acc_seg": 39.51669, "aux.loss_seg": 0.68427, "aux.acc_seg": 38.96194, "loss": 2.33423, "time": 0.69068}
{"mode": "train", "epoch": 1, "iter": 700, "lr": 0.00682, "memory": 18984, "data_time": 0.00984, "decode.loss_seg": 1.44889, "decode.acc_seg": 47.9969, "aux.loss_seg": 0.6261, "aux.acc_seg": 45.21755, "loss": 2.07499, "time": 0.66707}
{"mode": "train", "epoch": 1, "iter": 750, "lr": 0.00659, "memory": 18984, "data_time": 0.01245, "decode.loss_seg": 1.5479, "decode.acc_seg": 44.50168, "aux.loss_seg": 0.65321, "aux.acc_seg": 40.75807, "loss": 2.2011, "time": 0.67499}
{"mode": "train", "epoch": 1, "iter": 800, "lr": 0.00636, "memory": 18984, "data_time": 0.00931, "decode.loss_seg": 1.54635, "decode.acc_seg": 43.51197, "aux.loss_seg": 0.65862, "aux.acc_seg": 39.88, "loss": 2.20496, "time": 0.67137}
{"mode": "train", "epoch": 1, "iter": 850, "lr": 0.00612, "memory": 18984, "data_time": 0.02278, "decode.loss_seg": 1.50366, "decode.acc_seg": 46.71224, "aux.loss_seg": 0.64345, "aux.acc_seg": 42.59324, "loss": 2.14712, "time": 0.6851}
{"mode": "train", "epoch": 1, "iter": 900, "lr": 0.00589, "memory": 18984, "data_time": 0.0162, "decode.loss_seg": 1.54489, "decode.acc_seg": 42.81191, "aux.loss_seg": 0.63998, "aux.acc_seg": 40.31504, "loss": 2.18487, "time": 0.69278}
{"mode": "train", "epoch": 1, "iter": 950, "lr": 0.00565, "memory": 18984, "data_time": 0.02154, "decode.loss_seg": 1.49109, "decode.acc_seg": 46.19253, "aux.loss_seg": 0.62275, "aux.acc_seg": 44.13396, "loss": 2.11384, "time": 0.67022}
{"mode": "train", "epoch": 1, "iter": 1000, "lr": 0.00541, "memory": 18984, "data_time": 0.02915, "decode.loss_seg": 1.49399, "decode.acc_seg": 47.93433, "aux.loss_seg": 0.64741, "aux.acc_seg": 45.06829, "loss": 2.1414, "time": 0.68498}
{"mode": "train", "epoch": 1, "iter": 1050, "lr": 0.00517, "memory": 18984, "data_time": 0.00972, "decode.loss_seg": 1.45105, "decode.acc_seg": 44.95166, "aux.loss_seg": 0.62998, "aux.acc_seg": 41.20543, "loss": 2.08103, "time": 0.65894}
{"mode": "train", "epoch": 1, "iter": 1100, "lr": 0.00493, "memory": 18984, "data_time": 0.01131, "decode.loss_seg": 1.52107, "decode.acc_seg": 46.17377, "aux.loss_seg": 0.64607, "aux.acc_seg": 43.88101, "loss": 2.16713, "time": 0.64655}
{"mode": "train", "epoch": 1, "iter": 1150, "lr": 0.00469, "memory": 18984, "data_time": 0.01585, "decode.loss_seg": 1.5115, "decode.acc_seg": 45.38398, "aux.loss_seg": 0.64011, "aux.acc_seg": 42.30134, "loss": 2.15162, "time": 0.68529}
{"mode": "train", "epoch": 1, "iter": 1200, "lr": 0.00444, "memory": 18984, "data_time": 0.01766, "decode.loss_seg": 1.45929, "decode.acc_seg": 47.77076, "aux.loss_seg": 0.63494, "aux.acc_seg": 43.29461, "loss": 2.09423, "time": 0.66609}
{"mode": "train", "epoch": 1, "iter": 1250, "lr": 0.0042, "memory": 18984, "data_time": 0.01134, "decode.loss_seg": 1.27896, "decode.acc_seg": 52.60033, "aux.loss_seg": 0.57284, "aux.acc_seg": 49.18195, "loss": 1.8518, "time": 0.65058}
{"mode": "train", "epoch": 1, "iter": 1300, "lr": 0.00395, "memory": 18984, "data_time": 0.01282, "decode.loss_seg": 1.40157, "decode.acc_seg": 48.38766, "aux.loss_seg": 0.61673, "aux.acc_seg": 43.94081, "loss": 2.0183, "time": 0.69563}
{"mode": "train", "epoch": 1, "iter": 1350, "lr": 0.00371, "memory": 18984, "data_time": 0.01525, "decode.loss_seg": 1.36846, "decode.acc_seg": 49.4233, "aux.loss_seg": 0.6051, "aux.acc_seg": 44.29733, "loss": 1.97356, "time": 0.66199}
{"mode": "train", "epoch": 1, "iter": 1400, "lr": 0.00346, "memory": 18984, "data_time": 0.03222, "decode.loss_seg": 1.34975, "decode.acc_seg": 50.02327, "aux.loss_seg": 0.60666, "aux.acc_seg": 44.59027, "loss": 1.95641, "time": 0.67656}
{"mode": "train", "epoch": 1, "iter": 1450, "lr": 0.0032, "memory": 18984, "data_time": 0.01014, "decode.loss_seg": 1.20482, "decode.acc_seg": 54.93892, "aux.loss_seg": 0.55221, "aux.acc_seg": 49.67355, "loss": 1.75703, "time": 0.65707}
{"mode": "train", "epoch": 2, "iter": 1500, "lr": 0.00295, "memory": 18984, "data_time": 0.01751, "decode.loss_seg": 1.4597, "decode.acc_seg": 48.48167, "aux.loss_seg": 0.65211, "aux.acc_seg": 42.20848, "loss": 2.11181, "time": 0.66185}
{"mode": "train", "epoch": 2, "iter": 1550, "lr": 0.00269, "memory": 18984, "data_time": 0.01307, "decode.loss_seg": 1.32586, "decode.acc_seg": 51.88665, "aux.loss_seg": 0.60653, "aux.acc_seg": 45.54967, "loss": 1.9324, "time": 0.66274}
{"mode": "train", "epoch": 2, "iter": 1600, "lr": 0.00243, "memory": 18984, "data_time": 0.0191, "decode.loss_seg": 1.33972, "decode.acc_seg": 49.79752, "aux.loss_seg": 0.59133, "aux.acc_seg": 46.37311, "loss": 1.93105, "time": 0.66835}
{"mode": "train", "epoch": 2, "iter": 1650, "lr": 0.00217, "memory": 18984, "data_time": 0.01962, "decode.loss_seg": 1.29345, "decode.acc_seg": 52.27058, "aux.loss_seg": 0.57339, "aux.acc_seg": 47.67212, "loss": 1.86684, "time": 0.86968}
{"mode": "train", "epoch": 2, "iter": 1700, "lr": 0.0019, "memory": 18984, "data_time": 0.02081, "decode.loss_seg": 1.41615, "decode.acc_seg": 50.83866, "aux.loss_seg": 0.62155, "aux.acc_seg": 46.95759, "loss": 2.0377, "time": 0.75356}
{"mode": "train", "epoch": 2, "iter": 1750, "lr": 0.00163, "memory": 18984, "data_time": 0.02582, "decode.loss_seg": 1.29204, "decode.acc_seg": 51.00262, "aux.loss_seg": 0.58782, "aux.acc_seg": 45.13248, "loss": 1.87986, "time": 0.87965}
{"mode": "train", "epoch": 2, "iter": 1800, "lr": 0.00135, "memory": 18984, "data_time": 0.01172, "decode.loss_seg": 1.21145, "decode.acc_seg": 52.79243, "aux.loss_seg": 0.55174, "aux.acc_seg": 47.98913, "loss": 1.76319, "time": 0.74053}
{"mode": "train", "epoch": 2, "iter": 1850, "lr": 0.00107, "memory": 18984, "data_time": 0.03619, "decode.loss_seg": 1.28608, "decode.acc_seg": 53.27959, "aux.loss_seg": 0.57708, "aux.acc_seg": 48.3174, "loss": 1.86317, "time": 0.8999}
{"mode": "train", "epoch": 2, "iter": 1900, "lr": 0.00077, "memory": 18984, "data_time": 0.03558, "decode.loss_seg": 1.25787, "decode.acc_seg": 54.06327, "aux.loss_seg": 0.56903, "aux.acc_seg": 49.11516, "loss": 1.82689, "time": 0.88317}
{"mode": "train", "epoch": 2, "iter": 1950, "lr": 0.00046, "memory": 18984, "data_time": 0.02273, "decode.loss_seg": 1.19091, "decode.acc_seg": 54.02008, "aux.loss_seg": 0.55778, "aux.acc_seg": 47.39273, "loss": 1.74869, "time": 0.86953}
{"mode": "train", "epoch": 2, "iter": 2000, "lr": 0.00011, "memory": 18984, "data_time": 0.03686, "decode.loss_seg": 1.30097, "decode.acc_seg": 52.14237, "aux.loss_seg": 0.5832, "aux.acc_seg": 47.30166, "loss": 1.88417, "time": 0.90289}
