{"env_info": "sys.platform: linux\nPython: 3.7.10 (default, Feb 26 2021, 18:47:35) [GCC 7.3.0]\nCUDA available: True\nGPU 0: Tesla V100-SXM2-32GB\nCUDA_HOME: /mnt/cache/share/polaris/dep/cuda-10.1-cudnn7.6.5\nNVCC: Cuda compilation tools, release 10.1, V10.1.243\nGCC: gcc (GCC) 5.4.0\nPyTorch: 1.8.0\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) Math Kernel Library Version 2020.0.2 Product Build 20200624 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v1.7.0 (Git Hash 7aed236906b1f7a05c0917e5257a1af05e9ff683)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 10.1\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_37,code=compute_37\n  - CuDNN 7.6.3\n  - Magma 2.5.2\n  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=10.1, CUDNN_VERSION=7.6.3, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.8.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, \n\nTorchVision: 0.9.0\nOpenCV: 4.5.1\nMMCV: 1.3.8\nMMCV Compiler: GCC 7.3\nMMCV CUDA Compiler: 10.1\nMMSegmentation: 0.15.0+eb03a01", "seed": null, "exp_name": "upernet_r50_512x1024_2k_dummy_cityscapes.py", "mmseg_version": "0.15.0+eb03a01", "config": "norm_cfg = dict(type='SyncBN', requires_grad=True)\nmodel = dict(\n    type='EncoderDecoder',\n    pretrained='open-mmlab://resnet50_v1c',\n    backbone=dict(\n        type='ResNetV1c',\n        depth=50,\n        num_stages=4,\n        out_indices=(0, 1, 2, 3),\n        dilations=(1, 1, 1, 1),\n        strides=(1, 2, 2, 2),\n        norm_cfg=dict(type='SyncBN', requires_grad=True),\n        norm_eval=False,\n        style='pytorch',\n        contract_dilation=True,\n        pretrained='open-mmlab://resnet50_v1c'),\n    decode_head=dict(\n        type='UPerHead',\n        in_channels=[256, 512, 1024, 2048],\n        in_index=[0, 1, 2, 3],\n        pool_scales=(1, 2, 3, 6),\n        channels=512,\n        dropout_ratio=0.1,\n        num_classes=19,\n        norm_cfg=dict(type='SyncBN', requires_grad=True),\n        align_corners=False,\n        loss_decode=dict(\n            type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0)),\n    auxiliary_head=dict(\n        type='FCNHead',\n        in_channels=1024,\n        in_index=2,\n        channels=256,\n        num_convs=1,\n        concat_input=False,\n        dropout_ratio=0.1,\n        num_classes=19,\n        norm_cfg=dict(type='SyncBN', requires_grad=True),\n        align_corners=False,\n        loss_decode=dict(\n            type='CrossEntropyLoss', use_sigmoid=False, loss_weight=0.4)),\n    train_cfg=dict(),\n    test_cfg=dict(mode='whole'))\ndataset_type = 'DummyCityscapes'\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ncrop_size = (512, 1024)\ntrain_pipeline = [\n    dict(type='Resize', img_scale=(2048, 1024), ratio_range=(0.5, 2.0)),\n    dict(type='RandomCrop', crop_size=(512, 1024), cat_max_ratio=0.75),\n    dict(type='RandomFlip', prob=0.5),\n    dict(type='PhotoMetricDistortion'),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_semantic_seg'])\n]\ntest_pipeline = [\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(2048, 1024),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=2,\n    workers_per_gpu=2,\n    train=dict(\n        type='DummyCityscapes',\n        pipeline=[\n            dict(\n                type='Resize', img_scale=(2048, 1024), ratio_range=(0.5, 2.0)),\n            dict(type='RandomCrop', crop_size=(512, 1024), cat_max_ratio=0.75),\n            dict(type='RandomFlip', prob=0.5),\n            dict(type='PhotoMetricDistortion'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='DefaultFormatBundle'),\n            dict(type='Collect', keys=['img', 'gt_semantic_seg'])\n        ]),\n    val=dict(\n        type='DummyCityscapes',\n        pipeline=[\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(2048, 1024),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]),\n    test=dict(\n        type='DummyCityscapes',\n        pipeline=[\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(2048, 1024),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]))\nlog_config = dict(\n    interval=50, hooks=[dict(type='TextLoggerHook', by_epoch=False)])\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = None\nresume_from = None\nworkflow = [('train', 1)]\ncudnn_benchmark = True\noptimizer = dict(type='SGD', lr=0.01, momentum=0.9, weight_decay=0.0005)\noptimizer_config = dict()\nlr_config = dict(policy='poly', power=0.9, min_lr=0.0001, by_epoch=False)\nrunner = dict(type='IterBasedRunner', max_iters=2000)\ncheckpoint_config = dict(by_epoch=False, interval=8000)\nevaluation = dict(interval=8000, metric='mIoU')\nwork_dir = 'work_dirs_1node_1gpu/upernet_r50_512x1024_2k_dummy_cityscapes'\ngpu_ids = range(0, 1)\nseed = None\n", "CLASSES": ["road", "sidewalk", "building", "wall", "fence", "pole", "traffic light", "traffic sign", "vegetation", "terrain", "sky", "person", "rider", "car", "truck", "bus", "train", "motorcycle", "bicycle"], "PALETTE": [[128, 64, 128], [244, 35, 232], [70, 70, 70], [102, 102, 156], [190, 153, 153], [153, 153, 153], [250, 170, 30], [220, 220, 0], [107, 142, 35], [152, 251, 152], [70, 130, 180], [220, 20, 60], [255, 0, 0], [0, 0, 142], [0, 0, 70], [0, 60, 100], [0, 80, 100], [0, 0, 230], [119, 11, 32]]}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 0.00978, "memory": 19971, "data_time": 0.05567, "decode.loss_seg": 2.95216, "decode.acc_seg": 5.26142, "aux.loss_seg": 1.17893, "aux.acc_seg": 5.26026, "loss": 4.13109, "time": 0.82773}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 0.00956, "memory": 19971, "data_time": 0.01739, "decode.loss_seg": 2.95027, "decode.acc_seg": 5.26596, "aux.loss_seg": 1.17876, "aux.acc_seg": 5.26115, "loss": 4.12903, "time": 0.50655}
{"mode": "train", "epoch": 1, "iter": 150, "lr": 0.00933, "memory": 19971, "data_time": 0.01683, "decode.loss_seg": 2.94915, "decode.acc_seg": 5.26647, "aux.loss_seg": 1.17868, "aux.acc_seg": 5.27334, "loss": 4.12783, "time": 0.59968}
{"mode": "train", "epoch": 1, "iter": 200, "lr": 0.00911, "memory": 19971, "data_time": 0.03071, "decode.loss_seg": 2.94828, "decode.acc_seg": 5.27499, "aux.loss_seg": 1.17862, "aux.acc_seg": 5.25144, "loss": 4.1269, "time": 0.62782}
{"mode": "train", "epoch": 1, "iter": 250, "lr": 0.00888, "memory": 19971, "data_time": 0.01269, "decode.loss_seg": 2.94765, "decode.acc_seg": 5.26032, "aux.loss_seg": 1.17854, "aux.acc_seg": 5.26432, "loss": 4.12619, "time": 0.53939}
{"mode": "train", "epoch": 1, "iter": 300, "lr": 0.00866, "memory": 19971, "data_time": 0.02249, "decode.loss_seg": 2.94717, "decode.acc_seg": 5.26177, "aux.loss_seg": 1.17851, "aux.acc_seg": 5.26422, "loss": 4.12568, "time": 0.53451}
{"mode": "train", "epoch": 1, "iter": 350, "lr": 0.00843, "memory": 19971, "data_time": 0.03244, "decode.loss_seg": 2.94665, "decode.acc_seg": 5.26049, "aux.loss_seg": 1.17844, "aux.acc_seg": 5.25397, "loss": 4.12509, "time": 0.54472}
{"mode": "train", "epoch": 1, "iter": 400, "lr": 0.0082, "memory": 19971, "data_time": 0.01422, "decode.loss_seg": 2.94634, "decode.acc_seg": 5.27069, "aux.loss_seg": 1.1784, "aux.acc_seg": 5.24454, "loss": 4.12475, "time": 0.62747}
{"mode": "train", "epoch": 1, "iter": 450, "lr": 0.00798, "memory": 19971, "data_time": 0.01053, "decode.loss_seg": 2.94605, "decode.acc_seg": 5.26951, "aux.loss_seg": 1.17836, "aux.acc_seg": 5.26462, "loss": 4.12441, "time": 0.36071}
{"mode": "train", "epoch": 1, "iter": 500, "lr": 0.00775, "memory": 19971, "data_time": 0.0371, "decode.loss_seg": 2.9458, "decode.acc_seg": 5.24817, "aux.loss_seg": 1.17833, "aux.acc_seg": 5.26177, "loss": 4.12413, "time": 0.38762}
{"mode": "train", "epoch": 1, "iter": 550, "lr": 0.00752, "memory": 19971, "data_time": 0.02905, "decode.loss_seg": 2.94564, "decode.acc_seg": 5.25882, "aux.loss_seg": 1.17829, "aux.acc_seg": 5.25997, "loss": 4.12393, "time": 0.6705}
{"mode": "train", "epoch": 1, "iter": 600, "lr": 0.00729, "memory": 19971, "data_time": 0.02042, "decode.loss_seg": 2.94548, "decode.acc_seg": 5.26635, "aux.loss_seg": 1.17826, "aux.acc_seg": 5.25948, "loss": 4.12374, "time": 0.68506}
{"mode": "train", "epoch": 1, "iter": 650, "lr": 0.00706, "memory": 19971, "data_time": 0.01226, "decode.loss_seg": 2.94536, "decode.acc_seg": 5.25887, "aux.loss_seg": 1.17823, "aux.acc_seg": 5.26564, "loss": 4.12359, "time": 0.55706}
{"mode": "train", "epoch": 1, "iter": 700, "lr": 0.00682, "memory": 19971, "data_time": 0.02777, "decode.loss_seg": 2.94529, "decode.acc_seg": 5.26207, "aux.loss_seg": 1.17821, "aux.acc_seg": 5.27489, "loss": 4.1235, "time": 0.45165}
{"mode": "train", "epoch": 1, "iter": 750, "lr": 0.00659, "memory": 19971, "data_time": 0.01097, "decode.loss_seg": 2.94521, "decode.acc_seg": 5.26102, "aux.loss_seg": 1.17819, "aux.acc_seg": 5.27069, "loss": 4.1234, "time": 0.36645}
{"mode": "train", "epoch": 1, "iter": 800, "lr": 0.00636, "memory": 19971, "data_time": 0.02819, "decode.loss_seg": 2.94516, "decode.acc_seg": 5.25449, "aux.loss_seg": 1.17819, "aux.acc_seg": 5.251, "loss": 4.12335, "time": 0.39542}
{"mode": "train", "epoch": 1, "iter": 850, "lr": 0.00612, "memory": 19971, "data_time": 0.01451, "decode.loss_seg": 2.9451, "decode.acc_seg": 5.27346, "aux.loss_seg": 1.17817, "aux.acc_seg": 5.26269, "loss": 4.12327, "time": 0.40189}
{"mode": "train", "epoch": 1, "iter": 900, "lr": 0.00589, "memory": 19971, "data_time": 0.01516, "decode.loss_seg": 2.94505, "decode.acc_seg": 5.26206, "aux.loss_seg": 1.17815, "aux.acc_seg": 5.26504, "loss": 4.1232, "time": 0.40919}
{"mode": "train", "epoch": 1, "iter": 950, "lr": 0.00565, "memory": 19971, "data_time": 0.02173, "decode.loss_seg": 2.94499, "decode.acc_seg": 5.2649, "aux.loss_seg": 1.17813, "aux.acc_seg": 5.27424, "loss": 4.12312, "time": 0.40819}
{"mode": "train", "epoch": 1, "iter": 1000, "lr": 0.00541, "memory": 19971, "data_time": 0.0158, "decode.loss_seg": 2.94497, "decode.acc_seg": 5.26808, "aux.loss_seg": 1.17812, "aux.acc_seg": 5.27169, "loss": 4.12309, "time": 0.39585}
{"mode": "train", "epoch": 1, "iter": 1050, "lr": 0.00517, "memory": 19971, "data_time": 0.01468, "decode.loss_seg": 2.94495, "decode.acc_seg": 5.26829, "aux.loss_seg": 1.17812, "aux.acc_seg": 5.25823, "loss": 4.12307, "time": 0.37874}
{"mode": "train", "epoch": 1, "iter": 1100, "lr": 0.00493, "memory": 19971, "data_time": 0.01325, "decode.loss_seg": 2.94492, "decode.acc_seg": 5.2494, "aux.loss_seg": 1.1781, "aux.acc_seg": 5.26771, "loss": 4.12302, "time": 0.37912}
{"mode": "train", "epoch": 1, "iter": 1150, "lr": 0.00469, "memory": 19971, "data_time": 0.00992, "decode.loss_seg": 2.94489, "decode.acc_seg": 5.26247, "aux.loss_seg": 1.17809, "aux.acc_seg": 5.25086, "loss": 4.12298, "time": 0.39913}
{"mode": "train", "epoch": 1, "iter": 1200, "lr": 0.00444, "memory": 19971, "data_time": 0.01139, "decode.loss_seg": 2.94489, "decode.acc_seg": 5.25919, "aux.loss_seg": 1.17808, "aux.acc_seg": 5.25813, "loss": 4.12297, "time": 0.40357}
{"mode": "train", "epoch": 1, "iter": 1250, "lr": 0.0042, "memory": 19971, "data_time": 0.02911, "decode.loss_seg": 2.94485, "decode.acc_seg": 5.27229, "aux.loss_seg": 1.17808, "aux.acc_seg": 5.26398, "loss": 4.12293, "time": 0.40894}
{"mode": "train", "epoch": 1, "iter": 1300, "lr": 0.00395, "memory": 19971, "data_time": 0.01851, "decode.loss_seg": 2.94482, "decode.acc_seg": 5.26466, "aux.loss_seg": 1.17807, "aux.acc_seg": 5.26555, "loss": 4.12289, "time": 0.3967}
{"mode": "train", "epoch": 1, "iter": 1350, "lr": 0.00371, "memory": 19971, "data_time": 0.01364, "decode.loss_seg": 2.94483, "decode.acc_seg": 5.25658, "aux.loss_seg": 1.17806, "aux.acc_seg": 5.27444, "loss": 4.12289, "time": 0.37619}
{"mode": "train", "epoch": 1, "iter": 1400, "lr": 0.00346, "memory": 19971, "data_time": 0.01743, "decode.loss_seg": 2.94478, "decode.acc_seg": 5.27416, "aux.loss_seg": 1.17806, "aux.acc_seg": 5.27094, "loss": 4.12284, "time": 0.39048}
{"mode": "train", "epoch": 1, "iter": 1450, "lr": 0.0032, "memory": 19971, "data_time": 0.00871, "decode.loss_seg": 2.94479, "decode.acc_seg": 5.2582, "aux.loss_seg": 1.17804, "aux.acc_seg": 5.2614, "loss": 4.12283, "time": 0.38464}
{"mode": "train", "epoch": 2, "iter": 1500, "lr": 0.00295, "memory": 19971, "data_time": 0.02727, "decode.loss_seg": 2.94478, "decode.acc_seg": 5.27207, "aux.loss_seg": 1.17804, "aux.acc_seg": 5.2698, "loss": 4.12282, "time": 0.38746}
{"mode": "train", "epoch": 2, "iter": 1550, "lr": 0.00269, "memory": 19971, "data_time": 0.00859, "decode.loss_seg": 2.94477, "decode.acc_seg": 5.26452, "aux.loss_seg": 1.17804, "aux.acc_seg": 5.26893, "loss": 4.12282, "time": 0.35805}
{"mode": "train", "epoch": 2, "iter": 1600, "lr": 0.00243, "memory": 19971, "data_time": 0.00903, "decode.loss_seg": 2.94476, "decode.acc_seg": 5.27112, "aux.loss_seg": 1.17803, "aux.acc_seg": 5.26671, "loss": 4.12279, "time": 0.38143}
{"mode": "train", "epoch": 2, "iter": 1650, "lr": 0.00217, "memory": 19971, "data_time": 0.01993, "decode.loss_seg": 2.94476, "decode.acc_seg": 5.25998, "aux.loss_seg": 1.17804, "aux.acc_seg": 5.26225, "loss": 4.1228, "time": 0.41021}
{"mode": "train", "epoch": 2, "iter": 1700, "lr": 0.0019, "memory": 19971, "data_time": 0.01301, "decode.loss_seg": 2.94474, "decode.acc_seg": 5.27549, "aux.loss_seg": 1.17803, "aux.acc_seg": 5.26121, "loss": 4.12278, "time": 0.375}
{"mode": "train", "epoch": 2, "iter": 1750, "lr": 0.00163, "memory": 19971, "data_time": 0.01714, "decode.loss_seg": 2.94476, "decode.acc_seg": 5.26895, "aux.loss_seg": 1.17803, "aux.acc_seg": 5.26752, "loss": 4.12279, "time": 0.39319}
{"mode": "train", "epoch": 2, "iter": 1800, "lr": 0.00135, "memory": 19971, "data_time": 0.0099, "decode.loss_seg": 2.94475, "decode.acc_seg": 5.25861, "aux.loss_seg": 1.17802, "aux.acc_seg": 5.26161, "loss": 4.12278, "time": 0.39146}
{"mode": "train", "epoch": 2, "iter": 1850, "lr": 0.00107, "memory": 19971, "data_time": 0.01894, "decode.loss_seg": 2.94472, "decode.acc_seg": 5.26427, "aux.loss_seg": 1.17801, "aux.acc_seg": 5.27362, "loss": 4.12273, "time": 0.40503}
{"mode": "train", "epoch": 2, "iter": 1900, "lr": 0.00077, "memory": 19971, "data_time": 0.01123, "decode.loss_seg": 2.94472, "decode.acc_seg": 5.26646, "aux.loss_seg": 1.17803, "aux.acc_seg": 5.2663, "loss": 4.12274, "time": 0.39892}
{"mode": "train", "epoch": 2, "iter": 1950, "lr": 0.00046, "memory": 19971, "data_time": 0.00961, "decode.loss_seg": 2.9447, "decode.acc_seg": 5.27867, "aux.loss_seg": 1.17802, "aux.acc_seg": 5.26765, "loss": 4.12273, "time": 0.37627}
{"mode": "train", "epoch": 2, "iter": 2000, "lr": 0.00011, "memory": 19971, "data_time": 0.01282, "decode.loss_seg": 2.94472, "decode.acc_seg": 5.26301, "aux.loss_seg": 1.17802, "aux.acc_seg": 5.26872, "loss": 4.12274, "time": 0.4202}
