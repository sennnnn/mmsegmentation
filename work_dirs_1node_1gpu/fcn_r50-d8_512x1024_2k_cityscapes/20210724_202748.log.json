{"env_info": "sys.platform: linux\nPython: 3.7.10 (default, Feb 26 2021, 18:47:35) [GCC 7.3.0]\nCUDA available: True\nGPU 0: Tesla V100-SXM2-32GB\nCUDA_HOME: /mnt/cache/share/polaris/dep/cuda-10.1-cudnn7.6.5\nNVCC: Cuda compilation tools, release 10.1, V10.1.243\nGCC: gcc (GCC) 5.4.0\nPyTorch: 1.8.0\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) Math Kernel Library Version 2020.0.2 Product Build 20200624 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v1.7.0 (Git Hash 7aed236906b1f7a05c0917e5257a1af05e9ff683)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 10.1\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_37,code=compute_37\n  - CuDNN 7.6.3\n  - Magma 2.5.2\n  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=10.1, CUDNN_VERSION=7.6.3, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.8.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, \n\nTorchVision: 0.9.0\nOpenCV: 4.5.1\nMMCV: 1.3.8\nMMCV Compiler: GCC 7.3\nMMCV CUDA Compiler: 10.1\nMMSegmentation: 0.15.0+3835e1d", "seed": null, "exp_name": "fcn_r50-d8_512x1024_2k_cityscapes.py", "mmseg_version": "0.15.0+3835e1d", "config": "norm_cfg = dict(type='SyncBN', requires_grad=True)\nmodel = dict(\n    type='EncoderDecoder',\n    pretrained='open-mmlab://resnet50_v1c',\n    backbone=dict(\n        type='ResNetV1c',\n        depth=50,\n        num_stages=4,\n        out_indices=(0, 1, 2, 3),\n        dilations=(1, 1, 2, 4),\n        strides=(1, 2, 1, 1),\n        norm_cfg=dict(type='SyncBN', requires_grad=True),\n        norm_eval=False,\n        style='pytorch',\n        contract_dilation=True,\n        pretrained='open-mmlab://resnet50_v1c'),\n    decode_head=dict(\n        type='FCNHead',\n        in_channels=2048,\n        in_index=3,\n        channels=512,\n        num_convs=2,\n        concat_input=True,\n        dropout_ratio=0.1,\n        num_classes=19,\n        norm_cfg=dict(type='SyncBN', requires_grad=True),\n        align_corners=False,\n        loss_decode=dict(\n            type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0)),\n    auxiliary_head=dict(\n        type='FCNHead',\n        in_channels=1024,\n        in_index=2,\n        channels=256,\n        num_convs=1,\n        concat_input=False,\n        dropout_ratio=0.1,\n        num_classes=19,\n        norm_cfg=dict(type='SyncBN', requires_grad=True),\n        align_corners=False,\n        loss_decode=dict(\n            type='CrossEntropyLoss', use_sigmoid=False, loss_weight=0.4)),\n    train_cfg=dict(),\n    test_cfg=dict(mode='whole'))\ndataset_type = 'CityscapesDataset'\ndata_root = 'data/cityscapes/'\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ncrop_size = (512, 1024)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations'),\n    dict(type='Resize', img_scale=(2048, 1024), ratio_range=(0.5, 2.0)),\n    dict(type='RandomCrop', crop_size=(512, 1024), cat_max_ratio=0.75),\n    dict(type='RandomFlip', prob=0.5),\n    dict(type='PhotoMetricDistortion'),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='Pad', size=(512, 1024), pad_val=0, seg_pad_val=255),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_semantic_seg'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(2048, 1024),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=2,\n    workers_per_gpu=2,\n    train=dict(\n        type='CityscapesDataset',\n        data_root='data/cityscapes/',\n        img_dir='leftImg8bit/train',\n        ann_dir='gtFine/train',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations'),\n            dict(\n                type='Resize', img_scale=(2048, 1024), ratio_range=(0.5, 2.0)),\n            dict(type='RandomCrop', crop_size=(512, 1024), cat_max_ratio=0.75),\n            dict(type='RandomFlip', prob=0.5),\n            dict(type='PhotoMetricDistortion'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size=(512, 1024), pad_val=0, seg_pad_val=255),\n            dict(type='DefaultFormatBundle'),\n            dict(type='Collect', keys=['img', 'gt_semantic_seg'])\n        ]),\n    val=dict(\n        type='CityscapesDataset',\n        data_root='data/cityscapes/',\n        img_dir='leftImg8bit/val',\n        ann_dir='gtFine/val',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(2048, 1024),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]),\n    test=dict(\n        type='CityscapesDataset',\n        data_root='data/cityscapes/',\n        img_dir='leftImg8bit/val',\n        ann_dir='gtFine/val',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(2048, 1024),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]))\nlog_config = dict(\n    interval=50, hooks=[dict(type='TextLoggerHook', by_epoch=False)])\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = None\nresume_from = None\nworkflow = [('train', 1)]\ncudnn_benchmark = True\noptimizer = dict(type='SGD', lr=0.01, momentum=0.9, weight_decay=0.0005)\noptimizer_config = dict()\nlr_config = dict(policy='poly', power=0.9, min_lr=0.0001, by_epoch=False)\nrunner = dict(type='IterBasedRunner', max_iters=2000)\ncheckpoint_config = dict(by_epoch=False, interval=8000)\nevaluation = dict(interval=8000, metric='mIoU')\nwork_dir = 'work_dirs_1node_1gpu/fcn_r50-d8_512x1024_2k_cityscapes'\ngpu_ids = range(0, 1)\nseed = None\n", "CLASSES": ["road", "sidewalk", "building", "wall", "fence", "pole", "traffic light", "traffic sign", "vegetation", "terrain", "sky", "person", "rider", "car", "truck", "bus", "train", "motorcycle", "bicycle"], "PALETTE": [[128, 64, 128], [244, 35, 232], [70, 70, 70], [102, 102, 156], [190, 153, 153], [153, 153, 153], [250, 170, 30], [220, 220, 0], [107, 142, 35], [152, 251, 152], [70, 130, 180], [220, 20, 60], [255, 0, 0], [0, 0, 142], [0, 0, 70], [0, 60, 100], [0, 80, 100], [0, 0, 230], [119, 11, 32]]}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 0.00978, "memory": 18773, "data_time": 0.07322, "decode.loss_seg": 1.63692, "decode.acc_seg": 45.72191, "aux.loss_seg": 0.75658, "aux.acc_seg": 36.01447, "loss": 2.3935, "time": 0.69299}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 0.00956, "memory": 18773, "data_time": 0.0121, "decode.loss_seg": 1.15748, "decode.acc_seg": 64.19776, "aux.loss_seg": 0.54364, "aux.acc_seg": 59.53199, "loss": 1.70112, "time": 0.48671}
{"mode": "train", "epoch": 1, "iter": 150, "lr": 0.00933, "memory": 18773, "data_time": 0.03269, "decode.loss_seg": 1.00818, "decode.acc_seg": 64.69766, "aux.loss_seg": 0.45355, "aux.acc_seg": 61.5327, "loss": 1.46173, "time": 0.60291}
{"mode": "train", "epoch": 1, "iter": 200, "lr": 0.00911, "memory": 18773, "data_time": 0.02245, "decode.loss_seg": 1.04371, "decode.acc_seg": 65.12684, "aux.loss_seg": 0.46154, "aux.acc_seg": 63.02901, "loss": 1.50525, "time": 0.52962}
{"mode": "train", "epoch": 1, "iter": 250, "lr": 0.00888, "memory": 18773, "data_time": 0.00895, "decode.loss_seg": 0.84436, "decode.acc_seg": 70.07159, "aux.loss_seg": 0.38978, "aux.acc_seg": 67.18777, "loss": 1.23414, "time": 0.38013}
{"mode": "train", "epoch": 1, "iter": 300, "lr": 0.00866, "memory": 18773, "data_time": 0.01914, "decode.loss_seg": 0.91695, "decode.acc_seg": 68.13084, "aux.loss_seg": 0.40595, "aux.acc_seg": 66.14765, "loss": 1.3229, "time": 0.49644}
{"mode": "train", "epoch": 1, "iter": 350, "lr": 0.00843, "memory": 18773, "data_time": 0.02308, "decode.loss_seg": 0.79746, "decode.acc_seg": 72.48505, "aux.loss_seg": 0.37242, "aux.acc_seg": 69.723, "loss": 1.16988, "time": 0.41891}
{"mode": "train", "epoch": 1, "iter": 400, "lr": 0.0082, "memory": 18773, "data_time": 0.0138, "decode.loss_seg": 0.87723, "decode.acc_seg": 68.66102, "aux.loss_seg": 0.39141, "aux.acc_seg": 65.54888, "loss": 1.26864, "time": 0.49654}
{"mode": "train", "epoch": 1, "iter": 450, "lr": 0.00798, "memory": 18773, "data_time": 0.01371, "decode.loss_seg": 0.76297, "decode.acc_seg": 73.36929, "aux.loss_seg": 0.35558, "aux.acc_seg": 69.45996, "loss": 1.11856, "time": 0.55275}
{"mode": "train", "epoch": 1, "iter": 500, "lr": 0.00775, "memory": 18773, "data_time": 0.0244, "decode.loss_seg": 0.69103, "decode.acc_seg": 75.35367, "aux.loss_seg": 0.32403, "aux.acc_seg": 72.00958, "loss": 1.01506, "time": 0.42849}
{"mode": "train", "epoch": 1, "iter": 550, "lr": 0.00752, "memory": 18773, "data_time": 0.02907, "decode.loss_seg": 0.69667, "decode.acc_seg": 76.12594, "aux.loss_seg": 0.32625, "aux.acc_seg": 72.86003, "loss": 1.02292, "time": 0.42734}
{"mode": "train", "epoch": 1, "iter": 600, "lr": 0.00729, "memory": 18773, "data_time": 0.0277, "decode.loss_seg": 0.68986, "decode.acc_seg": 75.71425, "aux.loss_seg": 0.32867, "aux.acc_seg": 72.27456, "loss": 1.01853, "time": 0.43476}
{"mode": "train", "epoch": 1, "iter": 650, "lr": 0.00706, "memory": 18773, "data_time": 0.01166, "decode.loss_seg": 0.79712, "decode.acc_seg": 72.04481, "aux.loss_seg": 0.37505, "aux.acc_seg": 69.16597, "loss": 1.17217, "time": 0.55988}
{"mode": "train", "epoch": 1, "iter": 700, "lr": 0.00682, "memory": 18773, "data_time": 0.02355, "decode.loss_seg": 0.72078, "decode.acc_seg": 74.446, "aux.loss_seg": 0.34064, "aux.acc_seg": 71.43285, "loss": 1.06142, "time": 0.41471}
{"mode": "train", "epoch": 1, "iter": 750, "lr": 0.00659, "memory": 18773, "data_time": 0.01277, "decode.loss_seg": 0.60381, "decode.acc_seg": 74.77053, "aux.loss_seg": 0.29382, "aux.acc_seg": 71.94636, "loss": 0.89763, "time": 0.57618}
{"mode": "train", "epoch": 1, "iter": 800, "lr": 0.00636, "memory": 18773, "data_time": 0.01835, "decode.loss_seg": 0.62766, "decode.acc_seg": 76.22526, "aux.loss_seg": 0.29207, "aux.acc_seg": 73.60367, "loss": 0.91972, "time": 0.45076}
{"mode": "train", "epoch": 1, "iter": 850, "lr": 0.00612, "memory": 18773, "data_time": 0.02035, "decode.loss_seg": 0.60069, "decode.acc_seg": 77.27539, "aux.loss_seg": 0.28396, "aux.acc_seg": 75.21602, "loss": 0.88465, "time": 0.57776}
{"mode": "train", "epoch": 1, "iter": 900, "lr": 0.00589, "memory": 18773, "data_time": 0.01929, "decode.loss_seg": 0.54527, "decode.acc_seg": 77.47461, "aux.loss_seg": 0.2669, "aux.acc_seg": 74.48521, "loss": 0.81217, "time": 0.53091}
{"mode": "train", "epoch": 1, "iter": 950, "lr": 0.00565, "memory": 18773, "data_time": 0.01415, "decode.loss_seg": 0.49333, "decode.acc_seg": 79.63448, "aux.loss_seg": 0.25552, "aux.acc_seg": 76.41189, "loss": 0.74885, "time": 0.38942}
{"mode": "train", "epoch": 1, "iter": 1000, "lr": 0.00541, "memory": 18773, "data_time": 0.01303, "decode.loss_seg": 0.60735, "decode.acc_seg": 76.69857, "aux.loss_seg": 0.28856, "aux.acc_seg": 74.70325, "loss": 0.89591, "time": 0.66223}
{"mode": "train", "epoch": 1, "iter": 1050, "lr": 0.00517, "memory": 18773, "data_time": 0.02433, "decode.loss_seg": 0.60282, "decode.acc_seg": 75.1898, "aux.loss_seg": 0.29464, "aux.acc_seg": 72.37192, "loss": 0.89746, "time": 0.41448}
{"mode": "train", "epoch": 1, "iter": 1100, "lr": 0.00493, "memory": 18773, "data_time": 0.03286, "decode.loss_seg": 0.59364, "decode.acc_seg": 76.40187, "aux.loss_seg": 0.29137, "aux.acc_seg": 73.65852, "loss": 0.88502, "time": 0.42939}
{"mode": "train", "epoch": 1, "iter": 1150, "lr": 0.00469, "memory": 18773, "data_time": 0.03223, "decode.loss_seg": 0.49421, "decode.acc_seg": 79.89449, "aux.loss_seg": 0.24994, "aux.acc_seg": 76.53469, "loss": 0.74415, "time": 0.44035}
{"mode": "train", "epoch": 1, "iter": 1200, "lr": 0.00444, "memory": 18773, "data_time": 0.00903, "decode.loss_seg": 0.54089, "decode.acc_seg": 79.4335, "aux.loss_seg": 0.27236, "aux.acc_seg": 76.33654, "loss": 0.81324, "time": 0.39}
{"mode": "train", "epoch": 1, "iter": 1250, "lr": 0.0042, "memory": 18773, "data_time": 0.01097, "decode.loss_seg": 0.50159, "decode.acc_seg": 80.21968, "aux.loss_seg": 0.25174, "aux.acc_seg": 77.14167, "loss": 0.75333, "time": 0.43008}
{"mode": "train", "epoch": 1, "iter": 1300, "lr": 0.00395, "memory": 18773, "data_time": 0.01155, "decode.loss_seg": 0.48858, "decode.acc_seg": 79.69792, "aux.loss_seg": 0.2522, "aux.acc_seg": 76.14653, "loss": 0.74078, "time": 0.38658}
{"mode": "train", "epoch": 1, "iter": 1350, "lr": 0.00371, "memory": 18773, "data_time": 0.01451, "decode.loss_seg": 0.5167, "decode.acc_seg": 76.63136, "aux.loss_seg": 0.25382, "aux.acc_seg": 73.8678, "loss": 0.77052, "time": 0.41195}
{"mode": "train", "epoch": 1, "iter": 1400, "lr": 0.00346, "memory": 18773, "data_time": 0.01026, "decode.loss_seg": 0.43184, "decode.acc_seg": 80.63469, "aux.loss_seg": 0.21967, "aux.acc_seg": 78.22679, "loss": 0.65151, "time": 0.39924}
{"mode": "train", "epoch": 1, "iter": 1450, "lr": 0.0032, "memory": 18773, "data_time": 0.01472, "decode.loss_seg": 0.40264, "decode.acc_seg": 82.60917, "aux.loss_seg": 0.20521, "aux.acc_seg": 80.22122, "loss": 0.60785, "time": 0.40207}
{"mode": "train", "epoch": 2, "iter": 1500, "lr": 0.00295, "memory": 18773, "data_time": 0.0176, "decode.loss_seg": 0.48782, "decode.acc_seg": 79.92372, "aux.loss_seg": 0.25387, "aux.acc_seg": 76.30177, "loss": 0.74169, "time": 0.40588}
{"mode": "train", "epoch": 2, "iter": 1550, "lr": 0.00269, "memory": 18773, "data_time": 0.00984, "decode.loss_seg": 0.47939, "decode.acc_seg": 79.64956, "aux.loss_seg": 0.25185, "aux.acc_seg": 76.329, "loss": 0.73125, "time": 0.3865}
{"mode": "train", "epoch": 2, "iter": 1600, "lr": 0.00243, "memory": 18773, "data_time": 0.01456, "decode.loss_seg": 0.52087, "decode.acc_seg": 80.43945, "aux.loss_seg": 0.27431, "aux.acc_seg": 76.53056, "loss": 0.79518, "time": 0.41024}
{"mode": "train", "epoch": 2, "iter": 1650, "lr": 0.00217, "memory": 18773, "data_time": 0.01985, "decode.loss_seg": 0.45946, "decode.acc_seg": 79.67239, "aux.loss_seg": 0.23453, "aux.acc_seg": 77.24189, "loss": 0.69399, "time": 0.42341}
{"mode": "train", "epoch": 2, "iter": 1700, "lr": 0.0019, "memory": 18773, "data_time": 0.02045, "decode.loss_seg": 0.44068, "decode.acc_seg": 82.39448, "aux.loss_seg": 0.23767, "aux.acc_seg": 78.84377, "loss": 0.67835, "time": 0.42314}
{"mode": "train", "epoch": 2, "iter": 1750, "lr": 0.00163, "memory": 18773, "data_time": 0.01114, "decode.loss_seg": 0.3777, "decode.acc_seg": 82.62689, "aux.loss_seg": 0.21198, "aux.acc_seg": 79.23923, "loss": 0.58968, "time": 0.42088}
{"mode": "train", "epoch": 2, "iter": 1800, "lr": 0.00135, "memory": 18773, "data_time": 0.01126, "decode.loss_seg": 0.38012, "decode.acc_seg": 82.24522, "aux.loss_seg": 0.20586, "aux.acc_seg": 78.95093, "loss": 0.58598, "time": 0.43031}
{"mode": "train", "epoch": 2, "iter": 1850, "lr": 0.00107, "memory": 18773, "data_time": 0.01071, "decode.loss_seg": 0.40665, "decode.acc_seg": 81.89315, "aux.loss_seg": 0.21807, "aux.acc_seg": 78.29955, "loss": 0.62472, "time": 0.42208}
{"mode": "train", "epoch": 2, "iter": 1900, "lr": 0.00077, "memory": 18773, "data_time": 0.01081, "decode.loss_seg": 0.41, "decode.acc_seg": 81.21873, "aux.loss_seg": 0.21823, "aux.acc_seg": 78.29392, "loss": 0.62823, "time": 0.41729}
{"mode": "train", "epoch": 2, "iter": 1950, "lr": 0.00046, "memory": 18773, "data_time": 0.00855, "decode.loss_seg": 0.51582, "decode.acc_seg": 79.84901, "aux.loss_seg": 0.26992, "aux.acc_seg": 75.92952, "loss": 0.78574, "time": 0.39887}
{"mode": "train", "epoch": 2, "iter": 2000, "lr": 0.00011, "memory": 18773, "data_time": 0.03411, "decode.loss_seg": 0.46791, "decode.acc_seg": 79.62062, "aux.loss_seg": 0.24939, "aux.acc_seg": 76.31983, "loss": 0.7173, "time": 0.45299}
