{"env_info": "sys.platform: linux\nPython: 3.7.10 (default, Feb 26 2021, 18:47:35) [GCC 7.3.0]\nCUDA available: True\nGPU 0,1,2,3: Tesla V100-SXM2-32GB\nCUDA_HOME: /mnt/cache/share/polaris/dep/cuda-10.1-cudnn7.6.5\nNVCC: Cuda compilation tools, release 10.1, V10.1.243\nGCC: gcc (GCC) 5.4.0\nPyTorch: 1.8.0\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) Math Kernel Library Version 2020.0.2 Product Build 20200624 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v1.7.0 (Git Hash 7aed236906b1f7a05c0917e5257a1af05e9ff683)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 10.1\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_37,code=compute_37\n  - CuDNN 7.6.3\n  - Magma 2.5.2\n  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=10.1, CUDNN_VERSION=7.6.3, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.8.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, \n\nTorchVision: 0.9.0\nOpenCV: 4.5.1\nMMCV: 1.3.8\nMMCV Compiler: GCC 7.3\nMMCV CUDA Compiler: 10.1\nMMSegmentation: 0.15.0+99bc5c0", "seed": null, "exp_name": "fcn_r50-d8_512x1024_2k_dummy_cityscapes.py", "mmseg_version": "0.15.0+99bc5c0", "config": "norm_cfg = dict(type='SyncBN', requires_grad=True)\nmodel = dict(\n    type='EncoderDecoder',\n    pretrained='open-mmlab://resnet50_v1c',\n    backbone=dict(\n        type='ResNetV1c',\n        depth=50,\n        num_stages=4,\n        out_indices=(0, 1, 2, 3),\n        dilations=(1, 1, 2, 4),\n        strides=(1, 2, 1, 1),\n        norm_cfg=dict(type='SyncBN', requires_grad=True),\n        norm_eval=False,\n        style='pytorch',\n        contract_dilation=True,\n        pretrained='open-mmlab://resnet50_v1c'),\n    decode_head=dict(\n        type='FCNHead',\n        in_channels=2048,\n        in_index=3,\n        channels=512,\n        num_convs=2,\n        concat_input=True,\n        dropout_ratio=0.1,\n        num_classes=19,\n        norm_cfg=dict(type='SyncBN', requires_grad=True),\n        align_corners=False,\n        loss_decode=dict(\n            type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0)),\n    auxiliary_head=dict(\n        type='FCNHead',\n        in_channels=1024,\n        in_index=2,\n        channels=256,\n        num_convs=1,\n        concat_input=False,\n        dropout_ratio=0.1,\n        num_classes=19,\n        norm_cfg=dict(type='SyncBN', requires_grad=True),\n        align_corners=False,\n        loss_decode=dict(\n            type='CrossEntropyLoss', use_sigmoid=False, loss_weight=0.4)),\n    train_cfg=dict(),\n    test_cfg=dict(mode='whole'))\ndataset_type = 'DummyCityscapes'\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ncrop_size = (512, 1024)\ntrain_pipeline = [\n    dict(type='Resize', img_scale=(2048, 1024), ratio_range=(0.5, 2.0)),\n    dict(type='RandomCrop', crop_size=(512, 1024), cat_max_ratio=0.75),\n    dict(type='RandomFlip', prob=0.5),\n    dict(type='PhotoMetricDistortion'),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_semantic_seg'])\n]\ntest_pipeline = [\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(2048, 1024),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=2,\n    workers_per_gpu=2,\n    train=dict(\n        type='DummyCityscapes',\n        pipeline=[\n            dict(\n                type='Resize', img_scale=(2048, 1024), ratio_range=(0.5, 2.0)),\n            dict(type='RandomCrop', crop_size=(512, 1024), cat_max_ratio=0.75),\n            dict(type='RandomFlip', prob=0.5),\n            dict(type='PhotoMetricDistortion'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='DefaultFormatBundle'),\n            dict(type='Collect', keys=['img', 'gt_semantic_seg'])\n        ]),\n    val=dict(\n        type='DummyCityscapes',\n        pipeline=[\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(2048, 1024),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]),\n    test=dict(\n        type='DummyCityscapes',\n        pipeline=[\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(2048, 1024),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]))\nlog_config = dict(\n    interval=50, hooks=[dict(type='TextLoggerHook', by_epoch=False)])\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = None\nresume_from = None\nworkflow = [('train', 1)]\ncudnn_benchmark = True\noptimizer = dict(type='SGD', lr=0.01, momentum=0.9, weight_decay=0.0005)\noptimizer_config = dict()\nlr_config = dict(policy='poly', power=0.9, min_lr=0.0001, by_epoch=False)\nrunner = dict(type='IterBasedRunner', max_iters=2000)\ncheckpoint_config = dict(by_epoch=False, interval=8000)\nevaluation = dict(interval=8000, metric='mIoU')\nwork_dir = 'work_dirs_2node_8gpu/fcn_r50-d8_512x1024_2k_dummy_cityscapes'\ngpu_ids = range(0, 1)\nseed = None\n", "CLASSES": ["road", "sidewalk", "building", "wall", "fence", "pole", "traffic light", "traffic sign", "vegetation", "terrain", "sky", "person", "rider", "car", "truck", "bus", "train", "motorcycle", "bicycle"], "PALETTE": [[128, 64, 128], [244, 35, 232], [70, 70, 70], [102, 102, 156], [190, 153, 153], [153, 153, 153], [250, 170, 30], [220, 220, 0], [107, 142, 35], [152, 251, 152], [70, 130, 180], [220, 20, 60], [255, 0, 0], [0, 0, 142], [0, 0, 70], [0, 60, 100], [0, 80, 100], [0, 0, 230], [119, 11, 32]]}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 0.00978, "memory": 18774, "data_time": 0.04556, "decode.loss_seg": 2.95084, "decode.acc_seg": 5.25998, "aux.loss_seg": 1.17912, "aux.acc_seg": 5.2621, "loss": 4.12996, "time": 1.47969}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 0.00956, "memory": 18774, "data_time": 0.01376, "decode.loss_seg": 2.94905, "decode.acc_seg": 5.26377, "aux.loss_seg": 1.17891, "aux.acc_seg": 5.26328, "loss": 4.12796, "time": 0.60841}
{"mode": "train", "epoch": 1, "iter": 150, "lr": 0.00933, "memory": 18774, "data_time": 0.01857, "decode.loss_seg": 2.94831, "decode.acc_seg": 5.26849, "aux.loss_seg": 1.17882, "aux.acc_seg": 5.26358, "loss": 4.12713, "time": 0.61319}
{"mode": "train", "epoch": 2, "iter": 200, "lr": 0.00911, "memory": 18774, "data_time": 0.02937, "decode.loss_seg": 2.94781, "decode.acc_seg": 5.25965, "aux.loss_seg": 1.17874, "aux.acc_seg": 5.26405, "loss": 4.12654, "time": 0.67936}
{"mode": "train", "epoch": 2, "iter": 250, "lr": 0.00888, "memory": 18774, "data_time": 0.01731, "decode.loss_seg": 2.94736, "decode.acc_seg": 5.26235, "aux.loss_seg": 1.17867, "aux.acc_seg": 5.25821, "loss": 4.12603, "time": 0.62102}
{"mode": "train", "epoch": 2, "iter": 300, "lr": 0.00866, "memory": 18774, "data_time": 0.01437, "decode.loss_seg": 2.94702, "decode.acc_seg": 5.26355, "aux.loss_seg": 1.17861, "aux.acc_seg": 5.26471, "loss": 4.12563, "time": 0.59077}
{"mode": "train", "epoch": 2, "iter": 350, "lr": 0.00843, "memory": 18774, "data_time": 0.01434, "decode.loss_seg": 2.94675, "decode.acc_seg": 5.25932, "aux.loss_seg": 1.17856, "aux.acc_seg": 5.26549, "loss": 4.12531, "time": 0.58093}
{"mode": "train", "epoch": 3, "iter": 400, "lr": 0.0082, "memory": 18774, "data_time": 0.0202, "decode.loss_seg": 2.94648, "decode.acc_seg": 5.26033, "aux.loss_seg": 1.17851, "aux.acc_seg": 5.26351, "loss": 4.12499, "time": 0.54587}
{"mode": "train", "epoch": 3, "iter": 450, "lr": 0.00798, "memory": 18774, "data_time": 0.02133, "decode.loss_seg": 2.94627, "decode.acc_seg": 5.25919, "aux.loss_seg": 1.17847, "aux.acc_seg": 5.26076, "loss": 4.12473, "time": 0.70128}
{"mode": "train", "epoch": 3, "iter": 500, "lr": 0.00775, "memory": 18774, "data_time": 0.02128, "decode.loss_seg": 2.94607, "decode.acc_seg": 5.26209, "aux.loss_seg": 1.17843, "aux.acc_seg": 5.26027, "loss": 4.1245, "time": 0.61522}
{"mode": "train", "epoch": 3, "iter": 550, "lr": 0.00752, "memory": 18774, "data_time": 0.02049, "decode.loss_seg": 2.94589, "decode.acc_seg": 5.26289, "aux.loss_seg": 1.17839, "aux.acc_seg": 5.26272, "loss": 4.12428, "time": 0.56439}
{"mode": "train", "epoch": 4, "iter": 600, "lr": 0.00729, "memory": 18774, "data_time": 0.03071, "decode.loss_seg": 2.94572, "decode.acc_seg": 5.26073, "aux.loss_seg": 1.17836, "aux.acc_seg": 5.25809, "loss": 4.12407, "time": 0.64265}
{"mode": "train", "epoch": 4, "iter": 650, "lr": 0.00706, "memory": 18774, "data_time": 0.01723, "decode.loss_seg": 2.94556, "decode.acc_seg": 5.26268, "aux.loss_seg": 1.17832, "aux.acc_seg": 5.26388, "loss": 4.12388, "time": 0.76983}
{"mode": "train", "epoch": 4, "iter": 700, "lr": 0.00682, "memory": 18774, "data_time": 0.03132, "decode.loss_seg": 2.94543, "decode.acc_seg": 5.26394, "aux.loss_seg": 1.17829, "aux.acc_seg": 5.25981, "loss": 4.12372, "time": 0.71245}
{"mode": "train", "epoch": 5, "iter": 750, "lr": 0.00659, "memory": 18774, "data_time": 0.02274, "decode.loss_seg": 2.94529, "decode.acc_seg": 5.26107, "aux.loss_seg": 1.17827, "aux.acc_seg": 5.26213, "loss": 4.12356, "time": 0.67679}
{"mode": "train", "epoch": 5, "iter": 800, "lr": 0.00636, "memory": 18774, "data_time": 0.01497, "decode.loss_seg": 2.94519, "decode.acc_seg": 5.25756, "aux.loss_seg": 1.17824, "aux.acc_seg": 5.26366, "loss": 4.12343, "time": 0.5691}
{"mode": "train", "epoch": 5, "iter": 850, "lr": 0.00612, "memory": 18774, "data_time": 0.01671, "decode.loss_seg": 2.94509, "decode.acc_seg": 5.26591, "aux.loss_seg": 1.17822, "aux.acc_seg": 5.25845, "loss": 4.12331, "time": 0.59662}
{"mode": "train", "epoch": 5, "iter": 900, "lr": 0.00589, "memory": 18774, "data_time": 0.02186, "decode.loss_seg": 2.94501, "decode.acc_seg": 5.2625, "aux.loss_seg": 1.1782, "aux.acc_seg": 5.26329, "loss": 4.12321, "time": 0.74947}
{"mode": "train", "epoch": 6, "iter": 950, "lr": 0.00565, "memory": 18774, "data_time": 0.03132, "decode.loss_seg": 2.94496, "decode.acc_seg": 5.26773, "aux.loss_seg": 1.17817, "aux.acc_seg": 5.26486, "loss": 4.12313, "time": 0.61951}
{"mode": "train", "epoch": 6, "iter": 1000, "lr": 0.00541, "memory": 18774, "data_time": 0.01881, "decode.loss_seg": 2.94491, "decode.acc_seg": 5.26873, "aux.loss_seg": 1.17816, "aux.acc_seg": 5.26241, "loss": 4.12307, "time": 0.77071}
{"mode": "train", "epoch": 6, "iter": 1050, "lr": 0.00517, "memory": 18774, "data_time": 0.0394, "decode.loss_seg": 2.94489, "decode.acc_seg": 5.26341, "aux.loss_seg": 1.17815, "aux.acc_seg": 5.26274, "loss": 4.12303, "time": 0.73554}
{"mode": "train", "epoch": 6, "iter": 1100, "lr": 0.00493, "memory": 18774, "data_time": 0.01712, "decode.loss_seg": 2.94485, "decode.acc_seg": 5.26081, "aux.loss_seg": 1.17813, "aux.acc_seg": 5.26001, "loss": 4.12298, "time": 0.61131}
{"mode": "train", "epoch": 7, "iter": 1150, "lr": 0.00469, "memory": 18774, "data_time": 0.02199, "decode.loss_seg": 2.94482, "decode.acc_seg": 5.26728, "aux.loss_seg": 1.17812, "aux.acc_seg": 5.26308, "loss": 4.12294, "time": 0.67247}
{"mode": "train", "epoch": 7, "iter": 1200, "lr": 0.00444, "memory": 18774, "data_time": 0.02394, "decode.loss_seg": 2.9448, "decode.acc_seg": 5.26481, "aux.loss_seg": 1.17811, "aux.acc_seg": 5.2636, "loss": 4.12291, "time": 0.63645}
{"mode": "train", "epoch": 7, "iter": 1250, "lr": 0.0042, "memory": 18774, "data_time": 0.01989, "decode.loss_seg": 2.94477, "decode.acc_seg": 5.26302, "aux.loss_seg": 1.1781, "aux.acc_seg": 5.26476, "loss": 4.12287, "time": 0.56781}
{"mode": "train", "epoch": 7, "iter": 1300, "lr": 0.00395, "memory": 18774, "data_time": 0.02735, "decode.loss_seg": 2.94477, "decode.acc_seg": 5.26393, "aux.loss_seg": 1.17809, "aux.acc_seg": 5.26045, "loss": 4.12286, "time": 0.58328}
{"mode": "train", "epoch": 8, "iter": 1350, "lr": 0.00371, "memory": 18774, "data_time": 0.03249, "decode.loss_seg": 2.94474, "decode.acc_seg": 5.2667, "aux.loss_seg": 1.17808, "aux.acc_seg": 5.26317, "loss": 4.12283, "time": 0.58942}
{"mode": "train", "epoch": 8, "iter": 1400, "lr": 0.00346, "memory": 18774, "data_time": 0.02461, "decode.loss_seg": 2.94474, "decode.acc_seg": 5.26174, "aux.loss_seg": 1.17807, "aux.acc_seg": 5.25946, "loss": 4.12281, "time": 0.61443}
{"mode": "train", "epoch": 8, "iter": 1450, "lr": 0.0032, "memory": 18774, "data_time": 0.03007, "decode.loss_seg": 2.94473, "decode.acc_seg": 5.26007, "aux.loss_seg": 1.17807, "aux.acc_seg": 5.25448, "loss": 4.1228, "time": 0.59954}
{"mode": "train", "epoch": 9, "iter": 1500, "lr": 0.00295, "memory": 18774, "data_time": 0.02259, "decode.loss_seg": 2.94471, "decode.acc_seg": 5.2645, "aux.loss_seg": 1.17806, "aux.acc_seg": 5.26564, "loss": 4.12277, "time": 0.62705}
{"mode": "train", "epoch": 9, "iter": 1550, "lr": 0.00269, "memory": 18774, "data_time": 0.01576, "decode.loss_seg": 2.94471, "decode.acc_seg": 5.26443, "aux.loss_seg": 1.17806, "aux.acc_seg": 5.26363, "loss": 4.12277, "time": 0.73587}
{"mode": "train", "epoch": 9, "iter": 1600, "lr": 0.00243, "memory": 18774, "data_time": 0.0214, "decode.loss_seg": 2.9447, "decode.acc_seg": 5.265, "aux.loss_seg": 1.17805, "aux.acc_seg": 5.26066, "loss": 4.12275, "time": 0.61469}
{"mode": "train", "epoch": 9, "iter": 1650, "lr": 0.00217, "memory": 18774, "data_time": 0.02056, "decode.loss_seg": 2.9447, "decode.acc_seg": 5.27047, "aux.loss_seg": 1.17805, "aux.acc_seg": 5.26371, "loss": 4.12275, "time": 0.62243}
{"mode": "train", "epoch": 10, "iter": 1700, "lr": 0.0019, "memory": 18774, "data_time": 0.01789, "decode.loss_seg": 2.94469, "decode.acc_seg": 5.2675, "aux.loss_seg": 1.17804, "aux.acc_seg": 5.26146, "loss": 4.12273, "time": 0.5859}
{"mode": "train", "epoch": 10, "iter": 1750, "lr": 0.00163, "memory": 18774, "data_time": 0.04176, "decode.loss_seg": 2.94468, "decode.acc_seg": 5.26042, "aux.loss_seg": 1.17804, "aux.acc_seg": 5.26545, "loss": 4.12272, "time": 0.84734}
{"mode": "train", "epoch": 10, "iter": 1800, "lr": 0.00135, "memory": 18774, "data_time": 0.02454, "decode.loss_seg": 2.94467, "decode.acc_seg": 5.26647, "aux.loss_seg": 1.17803, "aux.acc_seg": 5.265, "loss": 4.12271, "time": 0.64991}
{"mode": "train", "epoch": 10, "iter": 1850, "lr": 0.00107, "memory": 18774, "data_time": 0.02405, "decode.loss_seg": 2.94468, "decode.acc_seg": 5.25825, "aux.loss_seg": 1.17804, "aux.acc_seg": 5.25997, "loss": 4.12272, "time": 0.63117}
{"mode": "train", "epoch": 11, "iter": 1900, "lr": 0.00077, "memory": 18774, "data_time": 0.01893, "decode.loss_seg": 2.94468, "decode.acc_seg": 5.26099, "aux.loss_seg": 1.17803, "aux.acc_seg": 5.2626, "loss": 4.12271, "time": 0.67845}
{"mode": "train", "epoch": 11, "iter": 1950, "lr": 0.00046, "memory": 18774, "data_time": 0.0225, "decode.loss_seg": 2.94467, "decode.acc_seg": 5.2652, "aux.loss_seg": 1.17803, "aux.acc_seg": 5.26077, "loss": 4.1227, "time": 0.62497}
{"mode": "train", "epoch": 11, "iter": 2000, "lr": 0.00011, "memory": 18774, "data_time": 0.02751, "decode.loss_seg": 2.94467, "decode.acc_seg": 5.26654, "aux.loss_seg": 1.17803, "aux.acc_seg": 5.25935, "loss": 4.1227, "time": 0.84248}
