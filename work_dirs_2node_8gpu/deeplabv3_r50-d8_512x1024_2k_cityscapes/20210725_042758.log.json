{"env_info": "sys.platform: linux\nPython: 3.7.10 (default, Feb 26 2021, 18:47:35) [GCC 7.3.0]\nCUDA available: True\nGPU 0,1,2,3: Tesla V100-SXM2-32GB\nCUDA_HOME: /mnt/cache/share/polaris/dep/cuda-10.1-cudnn7.6.5\nNVCC: Cuda compilation tools, release 10.1, V10.1.243\nGCC: gcc (GCC) 5.4.0\nPyTorch: 1.8.0\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) Math Kernel Library Version 2020.0.2 Product Build 20200624 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v1.7.0 (Git Hash 7aed236906b1f7a05c0917e5257a1af05e9ff683)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 10.1\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_37,code=compute_37\n  - CuDNN 7.6.3\n  - Magma 2.5.2\n  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=10.1, CUDNN_VERSION=7.6.3, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.8.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, \n\nTorchVision: 0.9.0\nOpenCV: 4.5.1\nMMCV: 1.3.8\nMMCV Compiler: GCC 7.3\nMMCV CUDA Compiler: 10.1\nMMSegmentation: 0.15.0+99bc5c0", "seed": null, "exp_name": "deeplabv3_r50-d8_512x1024_2k_cityscapes.py", "mmseg_version": "0.15.0+99bc5c0", "config": "norm_cfg = dict(type='SyncBN', requires_grad=True)\nmodel = dict(\n    type='EncoderDecoder',\n    pretrained='open-mmlab://resnet50_v1c',\n    backbone=dict(\n        type='ResNetV1c',\n        depth=50,\n        num_stages=4,\n        out_indices=(0, 1, 2, 3),\n        dilations=(1, 1, 2, 4),\n        strides=(1, 2, 1, 1),\n        norm_cfg=dict(type='SyncBN', requires_grad=True),\n        norm_eval=False,\n        style='pytorch',\n        contract_dilation=True,\n        pretrained='open-mmlab://resnet50_v1c'),\n    decode_head=dict(\n        type='ASPPHead',\n        in_channels=2048,\n        in_index=3,\n        channels=512,\n        dilations=(1, 12, 24, 36),\n        dropout_ratio=0.1,\n        num_classes=19,\n        norm_cfg=dict(type='SyncBN', requires_grad=True),\n        align_corners=False,\n        loss_decode=dict(\n            type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0)),\n    auxiliary_head=dict(\n        type='FCNHead',\n        in_channels=1024,\n        in_index=2,\n        channels=256,\n        num_convs=1,\n        concat_input=False,\n        dropout_ratio=0.1,\n        num_classes=19,\n        norm_cfg=dict(type='SyncBN', requires_grad=True),\n        align_corners=False,\n        loss_decode=dict(\n            type='CrossEntropyLoss', use_sigmoid=False, loss_weight=0.4)),\n    train_cfg=dict(),\n    test_cfg=dict(mode='whole'))\ndataset_type = 'CityscapesDataset'\ndata_root = 'data/cityscapes/'\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ncrop_size = (512, 1024)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations'),\n    dict(type='Resize', img_scale=(2048, 1024), ratio_range=(0.5, 2.0)),\n    dict(type='RandomCrop', crop_size=(512, 1024), cat_max_ratio=0.75),\n    dict(type='RandomFlip', prob=0.5),\n    dict(type='PhotoMetricDistortion'),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='Pad', size=(512, 1024), pad_val=0, seg_pad_val=255),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_semantic_seg'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(2048, 1024),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=2,\n    workers_per_gpu=2,\n    train=dict(\n        type='CityscapesDataset',\n        data_root='data/cityscapes/',\n        img_dir='leftImg8bit/train',\n        ann_dir='gtFine/train',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations'),\n            dict(\n                type='Resize', img_scale=(2048, 1024), ratio_range=(0.5, 2.0)),\n            dict(type='RandomCrop', crop_size=(512, 1024), cat_max_ratio=0.75),\n            dict(type='RandomFlip', prob=0.5),\n            dict(type='PhotoMetricDistortion'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size=(512, 1024), pad_val=0, seg_pad_val=255),\n            dict(type='DefaultFormatBundle'),\n            dict(type='Collect', keys=['img', 'gt_semantic_seg'])\n        ]),\n    val=dict(\n        type='CityscapesDataset',\n        data_root='data/cityscapes/',\n        img_dir='leftImg8bit/val',\n        ann_dir='gtFine/val',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(2048, 1024),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]),\n    test=dict(\n        type='CityscapesDataset',\n        data_root='data/cityscapes/',\n        img_dir='leftImg8bit/val',\n        ann_dir='gtFine/val',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(2048, 1024),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]))\nlog_config = dict(\n    interval=50, hooks=[dict(type='TextLoggerHook', by_epoch=False)])\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = None\nresume_from = None\nworkflow = [('train', 1)]\ncudnn_benchmark = True\noptimizer = dict(type='SGD', lr=0.01, momentum=0.9, weight_decay=0.0005)\noptimizer_config = dict()\nlr_config = dict(policy='poly', power=0.9, min_lr=0.0001, by_epoch=False)\nrunner = dict(type='IterBasedRunner', max_iters=2000)\ncheckpoint_config = dict(by_epoch=False, interval=8000)\nevaluation = dict(interval=8000, metric='mIoU')\nwork_dir = 'work_dirs_2node_8gpu/deeplabv3_r50-d8_512x1024_2k_cityscapes'\ngpu_ids = range(0, 1)\nseed = None\n", "CLASSES": ["road", "sidewalk", "building", "wall", "fence", "pole", "traffic light", "traffic sign", "vegetation", "terrain", "sky", "person", "rider", "car", "truck", "bus", "train", "motorcycle", "bicycle"], "PALETTE": [[128, 64, 128], [244, 35, 232], [70, 70, 70], [102, 102, 156], [190, 153, 153], [153, 153, 153], [250, 170, 30], [220, 220, 0], [107, 142, 35], [152, 251, 152], [70, 130, 180], [220, 20, 60], [255, 0, 0], [0, 0, 142], [0, 0, 70], [0, 60, 100], [0, 80, 100], [0, 0, 230], [119, 11, 32]]}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 0.00978, "memory": 18985, "data_time": 0.03521, "decode.loss_seg": 1.47832, "decode.acc_seg": 52.87418, "aux.loss_seg": 0.75822, "aux.acc_seg": 41.38312, "loss": 2.23654, "time": 1.48528}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 0.00956, "memory": 18985, "data_time": 0.01388, "decode.loss_seg": 0.76518, "decode.acc_seg": 72.95922, "aux.loss_seg": 0.42295, "aux.acc_seg": 66.84305, "loss": 1.18813, "time": 0.91571}
{"mode": "train", "epoch": 1, "iter": 150, "lr": 0.00933, "memory": 18985, "data_time": 0.01257, "decode.loss_seg": 0.59928, "decode.acc_seg": 77.56092, "aux.loss_seg": 0.34298, "aux.acc_seg": 71.39581, "loss": 0.94226, "time": 0.92961}
{"mode": "train", "epoch": 2, "iter": 200, "lr": 0.00911, "memory": 18985, "data_time": 0.03143, "decode.loss_seg": 0.51672, "decode.acc_seg": 79.00073, "aux.loss_seg": 0.2958, "aux.acc_seg": 74.0511, "loss": 0.81252, "time": 0.84389}
{"mode": "train", "epoch": 2, "iter": 250, "lr": 0.00888, "memory": 18985, "data_time": 0.01464, "decode.loss_seg": 0.43253, "decode.acc_seg": 81.21508, "aux.loss_seg": 0.25524, "aux.acc_seg": 76.77995, "loss": 0.68778, "time": 0.97339}
{"mode": "train", "epoch": 2, "iter": 300, "lr": 0.00866, "memory": 18985, "data_time": 0.01752, "decode.loss_seg": 0.44764, "decode.acc_seg": 80.98311, "aux.loss_seg": 0.25896, "aux.acc_seg": 76.90857, "loss": 0.7066, "time": 0.97875}
{"mode": "train", "epoch": 2, "iter": 350, "lr": 0.00843, "memory": 18985, "data_time": 0.01418, "decode.loss_seg": 0.41812, "decode.acc_seg": 81.89304, "aux.loss_seg": 0.24554, "aux.acc_seg": 77.82682, "loss": 0.66366, "time": 0.93963}
{"mode": "train", "epoch": 3, "iter": 400, "lr": 0.0082, "memory": 18985, "data_time": 0.0566, "decode.loss_seg": 0.37338, "decode.acc_seg": 82.37007, "aux.loss_seg": 0.22165, "aux.acc_seg": 78.47614, "loss": 0.59503, "time": 0.97495}
{"mode": "train", "epoch": 3, "iter": 450, "lr": 0.00798, "memory": 18985, "data_time": 0.01503, "decode.loss_seg": 0.37723, "decode.acc_seg": 82.60222, "aux.loss_seg": 0.22277, "aux.acc_seg": 78.83993, "loss": 0.59999, "time": 0.98884}
{"mode": "train", "epoch": 3, "iter": 500, "lr": 0.00775, "memory": 18985, "data_time": 0.02083, "decode.loss_seg": 0.35307, "decode.acc_seg": 83.31971, "aux.loss_seg": 0.21317, "aux.acc_seg": 79.63442, "loss": 0.56625, "time": 0.93263}
{"mode": "train", "epoch": 3, "iter": 550, "lr": 0.00752, "memory": 18985, "data_time": 0.01319, "decode.loss_seg": 0.34039, "decode.acc_seg": 83.71571, "aux.loss_seg": 0.20724, "aux.acc_seg": 79.78903, "loss": 0.54764, "time": 0.84079}
{"mode": "train", "epoch": 4, "iter": 600, "lr": 0.00729, "memory": 18985, "data_time": 0.02392, "decode.loss_seg": 0.31358, "decode.acc_seg": 84.32121, "aux.loss_seg": 0.19404, "aux.acc_seg": 80.60898, "loss": 0.50762, "time": 1.00093}
{"mode": "train", "epoch": 4, "iter": 650, "lr": 0.00706, "memory": 18985, "data_time": 0.01599, "decode.loss_seg": 0.30095, "decode.acc_seg": 84.99451, "aux.loss_seg": 0.18259, "aux.acc_seg": 81.56568, "loss": 0.48354, "time": 1.06442}
{"mode": "train", "epoch": 4, "iter": 700, "lr": 0.00682, "memory": 18985, "data_time": 0.01941, "decode.loss_seg": 0.31876, "decode.acc_seg": 83.91223, "aux.loss_seg": 0.19855, "aux.acc_seg": 80.02123, "loss": 0.51732, "time": 1.02861}
{"mode": "train", "epoch": 5, "iter": 750, "lr": 0.00659, "memory": 18985, "data_time": 0.03288, "decode.loss_seg": 0.31604, "decode.acc_seg": 83.94647, "aux.loss_seg": 0.19438, "aux.acc_seg": 80.12864, "loss": 0.51042, "time": 0.82372}
{"mode": "train", "epoch": 5, "iter": 800, "lr": 0.00636, "memory": 18985, "data_time": 0.01674, "decode.loss_seg": 0.30242, "decode.acc_seg": 84.25634, "aux.loss_seg": 0.18133, "aux.acc_seg": 81.12452, "loss": 0.48374, "time": 0.91566}
{"mode": "train", "epoch": 5, "iter": 850, "lr": 0.00612, "memory": 18985, "data_time": 0.01427, "decode.loss_seg": 0.29464, "decode.acc_seg": 84.82845, "aux.loss_seg": 0.17536, "aux.acc_seg": 81.58645, "loss": 0.47, "time": 0.94539}
{"mode": "train", "epoch": 5, "iter": 900, "lr": 0.00589, "memory": 18985, "data_time": 0.01314, "decode.loss_seg": 0.29003, "decode.acc_seg": 84.30793, "aux.loss_seg": 0.18033, "aux.acc_seg": 80.7153, "loss": 0.47036, "time": 0.91614}
{"mode": "train", "epoch": 6, "iter": 950, "lr": 0.00565, "memory": 18985, "data_time": 0.05132, "decode.loss_seg": 0.31646, "decode.acc_seg": 84.15128, "aux.loss_seg": 0.18998, "aux.acc_seg": 80.54, "loss": 0.50644, "time": 0.92399}
{"mode": "train", "epoch": 6, "iter": 1000, "lr": 0.00541, "memory": 18985, "data_time": 0.0241, "decode.loss_seg": 0.2815, "decode.acc_seg": 85.19679, "aux.loss_seg": 0.1725, "aux.acc_seg": 81.77991, "loss": 0.45399, "time": 0.91369}
{"mode": "train", "epoch": 6, "iter": 1050, "lr": 0.00517, "memory": 18985, "data_time": 0.0182, "decode.loss_seg": 0.27877, "decode.acc_seg": 85.86293, "aux.loss_seg": 0.1703, "aux.acc_seg": 82.71842, "loss": 0.44908, "time": 0.95998}
{"mode": "train", "epoch": 6, "iter": 1100, "lr": 0.00493, "memory": 18985, "data_time": 0.01854, "decode.loss_seg": 0.28803, "decode.acc_seg": 84.73279, "aux.loss_seg": 0.17427, "aux.acc_seg": 81.29274, "loss": 0.4623, "time": 1.04557}
{"mode": "train", "epoch": 7, "iter": 1150, "lr": 0.00469, "memory": 18985, "data_time": 0.06443, "decode.loss_seg": 0.26254, "decode.acc_seg": 85.58451, "aux.loss_seg": 0.16139, "aux.acc_seg": 82.12634, "loss": 0.42393, "time": 1.09166}
{"mode": "train", "epoch": 7, "iter": 1200, "lr": 0.00444, "memory": 18985, "data_time": 0.01415, "decode.loss_seg": 0.26557, "decode.acc_seg": 86.01415, "aux.loss_seg": 0.16766, "aux.acc_seg": 82.31019, "loss": 0.43323, "time": 1.23631}
{"mode": "train", "epoch": 7, "iter": 1250, "lr": 0.0042, "memory": 18985, "data_time": 0.01338, "decode.loss_seg": 0.26053, "decode.acc_seg": 85.5995, "aux.loss_seg": 0.16141, "aux.acc_seg": 82.20705, "loss": 0.42194, "time": 1.06774}
{"mode": "train", "epoch": 7, "iter": 1300, "lr": 0.00395, "memory": 18985, "data_time": 0.02285, "decode.loss_seg": 0.27205, "decode.acc_seg": 85.23279, "aux.loss_seg": 0.16833, "aux.acc_seg": 81.77692, "loss": 0.44038, "time": 1.19301}
{"mode": "train", "epoch": 8, "iter": 1350, "lr": 0.00371, "memory": 18985, "data_time": 0.0608, "decode.loss_seg": 0.26045, "decode.acc_seg": 86.32623, "aux.loss_seg": 0.16193, "aux.acc_seg": 82.67922, "loss": 0.42238, "time": 1.24079}
{"mode": "train", "epoch": 8, "iter": 1400, "lr": 0.00346, "memory": 18985, "data_time": 0.02292, "decode.loss_seg": 0.25475, "decode.acc_seg": 85.60582, "aux.loss_seg": 0.16167, "aux.acc_seg": 82.0215, "loss": 0.41643, "time": 1.10453}
{"mode": "train", "epoch": 8, "iter": 1450, "lr": 0.0032, "memory": 18985, "data_time": 0.01953, "decode.loss_seg": 0.25641, "decode.acc_seg": 85.90026, "aux.loss_seg": 0.15724, "aux.acc_seg": 82.56806, "loss": 0.41365, "time": 1.07507}
{"mode": "train", "epoch": 9, "iter": 1500, "lr": 0.00295, "memory": 18985, "data_time": 0.03643, "decode.loss_seg": 0.25901, "decode.acc_seg": 86.06873, "aux.loss_seg": 0.15914, "aux.acc_seg": 82.72798, "loss": 0.41815, "time": 1.21333}
{"mode": "train", "epoch": 9, "iter": 1550, "lr": 0.00269, "memory": 18985, "data_time": 0.03021, "decode.loss_seg": 0.25862, "decode.acc_seg": 85.98467, "aux.loss_seg": 0.1624, "aux.acc_seg": 82.45203, "loss": 0.42102, "time": 1.43045}
{"mode": "train", "epoch": 9, "iter": 1600, "lr": 0.00243, "memory": 18985, "data_time": 0.01853, "decode.loss_seg": 0.24825, "decode.acc_seg": 86.4962, "aux.loss_seg": 0.15745, "aux.acc_seg": 82.97442, "loss": 0.4057, "time": 1.67298}
{"mode": "train", "epoch": 9, "iter": 1650, "lr": 0.00217, "memory": 18985, "data_time": 0.04516, "decode.loss_seg": 0.24712, "decode.acc_seg": 86.11102, "aux.loss_seg": 0.15822, "aux.acc_seg": 82.49896, "loss": 0.40534, "time": 1.90581}
{"mode": "train", "epoch": 10, "iter": 1700, "lr": 0.0019, "memory": 18985, "data_time": 0.05402, "decode.loss_seg": 0.24222, "decode.acc_seg": 85.97494, "aux.loss_seg": 0.15284, "aux.acc_seg": 82.69629, "loss": 0.39506, "time": 1.33723}
{"mode": "train", "epoch": 10, "iter": 1750, "lr": 0.00163, "memory": 18985, "data_time": 0.02177, "decode.loss_seg": 0.25219, "decode.acc_seg": 85.94717, "aux.loss_seg": 0.15878, "aux.acc_seg": 82.35458, "loss": 0.41097, "time": 1.22261}
{"mode": "train", "epoch": 10, "iter": 1800, "lr": 0.00135, "memory": 18985, "data_time": 0.01704, "decode.loss_seg": 0.23451, "decode.acc_seg": 86.18127, "aux.loss_seg": 0.14716, "aux.acc_seg": 82.91325, "loss": 0.38167, "time": 1.26958}
{"mode": "train", "epoch": 10, "iter": 1850, "lr": 0.00107, "memory": 18985, "data_time": 0.03646, "decode.loss_seg": 0.24009, "decode.acc_seg": 86.49603, "aux.loss_seg": 0.15172, "aux.acc_seg": 83.03597, "loss": 0.39181, "time": 1.31033}
{"mode": "train", "epoch": 11, "iter": 1900, "lr": 0.00077, "memory": 18985, "data_time": 0.07368, "decode.loss_seg": 0.24272, "decode.acc_seg": 86.43124, "aux.loss_seg": 0.16022, "aux.acc_seg": 82.41896, "loss": 0.40294, "time": 1.16212}
{"mode": "train", "epoch": 11, "iter": 1950, "lr": 0.00046, "memory": 18985, "data_time": 0.01782, "decode.loss_seg": 0.23846, "decode.acc_seg": 86.26949, "aux.loss_seg": 0.15507, "aux.acc_seg": 82.45546, "loss": 0.39353, "time": 1.21036}
{"mode": "train", "epoch": 11, "iter": 2000, "lr": 0.00011, "memory": 18985, "data_time": 0.02088, "decode.loss_seg": 0.24481, "decode.acc_seg": 86.51281, "aux.loss_seg": 0.15182, "aux.acc_seg": 83.19981, "loss": 0.39663, "time": 1.45301}
