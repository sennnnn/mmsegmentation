{"env_info": "sys.platform: linux\nPython: 3.7.10 (default, Feb 26 2021, 18:47:35) [GCC 7.3.0]\nCUDA available: True\nGPU 0,1,2,3: Tesla V100-SXM2-32GB\nCUDA_HOME: /mnt/cache/share/polaris/dep/cuda-10.1-cudnn7.6.5\nNVCC: Cuda compilation tools, release 10.1, V10.1.243\nGCC: gcc (GCC) 5.4.0\nPyTorch: 1.8.0\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) Math Kernel Library Version 2020.0.2 Product Build 20200624 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v1.7.0 (Git Hash 7aed236906b1f7a05c0917e5257a1af05e9ff683)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 10.1\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_37,code=compute_37\n  - CuDNN 7.6.3\n  - Magma 2.5.2\n  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=10.1, CUDNN_VERSION=7.6.3, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.8.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, \n\nTorchVision: 0.9.0\nOpenCV: 4.5.1\nMMCV: 1.3.8\nMMCV Compiler: GCC 7.3\nMMCV CUDA Compiler: 10.1\nMMSegmentation: 0.15.0+99bc5c0", "seed": null, "exp_name": "deeplabv3plus_r50-d8_512x1024_2k_cityscapes.py", "mmseg_version": "0.15.0+99bc5c0", "config": "norm_cfg = dict(type='SyncBN', requires_grad=True)\nmodel = dict(\n    type='EncoderDecoder',\n    pretrained='open-mmlab://resnet50_v1c',\n    backbone=dict(\n        type='ResNetV1c',\n        depth=50,\n        num_stages=4,\n        out_indices=(0, 1, 2, 3),\n        dilations=(1, 1, 2, 4),\n        strides=(1, 2, 1, 1),\n        norm_cfg=dict(type='SyncBN', requires_grad=True),\n        norm_eval=False,\n        style='pytorch',\n        contract_dilation=True,\n        pretrained='open-mmlab://resnet50_v1c'),\n    decode_head=dict(\n        type='DepthwiseSeparableASPPHead',\n        in_channels=2048,\n        in_index=3,\n        channels=512,\n        dilations=(1, 12, 24, 36),\n        c1_in_channels=256,\n        c1_channels=48,\n        dropout_ratio=0.1,\n        num_classes=19,\n        norm_cfg=dict(type='SyncBN', requires_grad=True),\n        align_corners=False,\n        loss_decode=dict(\n            type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0)),\n    auxiliary_head=dict(\n        type='FCNHead',\n        in_channels=1024,\n        in_index=2,\n        channels=256,\n        num_convs=1,\n        concat_input=False,\n        dropout_ratio=0.1,\n        num_classes=19,\n        norm_cfg=dict(type='SyncBN', requires_grad=True),\n        align_corners=False,\n        loss_decode=dict(\n            type='CrossEntropyLoss', use_sigmoid=False, loss_weight=0.4)),\n    train_cfg=dict(),\n    test_cfg=dict(mode='whole'))\ndataset_type = 'CityscapesDataset'\ndata_root = 'data/cityscapes/'\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ncrop_size = (512, 1024)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations'),\n    dict(type='Resize', img_scale=(2048, 1024), ratio_range=(0.5, 2.0)),\n    dict(type='RandomCrop', crop_size=(512, 1024), cat_max_ratio=0.75),\n    dict(type='RandomFlip', prob=0.5),\n    dict(type='PhotoMetricDistortion'),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='Pad', size=(512, 1024), pad_val=0, seg_pad_val=255),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_semantic_seg'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(2048, 1024),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=2,\n    workers_per_gpu=2,\n    train=dict(\n        type='CityscapesDataset',\n        data_root='data/cityscapes/',\n        img_dir='leftImg8bit/train',\n        ann_dir='gtFine/train',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations'),\n            dict(\n                type='Resize', img_scale=(2048, 1024), ratio_range=(0.5, 2.0)),\n            dict(type='RandomCrop', crop_size=(512, 1024), cat_max_ratio=0.75),\n            dict(type='RandomFlip', prob=0.5),\n            dict(type='PhotoMetricDistortion'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size=(512, 1024), pad_val=0, seg_pad_val=255),\n            dict(type='DefaultFormatBundle'),\n            dict(type='Collect', keys=['img', 'gt_semantic_seg'])\n        ]),\n    val=dict(\n        type='CityscapesDataset',\n        data_root='data/cityscapes/',\n        img_dir='leftImg8bit/val',\n        ann_dir='gtFine/val',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(2048, 1024),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]),\n    test=dict(\n        type='CityscapesDataset',\n        data_root='data/cityscapes/',\n        img_dir='leftImg8bit/val',\n        ann_dir='gtFine/val',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(2048, 1024),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]))\nlog_config = dict(\n    interval=50, hooks=[dict(type='TextLoggerHook', by_epoch=False)])\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = None\nresume_from = None\nworkflow = [('train', 1)]\ncudnn_benchmark = True\noptimizer = dict(type='SGD', lr=0.01, momentum=0.9, weight_decay=0.0005)\noptimizer_config = dict()\nlr_config = dict(policy='poly', power=0.9, min_lr=0.0001, by_epoch=False)\nrunner = dict(type='IterBasedRunner', max_iters=2000)\ncheckpoint_config = dict(by_epoch=False, interval=8000)\nevaluation = dict(interval=8000, metric='mIoU')\nwork_dir = 'work_dirs_2node_8gpu/deeplabv3plus_r50-d8_512x1024_2k_cityscapes'\ngpu_ids = range(0, 1)\nseed = None\n", "CLASSES": ["road", "sidewalk", "building", "wall", "fence", "pole", "traffic light", "traffic sign", "vegetation", "terrain", "sky", "person", "rider", "car", "truck", "bus", "train", "motorcycle", "bicycle"], "PALETTE": [[128, 64, 128], [244, 35, 232], [70, 70, 70], [102, 102, 156], [190, 153, 153], [153, 153, 153], [250, 170, 30], [220, 220, 0], [107, 142, 35], [152, 251, 152], [70, 130, 180], [220, 20, 60], [255, 0, 0], [0, 0, 142], [0, 0, 70], [0, 60, 100], [0, 80, 100], [0, 0, 230], [119, 11, 32]]}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 0.00978, "memory": 18770, "data_time": 0.07422, "decode.loss_seg": 1.56882, "decode.acc_seg": 48.45475, "aux.loss_seg": 0.75653, "aux.acc_seg": 41.56508, "loss": 2.32536, "time": 1.55415}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 0.00956, "memory": 18770, "data_time": 0.03149, "decode.loss_seg": 0.81877, "decode.acc_seg": 71.37114, "aux.loss_seg": 0.43945, "aux.acc_seg": 65.30976, "loss": 1.25822, "time": 0.92444}
{"mode": "train", "epoch": 1, "iter": 150, "lr": 0.00933, "memory": 18770, "data_time": 0.01804, "decode.loss_seg": 0.65038, "decode.acc_seg": 76.40465, "aux.loss_seg": 0.3477, "aux.acc_seg": 71.34496, "loss": 0.99809, "time": 1.12097}
{"mode": "train", "epoch": 2, "iter": 200, "lr": 0.00911, "memory": 18770, "data_time": 0.03691, "decode.loss_seg": 0.54301, "decode.acc_seg": 78.44286, "aux.loss_seg": 0.29004, "aux.acc_seg": 74.16896, "loss": 0.83305, "time": 1.03825}
{"mode": "train", "epoch": 2, "iter": 250, "lr": 0.00888, "memory": 18770, "data_time": 0.03959, "decode.loss_seg": 0.51203, "decode.acc_seg": 79.33815, "aux.loss_seg": 0.28016, "aux.acc_seg": 75.07381, "loss": 0.79219, "time": 1.15659}
{"mode": "train", "epoch": 2, "iter": 300, "lr": 0.00866, "memory": 18770, "data_time": 0.04271, "decode.loss_seg": 0.46674, "decode.acc_seg": 81.07447, "aux.loss_seg": 0.25834, "aux.acc_seg": 76.77587, "loss": 0.72508, "time": 1.11893}
{"mode": "train", "epoch": 2, "iter": 350, "lr": 0.00843, "memory": 18770, "data_time": 0.02405, "decode.loss_seg": 0.4421, "decode.acc_seg": 81.39818, "aux.loss_seg": 0.24773, "aux.acc_seg": 77.2312, "loss": 0.68983, "time": 0.95335}
{"mode": "train", "epoch": 3, "iter": 400, "lr": 0.0082, "memory": 18770, "data_time": 0.03725, "decode.loss_seg": 0.39833, "decode.acc_seg": 81.69706, "aux.loss_seg": 0.23158, "aux.acc_seg": 77.71312, "loss": 0.62991, "time": 0.95846}
{"mode": "train", "epoch": 3, "iter": 450, "lr": 0.00798, "memory": 18770, "data_time": 0.01474, "decode.loss_seg": 0.38264, "decode.acc_seg": 82.76815, "aux.loss_seg": 0.22329, "aux.acc_seg": 78.96359, "loss": 0.60592, "time": 1.00555}
{"mode": "train", "epoch": 3, "iter": 500, "lr": 0.00775, "memory": 18770, "data_time": 0.01426, "decode.loss_seg": 0.36098, "decode.acc_seg": 82.61796, "aux.loss_seg": 0.21504, "aux.acc_seg": 78.69923, "loss": 0.57602, "time": 0.90873}
{"mode": "train", "epoch": 3, "iter": 550, "lr": 0.00752, "memory": 18770, "data_time": 0.01558, "decode.loss_seg": 0.36572, "decode.acc_seg": 82.93809, "aux.loss_seg": 0.21443, "aux.acc_seg": 79.01137, "loss": 0.58014, "time": 0.90567}
{"mode": "train", "epoch": 4, "iter": 600, "lr": 0.00729, "memory": 18770, "data_time": 0.03193, "decode.loss_seg": 0.34546, "decode.acc_seg": 83.20189, "aux.loss_seg": 0.20631, "aux.acc_seg": 79.14147, "loss": 0.55177, "time": 0.98261}
{"mode": "train", "epoch": 4, "iter": 650, "lr": 0.00706, "memory": 18770, "data_time": 0.03998, "decode.loss_seg": 0.33324, "decode.acc_seg": 83.68734, "aux.loss_seg": 0.203, "aux.acc_seg": 79.74409, "loss": 0.53624, "time": 0.8884}
{"mode": "train", "epoch": 4, "iter": 700, "lr": 0.00682, "memory": 18770, "data_time": 0.02707, "decode.loss_seg": 0.33627, "decode.acc_seg": 83.91439, "aux.loss_seg": 0.20666, "aux.acc_seg": 79.81152, "loss": 0.54293, "time": 0.86536}
{"mode": "train", "epoch": 5, "iter": 750, "lr": 0.00659, "memory": 18770, "data_time": 0.02555, "decode.loss_seg": 0.32089, "decode.acc_seg": 83.70663, "aux.loss_seg": 0.19612, "aux.acc_seg": 79.8655, "loss": 0.51701, "time": 0.64408}
{"mode": "train", "epoch": 5, "iter": 800, "lr": 0.00636, "memory": 18770, "data_time": 0.02271, "decode.loss_seg": 0.32496, "decode.acc_seg": 83.915, "aux.loss_seg": 0.19531, "aux.acc_seg": 80.25222, "loss": 0.52026, "time": 0.74}
{"mode": "train", "epoch": 5, "iter": 850, "lr": 0.00612, "memory": 18770, "data_time": 0.01712, "decode.loss_seg": 0.29849, "decode.acc_seg": 85.02605, "aux.loss_seg": 0.18144, "aux.acc_seg": 81.39373, "loss": 0.47993, "time": 0.66446}
{"mode": "train", "epoch": 5, "iter": 900, "lr": 0.00589, "memory": 18770, "data_time": 0.03458, "decode.loss_seg": 0.29215, "decode.acc_seg": 84.27502, "aux.loss_seg": 0.17851, "aux.acc_seg": 80.66541, "loss": 0.47066, "time": 0.79554}
{"mode": "train", "epoch": 6, "iter": 950, "lr": 0.00565, "memory": 18770, "data_time": 0.05762, "decode.loss_seg": 0.3003, "decode.acc_seg": 84.69497, "aux.loss_seg": 0.18594, "aux.acc_seg": 80.76773, "loss": 0.48624, "time": 0.91961}
{"mode": "train", "epoch": 6, "iter": 1000, "lr": 0.00541, "memory": 18770, "data_time": 0.03105, "decode.loss_seg": 0.28286, "decode.acc_seg": 84.79424, "aux.loss_seg": 0.17742, "aux.acc_seg": 80.84797, "loss": 0.46028, "time": 0.67301}
{"mode": "train", "epoch": 6, "iter": 1050, "lr": 0.00517, "memory": 18770, "data_time": 0.01705, "decode.loss_seg": 0.27647, "decode.acc_seg": 85.20631, "aux.loss_seg": 0.1698, "aux.acc_seg": 81.69293, "loss": 0.44628, "time": 0.83859}
{"mode": "train", "epoch": 6, "iter": 1100, "lr": 0.00493, "memory": 18770, "data_time": 0.01335, "decode.loss_seg": 0.27753, "decode.acc_seg": 85.93322, "aux.loss_seg": 0.17529, "aux.acc_seg": 82.16042, "loss": 0.45282, "time": 0.78151}
{"mode": "train", "epoch": 7, "iter": 1150, "lr": 0.00469, "memory": 18770, "data_time": 0.02518, "decode.loss_seg": 0.27413, "decode.acc_seg": 85.51111, "aux.loss_seg": 0.16899, "aux.acc_seg": 82.06046, "loss": 0.44311, "time": 0.65003}
{"mode": "train", "epoch": 7, "iter": 1200, "lr": 0.00444, "memory": 18770, "data_time": 0.05321, "decode.loss_seg": 0.26544, "decode.acc_seg": 85.72793, "aux.loss_seg": 0.16683, "aux.acc_seg": 82.02775, "loss": 0.43227, "time": 0.68022}
{"mode": "train", "epoch": 7, "iter": 1250, "lr": 0.0042, "memory": 18770, "data_time": 0.01319, "decode.loss_seg": 0.26165, "decode.acc_seg": 85.85699, "aux.loss_seg": 0.16627, "aux.acc_seg": 82.24551, "loss": 0.42792, "time": 0.67621}
{"mode": "train", "epoch": 7, "iter": 1300, "lr": 0.00395, "memory": 18770, "data_time": 0.01705, "decode.loss_seg": 0.28388, "decode.acc_seg": 85.34691, "aux.loss_seg": 0.18058, "aux.acc_seg": 81.49189, "loss": 0.46445, "time": 0.61793}
{"mode": "train", "epoch": 8, "iter": 1350, "lr": 0.00371, "memory": 18770, "data_time": 0.04545, "decode.loss_seg": 0.26463, "decode.acc_seg": 85.8379, "aux.loss_seg": 0.16327, "aux.acc_seg": 82.28948, "loss": 0.4279, "time": 0.67302}
{"mode": "train", "epoch": 8, "iter": 1400, "lr": 0.00346, "memory": 18770, "data_time": 0.03188, "decode.loss_seg": 0.27678, "decode.acc_seg": 84.75161, "aux.loss_seg": 0.17361, "aux.acc_seg": 80.88091, "loss": 0.45039, "time": 0.65945}
{"mode": "train", "epoch": 8, "iter": 1450, "lr": 0.0032, "memory": 18770, "data_time": 0.03033, "decode.loss_seg": 0.25179, "decode.acc_seg": 85.68004, "aux.loss_seg": 0.15479, "aux.acc_seg": 82.38615, "loss": 0.40657, "time": 0.69753}
{"mode": "train", "epoch": 9, "iter": 1500, "lr": 0.00295, "memory": 18770, "data_time": 0.03445, "decode.loss_seg": 0.24515, "decode.acc_seg": 86.69477, "aux.loss_seg": 0.15296, "aux.acc_seg": 83.27253, "loss": 0.39812, "time": 0.68383}
{"mode": "train", "epoch": 9, "iter": 1550, "lr": 0.00269, "memory": 18770, "data_time": 0.02754, "decode.loss_seg": 0.25832, "decode.acc_seg": 85.70383, "aux.loss_seg": 0.1621, "aux.acc_seg": 82.1501, "loss": 0.42042, "time": 0.76003}
{"mode": "train", "epoch": 9, "iter": 1600, "lr": 0.00243, "memory": 18770, "data_time": 0.01283, "decode.loss_seg": 0.25212, "decode.acc_seg": 86.34493, "aux.loss_seg": 0.15805, "aux.acc_seg": 82.81085, "loss": 0.41017, "time": 0.64906}
{"mode": "train", "epoch": 9, "iter": 1650, "lr": 0.00217, "memory": 18770, "data_time": 0.0119, "decode.loss_seg": 0.25383, "decode.acc_seg": 86.17377, "aux.loss_seg": 0.16203, "aux.acc_seg": 82.47685, "loss": 0.41586, "time": 0.73729}
{"mode": "train", "epoch": 10, "iter": 1700, "lr": 0.0019, "memory": 18770, "data_time": 0.07138, "decode.loss_seg": 0.24067, "decode.acc_seg": 85.95808, "aux.loss_seg": 0.15279, "aux.acc_seg": 82.39325, "loss": 0.39346, "time": 0.79901}
{"mode": "train", "epoch": 10, "iter": 1750, "lr": 0.00163, "memory": 18770, "data_time": 0.01871, "decode.loss_seg": 0.24851, "decode.acc_seg": 86.56993, "aux.loss_seg": 0.16267, "aux.acc_seg": 82.46732, "loss": 0.41117, "time": 0.73947}
{"mode": "train", "epoch": 10, "iter": 1800, "lr": 0.00135, "memory": 18770, "data_time": 0.02865, "decode.loss_seg": 0.24778, "decode.acc_seg": 85.90598, "aux.loss_seg": 0.15766, "aux.acc_seg": 82.29703, "loss": 0.40544, "time": 0.74407}
{"mode": "train", "epoch": 10, "iter": 1850, "lr": 0.00107, "memory": 18770, "data_time": 0.01247, "decode.loss_seg": 0.2349, "decode.acc_seg": 86.07263, "aux.loss_seg": 0.14871, "aux.acc_seg": 82.57284, "loss": 0.3836, "time": 0.61248}
{"mode": "train", "epoch": 11, "iter": 1900, "lr": 0.00077, "memory": 18770, "data_time": 0.02748, "decode.loss_seg": 0.24405, "decode.acc_seg": 86.45887, "aux.loss_seg": 0.16177, "aux.acc_seg": 82.46259, "loss": 0.40583, "time": 0.64784}
{"mode": "train", "epoch": 11, "iter": 1950, "lr": 0.00046, "memory": 18770, "data_time": 0.01214, "decode.loss_seg": 0.25013, "decode.acc_seg": 85.59919, "aux.loss_seg": 0.15733, "aux.acc_seg": 81.9828, "loss": 0.40746, "time": 0.7282}
{"mode": "train", "epoch": 11, "iter": 2000, "lr": 0.00011, "memory": 18770, "data_time": 0.01737, "decode.loss_seg": 0.25171, "decode.acc_seg": 85.83025, "aux.loss_seg": 0.15895, "aux.acc_seg": 82.24287, "loss": 0.41065, "time": 0.69735}
