{"env_info": "sys.platform: linux\nPython: 3.7.10 (default, Feb 26 2021, 18:47:35) [GCC 7.3.0]\nCUDA available: True\nGPU 0,1,2,3: Tesla V100-SXM2-32GB\nCUDA_HOME: /mnt/cache/share/polaris/dep/cuda-10.1-cudnn7.6.5\nNVCC: Cuda compilation tools, release 10.1, V10.1.243\nGCC: gcc (GCC) 5.4.0\nPyTorch: 1.8.0\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) Math Kernel Library Version 2020.0.2 Product Build 20200624 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v1.7.0 (Git Hash 7aed236906b1f7a05c0917e5257a1af05e9ff683)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 10.1\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_37,code=compute_37\n  - CuDNN 7.6.3\n  - Magma 2.5.2\n  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=10.1, CUDNN_VERSION=7.6.3, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.8.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, \n\nTorchVision: 0.9.0\nOpenCV: 4.5.1\nMMCV: 1.3.8\nMMCV Compiler: GCC 7.3\nMMCV CUDA Compiler: 10.1\nMMSegmentation: 0.15.0+99bc5c0", "seed": null, "exp_name": "deeplabv3_r50-d8_512x1024_2k_dummy_cityscapes.py", "mmseg_version": "0.15.0+99bc5c0", "config": "norm_cfg = dict(type='SyncBN', requires_grad=True)\nmodel = dict(\n    type='EncoderDecoder',\n    pretrained='open-mmlab://resnet50_v1c',\n    backbone=dict(\n        type='ResNetV1c',\n        depth=50,\n        num_stages=4,\n        out_indices=(0, 1, 2, 3),\n        dilations=(1, 1, 2, 4),\n        strides=(1, 2, 1, 1),\n        norm_cfg=dict(type='SyncBN', requires_grad=True),\n        norm_eval=False,\n        style='pytorch',\n        contract_dilation=True,\n        pretrained='open-mmlab://resnet50_v1c'),\n    decode_head=dict(\n        type='ASPPHead',\n        in_channels=2048,\n        in_index=3,\n        channels=512,\n        dilations=(1, 12, 24, 36),\n        dropout_ratio=0.1,\n        num_classes=19,\n        norm_cfg=dict(type='SyncBN', requires_grad=True),\n        align_corners=False,\n        loss_decode=dict(\n            type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0)),\n    auxiliary_head=dict(\n        type='FCNHead',\n        in_channels=1024,\n        in_index=2,\n        channels=256,\n        num_convs=1,\n        concat_input=False,\n        dropout_ratio=0.1,\n        num_classes=19,\n        norm_cfg=dict(type='SyncBN', requires_grad=True),\n        align_corners=False,\n        loss_decode=dict(\n            type='CrossEntropyLoss', use_sigmoid=False, loss_weight=0.4)),\n    train_cfg=dict(),\n    test_cfg=dict(mode='whole'))\ndataset_type = 'CityscapesDataset'\ndata_root = 'data/cityscapes/'\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ncrop_size = (512, 1024)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations'),\n    dict(type='Resize', img_scale=(2048, 1024), ratio_range=(0.5, 2.0)),\n    dict(type='RandomCrop', crop_size=(512, 1024), cat_max_ratio=0.75),\n    dict(type='RandomFlip', prob=0.5),\n    dict(type='PhotoMetricDistortion'),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='Pad', size=(512, 1024), pad_val=0, seg_pad_val=255),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_semantic_seg'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(2048, 1024),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=2,\n    workers_per_gpu=2,\n    train=dict(\n        type='CityscapesDataset',\n        data_root='data/cityscapes/',\n        img_dir='leftImg8bit/train',\n        ann_dir='gtFine/train',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations'),\n            dict(\n                type='Resize', img_scale=(2048, 1024), ratio_range=(0.5, 2.0)),\n            dict(type='RandomCrop', crop_size=(512, 1024), cat_max_ratio=0.75),\n            dict(type='RandomFlip', prob=0.5),\n            dict(type='PhotoMetricDistortion'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size=(512, 1024), pad_val=0, seg_pad_val=255),\n            dict(type='DefaultFormatBundle'),\n            dict(type='Collect', keys=['img', 'gt_semantic_seg'])\n        ]),\n    val=dict(\n        type='CityscapesDataset',\n        data_root='data/cityscapes/',\n        img_dir='leftImg8bit/val',\n        ann_dir='gtFine/val',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(2048, 1024),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]),\n    test=dict(\n        type='CityscapesDataset',\n        data_root='data/cityscapes/',\n        img_dir='leftImg8bit/val',\n        ann_dir='gtFine/val',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(2048, 1024),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]))\nlog_config = dict(\n    interval=50, hooks=[dict(type='TextLoggerHook', by_epoch=False)])\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = None\nresume_from = None\nworkflow = [('train', 1)]\ncudnn_benchmark = True\noptimizer = dict(type='SGD', lr=0.01, momentum=0.9, weight_decay=0.0005)\noptimizer_config = dict()\nlr_config = dict(policy='poly', power=0.9, min_lr=0.0001, by_epoch=False)\nrunner = dict(type='IterBasedRunner', max_iters=2000)\ncheckpoint_config = dict(by_epoch=False, interval=8000)\nevaluation = dict(interval=8000, metric='mIoU')\nwork_dir = 'work_dirs_2node_8gpu/deeplabv3_r50-d8_512x1024_2k_dummy_cityscapes'\ngpu_ids = range(0, 1)\nseed = None\n", "CLASSES": ["road", "sidewalk", "building", "wall", "fence", "pole", "traffic light", "traffic sign", "vegetation", "terrain", "sky", "person", "rider", "car", "truck", "bus", "train", "motorcycle", "bicycle"], "PALETTE": [[128, 64, 128], [244, 35, 232], [70, 70, 70], [102, 102, 156], [190, 153, 153], [153, 153, 153], [250, 170, 30], [220, 220, 0], [107, 142, 35], [152, 251, 152], [70, 130, 180], [220, 20, 60], [255, 0, 0], [0, 0, 142], [0, 0, 70], [0, 60, 100], [0, 80, 100], [0, 0, 230], [119, 11, 32]]}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 0.00978, "memory": 18985, "data_time": 0.08494, "decode.loss_seg": 1.48993, "decode.acc_seg": 53.21223, "aux.loss_seg": 0.7466, "aux.acc_seg": 43.70942, "loss": 2.23654, "time": 2.06801}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 0.00956, "memory": 18985, "data_time": 0.02324, "decode.loss_seg": 0.75469, "decode.acc_seg": 73.24489, "aux.loss_seg": 0.41886, "aux.acc_seg": 67.2825, "loss": 1.17355, "time": 0.86138}
{"mode": "train", "epoch": 1, "iter": 150, "lr": 0.00933, "memory": 18985, "data_time": 0.02592, "decode.loss_seg": 0.59575, "decode.acc_seg": 77.75634, "aux.loss_seg": 0.33184, "aux.acc_seg": 72.55, "loss": 0.9276, "time": 1.0162}
{"mode": "train", "epoch": 2, "iter": 200, "lr": 0.00911, "memory": 18985, "data_time": 0.04219, "decode.loss_seg": 0.50522, "decode.acc_seg": 79.16158, "aux.loss_seg": 0.29035, "aux.acc_seg": 74.08495, "loss": 0.79557, "time": 0.84851}
{"mode": "train", "epoch": 2, "iter": 250, "lr": 0.00888, "memory": 18985, "data_time": 0.03979, "decode.loss_seg": 0.46251, "decode.acc_seg": 80.87, "aux.loss_seg": 0.26851, "aux.acc_seg": 76.26763, "loss": 0.73102, "time": 1.07608}
{"mode": "train", "epoch": 2, "iter": 300, "lr": 0.00866, "memory": 18985, "data_time": 0.05547, "decode.loss_seg": 0.45882, "decode.acc_seg": 80.61605, "aux.loss_seg": 0.25862, "aux.acc_seg": 76.59823, "loss": 0.71744, "time": 1.01648}
{"mode": "train", "epoch": 2, "iter": 350, "lr": 0.00843, "memory": 18985, "data_time": 0.02677, "decode.loss_seg": 0.38883, "decode.acc_seg": 82.60645, "aux.loss_seg": 0.23317, "aux.acc_seg": 78.26604, "loss": 0.622, "time": 0.95662}
{"mode": "train", "epoch": 3, "iter": 400, "lr": 0.0082, "memory": 18985, "data_time": 0.02859, "decode.loss_seg": 0.36914, "decode.acc_seg": 82.50968, "aux.loss_seg": 0.22001, "aux.acc_seg": 78.66961, "loss": 0.58915, "time": 0.9193}
{"mode": "train", "epoch": 3, "iter": 450, "lr": 0.00798, "memory": 18985, "data_time": 0.02943, "decode.loss_seg": 0.37769, "decode.acc_seg": 82.60072, "aux.loss_seg": 0.22762, "aux.acc_seg": 78.70669, "loss": 0.60531, "time": 0.97845}
{"mode": "train", "epoch": 3, "iter": 500, "lr": 0.00775, "memory": 18985, "data_time": 0.01895, "decode.loss_seg": 0.35741, "decode.acc_seg": 82.80439, "aux.loss_seg": 0.21194, "aux.acc_seg": 79.11251, "loss": 0.56936, "time": 0.92106}
{"mode": "train", "epoch": 3, "iter": 550, "lr": 0.00752, "memory": 18985, "data_time": 0.04798, "decode.loss_seg": 0.35235, "decode.acc_seg": 83.60925, "aux.loss_seg": 0.21288, "aux.acc_seg": 79.72157, "loss": 0.56523, "time": 0.97173}
{"mode": "train", "epoch": 4, "iter": 600, "lr": 0.00729, "memory": 18985, "data_time": 0.06886, "decode.loss_seg": 0.33261, "decode.acc_seg": 83.36568, "aux.loss_seg": 0.20793, "aux.acc_seg": 79.04764, "loss": 0.54054, "time": 1.10277}
{"mode": "train", "epoch": 4, "iter": 650, "lr": 0.00706, "memory": 18985, "data_time": 0.02401, "decode.loss_seg": 0.31112, "decode.acc_seg": 84.69137, "aux.loss_seg": 0.19106, "aux.acc_seg": 81.10023, "loss": 0.50219, "time": 0.92219}
{"mode": "train", "epoch": 4, "iter": 700, "lr": 0.00682, "memory": 18985, "data_time": 0.01546, "decode.loss_seg": 0.31318, "decode.acc_seg": 84.3329, "aux.loss_seg": 0.19176, "aux.acc_seg": 80.69288, "loss": 0.50495, "time": 0.94138}
{"mode": "train", "epoch": 5, "iter": 750, "lr": 0.00659, "memory": 18985, "data_time": 0.03427, "decode.loss_seg": 0.30193, "decode.acc_seg": 84.33955, "aux.loss_seg": 0.18498, "aux.acc_seg": 80.79763, "loss": 0.4869, "time": 0.89384}
{"mode": "train", "epoch": 5, "iter": 800, "lr": 0.00636, "memory": 18985, "data_time": 0.02007, "decode.loss_seg": 0.31372, "decode.acc_seg": 83.8596, "aux.loss_seg": 0.19143, "aux.acc_seg": 80.11488, "loss": 0.50515, "time": 0.98612}
{"mode": "train", "epoch": 5, "iter": 850, "lr": 0.00612, "memory": 18985, "data_time": 0.01467, "decode.loss_seg": 0.29921, "decode.acc_seg": 85.06218, "aux.loss_seg": 0.18566, "aux.acc_seg": 81.35686, "loss": 0.48486, "time": 1.00037}
{"mode": "train", "epoch": 5, "iter": 900, "lr": 0.00589, "memory": 18985, "data_time": 0.01441, "decode.loss_seg": 0.28766, "decode.acc_seg": 84.59655, "aux.loss_seg": 0.17908, "aux.acc_seg": 81.24275, "loss": 0.46674, "time": 1.09001}
{"mode": "train", "epoch": 6, "iter": 950, "lr": 0.00565, "memory": 18985, "data_time": 0.02221, "decode.loss_seg": 0.30252, "decode.acc_seg": 84.57382, "aux.loss_seg": 0.18462, "aux.acc_seg": 80.93332, "loss": 0.48713, "time": 0.93527}
{"mode": "train", "epoch": 6, "iter": 1000, "lr": 0.00541, "memory": 18985, "data_time": 0.01966, "decode.loss_seg": 0.28295, "decode.acc_seg": 84.94885, "aux.loss_seg": 0.17447, "aux.acc_seg": 81.44241, "loss": 0.45742, "time": 0.88669}
{"mode": "train", "epoch": 6, "iter": 1050, "lr": 0.00517, "memory": 18985, "data_time": 0.03296, "decode.loss_seg": 0.2636, "decode.acc_seg": 86.10448, "aux.loss_seg": 0.15858, "aux.acc_seg": 83.1732, "loss": 0.42218, "time": 0.87176}
{"mode": "train", "epoch": 6, "iter": 1100, "lr": 0.00493, "memory": 18985, "data_time": 0.02236, "decode.loss_seg": 0.27813, "decode.acc_seg": 84.91427, "aux.loss_seg": 0.16939, "aux.acc_seg": 81.55011, "loss": 0.44752, "time": 0.89537}
{"mode": "train", "epoch": 7, "iter": 1150, "lr": 0.00469, "memory": 18985, "data_time": 0.06039, "decode.loss_seg": 0.26598, "decode.acc_seg": 85.54206, "aux.loss_seg": 0.16195, "aux.acc_seg": 82.18547, "loss": 0.42794, "time": 1.0919}
{"mode": "train", "epoch": 7, "iter": 1200, "lr": 0.00444, "memory": 18985, "data_time": 0.01907, "decode.loss_seg": 0.26025, "decode.acc_seg": 85.80309, "aux.loss_seg": 0.16351, "aux.acc_seg": 82.32485, "loss": 0.42376, "time": 1.26622}
{"mode": "train", "epoch": 7, "iter": 1250, "lr": 0.0042, "memory": 18985, "data_time": 0.01417, "decode.loss_seg": 0.26242, "decode.acc_seg": 85.45806, "aux.loss_seg": 0.16085, "aux.acc_seg": 82.08103, "loss": 0.42327, "time": 0.84032}
{"mode": "train", "epoch": 7, "iter": 1300, "lr": 0.00395, "memory": 18985, "data_time": 0.01304, "decode.loss_seg": 0.28484, "decode.acc_seg": 84.73711, "aux.loss_seg": 0.17281, "aux.acc_seg": 81.47369, "loss": 0.45765, "time": 0.95223}
{"mode": "train", "epoch": 8, "iter": 1350, "lr": 0.00371, "memory": 18985, "data_time": 0.04188, "decode.loss_seg": 0.25298, "decode.acc_seg": 85.88068, "aux.loss_seg": 0.15788, "aux.acc_seg": 82.52223, "loss": 0.41086, "time": 1.08067}
{"mode": "train", "epoch": 8, "iter": 1400, "lr": 0.00346, "memory": 18985, "data_time": 0.02538, "decode.loss_seg": 0.26126, "decode.acc_seg": 85.8676, "aux.loss_seg": 0.16378, "aux.acc_seg": 82.32019, "loss": 0.42503, "time": 1.17175}
{"mode": "train", "epoch": 8, "iter": 1450, "lr": 0.0032, "memory": 18985, "data_time": 0.02658, "decode.loss_seg": 0.26156, "decode.acc_seg": 85.63587, "aux.loss_seg": 0.15962, "aux.acc_seg": 82.37607, "loss": 0.42118, "time": 1.18009}
{"mode": "train", "epoch": 9, "iter": 1500, "lr": 0.00295, "memory": 18985, "data_time": 0.02951, "decode.loss_seg": 0.2477, "decode.acc_seg": 86.1919, "aux.loss_seg": 0.15534, "aux.acc_seg": 82.79225, "loss": 0.40304, "time": 1.1964}
{"mode": "train", "epoch": 9, "iter": 1550, "lr": 0.00269, "memory": 18985, "data_time": 0.03058, "decode.loss_seg": 0.25504, "decode.acc_seg": 85.85019, "aux.loss_seg": 0.1573, "aux.acc_seg": 82.44977, "loss": 0.41234, "time": 1.28704}
{"mode": "train", "epoch": 9, "iter": 1600, "lr": 0.00243, "memory": 18985, "data_time": 0.01979, "decode.loss_seg": 0.24915, "decode.acc_seg": 86.18098, "aux.loss_seg": 0.15521, "aux.acc_seg": 82.81598, "loss": 0.40436, "time": 0.91496}
{"mode": "train", "epoch": 9, "iter": 1650, "lr": 0.00217, "memory": 18985, "data_time": 0.01271, "decode.loss_seg": 0.24349, "decode.acc_seg": 86.24997, "aux.loss_seg": 0.15462, "aux.acc_seg": 82.81717, "loss": 0.39811, "time": 0.84069}
{"mode": "train", "epoch": 10, "iter": 1700, "lr": 0.0019, "memory": 18985, "data_time": 0.05859, "decode.loss_seg": 0.24097, "decode.acc_seg": 86.09364, "aux.loss_seg": 0.15015, "aux.acc_seg": 82.90028, "loss": 0.39112, "time": 0.92959}
{"mode": "train", "epoch": 10, "iter": 1750, "lr": 0.00163, "memory": 18985, "data_time": 0.02535, "decode.loss_seg": 0.24994, "decode.acc_seg": 85.98548, "aux.loss_seg": 0.15788, "aux.acc_seg": 82.38703, "loss": 0.40783, "time": 1.03917}
{"mode": "train", "epoch": 10, "iter": 1800, "lr": 0.00135, "memory": 18985, "data_time": 0.01864, "decode.loss_seg": 0.24551, "decode.acc_seg": 85.93964, "aux.loss_seg": 0.1525, "aux.acc_seg": 82.73352, "loss": 0.39801, "time": 0.98287}
{"mode": "train", "epoch": 10, "iter": 1850, "lr": 0.00107, "memory": 18985, "data_time": 0.0263, "decode.loss_seg": 0.24292, "decode.acc_seg": 85.79861, "aux.loss_seg": 0.15036, "aux.acc_seg": 82.54278, "loss": 0.39328, "time": 1.20358}
{"mode": "train", "epoch": 11, "iter": 1900, "lr": 0.00077, "memory": 18985, "data_time": 0.02575, "decode.loss_seg": 0.23312, "decode.acc_seg": 86.73591, "aux.loss_seg": 0.15124, "aux.acc_seg": 83.17424, "loss": 0.38436, "time": 1.09726}
{"mode": "train", "epoch": 11, "iter": 1950, "lr": 0.00046, "memory": 18985, "data_time": 0.02606, "decode.loss_seg": 0.2473, "decode.acc_seg": 86.13151, "aux.loss_seg": 0.1558, "aux.acc_seg": 82.59082, "loss": 0.40309, "time": 1.09455}
{"mode": "train", "epoch": 11, "iter": 2000, "lr": 0.00011, "memory": 18985, "data_time": 0.01751, "decode.loss_seg": 0.23632, "decode.acc_seg": 86.74964, "aux.loss_seg": 0.15098, "aux.acc_seg": 83.28901, "loss": 0.3873, "time": 1.00164}
