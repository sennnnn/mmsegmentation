{"env_info": "sys.platform: linux\nPython: 3.7.10 (default, Feb 26 2021, 18:47:35) [GCC 7.3.0]\nCUDA available: True\nGPU 0,1,2,3: Tesla V100-SXM2-32GB\nCUDA_HOME: /mnt/cache/share/polaris/dep/cuda-10.1-cudnn7.6.5\nNVCC: Cuda compilation tools, release 10.1, V10.1.243\nGCC: gcc (GCC) 5.4.0\nPyTorch: 1.8.0\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) Math Kernel Library Version 2020.0.2 Product Build 20200624 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v1.7.0 (Git Hash 7aed236906b1f7a05c0917e5257a1af05e9ff683)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 10.1\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_37,code=compute_37\n  - CuDNN 7.6.3\n  - Magma 2.5.2\n  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=10.1, CUDNN_VERSION=7.6.3, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.8.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, \n\nTorchVision: 0.9.0\nOpenCV: 4.5.1\nMMCV: 1.3.8\nMMCV Compiler: GCC 7.3\nMMCV CUDA Compiler: 10.1\nMMSegmentation: 0.15.0+99bc5c0", "seed": null, "exp_name": "pspnet_r50-d8_512x1024_2k_cityscapes.py", "mmseg_version": "0.15.0+99bc5c0", "config": "norm_cfg = dict(type='SyncBN', requires_grad=True)\nmodel = dict(\n    type='EncoderDecoder',\n    pretrained='open-mmlab://resnet50_v1c',\n    backbone=dict(\n        type='ResNetV1c',\n        depth=50,\n        num_stages=4,\n        out_indices=(0, 1, 2, 3),\n        dilations=(1, 1, 2, 4),\n        strides=(1, 2, 1, 1),\n        norm_cfg=dict(type='SyncBN', requires_grad=True),\n        norm_eval=False,\n        style='pytorch',\n        contract_dilation=True,\n        pretrained='open-mmlab://resnet50_v1c'),\n    decode_head=dict(\n        type='PSPHead',\n        in_channels=2048,\n        in_index=3,\n        channels=512,\n        pool_scales=(1, 2, 3, 6),\n        dropout_ratio=0.1,\n        num_classes=19,\n        norm_cfg=dict(type='SyncBN', requires_grad=True),\n        align_corners=False,\n        loss_decode=dict(\n            type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0)),\n    auxiliary_head=dict(\n        type='FCNHead',\n        in_channels=1024,\n        in_index=2,\n        channels=256,\n        num_convs=1,\n        concat_input=False,\n        dropout_ratio=0.1,\n        num_classes=19,\n        norm_cfg=dict(type='SyncBN', requires_grad=True),\n        align_corners=False,\n        loss_decode=dict(\n            type='CrossEntropyLoss', use_sigmoid=False, loss_weight=0.4)),\n    train_cfg=dict(),\n    test_cfg=dict(mode='whole'))\ndataset_type = 'CityscapesDataset'\ndata_root = 'data/cityscapes/'\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ncrop_size = (512, 1024)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations'),\n    dict(type='Resize', img_scale=(2048, 1024), ratio_range=(0.5, 2.0)),\n    dict(type='RandomCrop', crop_size=(512, 1024), cat_max_ratio=0.75),\n    dict(type='RandomFlip', prob=0.5),\n    dict(type='PhotoMetricDistortion'),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='Pad', size=(512, 1024), pad_val=0, seg_pad_val=255),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_semantic_seg'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(2048, 1024),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=2,\n    workers_per_gpu=2,\n    train=dict(\n        type='CityscapesDataset',\n        data_root='data/cityscapes/',\n        img_dir='leftImg8bit/train',\n        ann_dir='gtFine/train',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations'),\n            dict(\n                type='Resize', img_scale=(2048, 1024), ratio_range=(0.5, 2.0)),\n            dict(type='RandomCrop', crop_size=(512, 1024), cat_max_ratio=0.75),\n            dict(type='RandomFlip', prob=0.5),\n            dict(type='PhotoMetricDistortion'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size=(512, 1024), pad_val=0, seg_pad_val=255),\n            dict(type='DefaultFormatBundle'),\n            dict(type='Collect', keys=['img', 'gt_semantic_seg'])\n        ]),\n    val=dict(\n        type='CityscapesDataset',\n        data_root='data/cityscapes/',\n        img_dir='leftImg8bit/val',\n        ann_dir='gtFine/val',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(2048, 1024),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]),\n    test=dict(\n        type='CityscapesDataset',\n        data_root='data/cityscapes/',\n        img_dir='leftImg8bit/val',\n        ann_dir='gtFine/val',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(2048, 1024),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]))\nlog_config = dict(\n    interval=50, hooks=[dict(type='TextLoggerHook', by_epoch=False)])\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = None\nresume_from = None\nworkflow = [('train', 1)]\ncudnn_benchmark = True\noptimizer = dict(type='SGD', lr=0.01, momentum=0.9, weight_decay=0.0005)\noptimizer_config = dict()\nlr_config = dict(policy='poly', power=0.9, min_lr=0.0001, by_epoch=False)\nrunner = dict(type='IterBasedRunner', max_iters=2000)\ncheckpoint_config = dict(by_epoch=False, interval=8000)\nevaluation = dict(interval=8000, metric='mIoU')\nwork_dir = 'work_dirs_2node_8gpu/pspnet_r50-d8_512x1024_2k_cityscapes'\ngpu_ids = range(0, 1)\nseed = None\n", "CLASSES": ["road", "sidewalk", "building", "wall", "fence", "pole", "traffic light", "traffic sign", "vegetation", "terrain", "sky", "person", "rider", "car", "truck", "bus", "train", "motorcycle", "bicycle"], "PALETTE": [[128, 64, 128], [244, 35, 232], [70, 70, 70], [102, 102, 156], [190, 153, 153], [153, 153, 153], [250, 170, 30], [220, 220, 0], [107, 142, 35], [152, 251, 152], [70, 130, 180], [220, 20, 60], [255, 0, 0], [0, 0, 142], [0, 0, 70], [0, 60, 100], [0, 80, 100], [0, 0, 230], [119, 11, 32]]}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 0.00978, "memory": 18766, "data_time": 0.07862, "decode.loss_seg": 1.33217, "decode.acc_seg": 59.49875, "aux.loss_seg": 0.72665, "aux.acc_seg": 43.26141, "loss": 2.05882, "time": 1.61153}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 0.00956, "memory": 18766, "data_time": 0.03345, "decode.loss_seg": 0.69709, "decode.acc_seg": 75.27401, "aux.loss_seg": 0.42253, "aux.acc_seg": 67.10077, "loss": 1.11962, "time": 0.62432}
{"mode": "train", "epoch": 1, "iter": 150, "lr": 0.00933, "memory": 18766, "data_time": 0.01847, "decode.loss_seg": 0.58698, "decode.acc_seg": 77.57553, "aux.loss_seg": 0.34022, "aux.acc_seg": 71.66443, "loss": 0.9272, "time": 0.70434}
{"mode": "train", "epoch": 2, "iter": 200, "lr": 0.00911, "memory": 18766, "data_time": 0.0324, "decode.loss_seg": 0.48757, "decode.acc_seg": 79.74581, "aux.loss_seg": 0.28832, "aux.acc_seg": 74.82224, "loss": 0.77589, "time": 0.69723}
{"mode": "train", "epoch": 2, "iter": 250, "lr": 0.00888, "memory": 18766, "data_time": 0.01453, "decode.loss_seg": 0.43104, "decode.acc_seg": 81.51146, "aux.loss_seg": 0.26431, "aux.acc_seg": 76.70163, "loss": 0.69535, "time": 0.72844}
{"mode": "train", "epoch": 2, "iter": 300, "lr": 0.00866, "memory": 18766, "data_time": 0.02106, "decode.loss_seg": 0.43211, "decode.acc_seg": 81.25652, "aux.loss_seg": 0.2617, "aux.acc_seg": 76.67542, "loss": 0.69381, "time": 0.58777}
{"mode": "train", "epoch": 2, "iter": 350, "lr": 0.00843, "memory": 18766, "data_time": 0.0189, "decode.loss_seg": 0.38435, "decode.acc_seg": 82.61543, "aux.loss_seg": 0.23344, "aux.acc_seg": 78.42384, "loss": 0.61779, "time": 0.64584}
{"mode": "train", "epoch": 3, "iter": 400, "lr": 0.0082, "memory": 18766, "data_time": 0.03501, "decode.loss_seg": 0.37047, "decode.acc_seg": 82.9143, "aux.loss_seg": 0.2253, "aux.acc_seg": 78.80264, "loss": 0.59577, "time": 0.83384}
{"mode": "train", "epoch": 3, "iter": 450, "lr": 0.00798, "memory": 18766, "data_time": 0.05079, "decode.loss_seg": 0.34504, "decode.acc_seg": 83.59612, "aux.loss_seg": 0.2142, "aux.acc_seg": 79.59098, "loss": 0.55924, "time": 0.84391}
{"mode": "train", "epoch": 3, "iter": 500, "lr": 0.00775, "memory": 18766, "data_time": 0.01333, "decode.loss_seg": 0.33933, "decode.acc_seg": 83.4147, "aux.loss_seg": 0.21254, "aux.acc_seg": 79.41383, "loss": 0.55187, "time": 0.72557}
{"mode": "train", "epoch": 3, "iter": 550, "lr": 0.00752, "memory": 18766, "data_time": 0.03462, "decode.loss_seg": 0.33155, "decode.acc_seg": 83.87899, "aux.loss_seg": 0.20452, "aux.acc_seg": 80.13812, "loss": 0.53607, "time": 1.3227}
{"mode": "train", "epoch": 4, "iter": 600, "lr": 0.00729, "memory": 18766, "data_time": 0.02715, "decode.loss_seg": 0.31412, "decode.acc_seg": 84.2379, "aux.loss_seg": 0.19901, "aux.acc_seg": 80.15244, "loss": 0.51313, "time": 0.81546}
{"mode": "train", "epoch": 4, "iter": 650, "lr": 0.00706, "memory": 18766, "data_time": 0.02441, "decode.loss_seg": 0.31534, "decode.acc_seg": 84.4594, "aux.loss_seg": 0.19457, "aux.acc_seg": 80.87346, "loss": 0.50992, "time": 0.72497}
{"mode": "train", "epoch": 4, "iter": 700, "lr": 0.00682, "memory": 18766, "data_time": 0.01721, "decode.loss_seg": 0.31306, "decode.acc_seg": 84.41173, "aux.loss_seg": 0.19941, "aux.acc_seg": 80.42096, "loss": 0.51247, "time": 0.67891}
{"mode": "train", "epoch": 5, "iter": 750, "lr": 0.00659, "memory": 18766, "data_time": 0.03059, "decode.loss_seg": 0.30788, "decode.acc_seg": 84.32414, "aux.loss_seg": 0.19396, "aux.acc_seg": 80.50954, "loss": 0.50184, "time": 0.66763}
{"mode": "train", "epoch": 5, "iter": 800, "lr": 0.00636, "memory": 18766, "data_time": 0.01987, "decode.loss_seg": 0.29712, "decode.acc_seg": 84.83398, "aux.loss_seg": 0.18303, "aux.acc_seg": 81.13802, "loss": 0.48015, "time": 0.71782}
{"mode": "train", "epoch": 5, "iter": 850, "lr": 0.00612, "memory": 18766, "data_time": 0.02239, "decode.loss_seg": 0.28682, "decode.acc_seg": 85.15088, "aux.loss_seg": 0.17864, "aux.acc_seg": 81.46049, "loss": 0.46546, "time": 0.62316}
{"mode": "train", "epoch": 5, "iter": 900, "lr": 0.00589, "memory": 18766, "data_time": 0.04054, "decode.loss_seg": 0.30265, "decode.acc_seg": 84.0651, "aux.loss_seg": 0.18351, "aux.acc_seg": 80.63023, "loss": 0.48617, "time": 0.67005}
{"mode": "train", "epoch": 6, "iter": 950, "lr": 0.00565, "memory": 18766, "data_time": 0.0407, "decode.loss_seg": 0.289, "decode.acc_seg": 84.86257, "aux.loss_seg": 0.18029, "aux.acc_seg": 81.11081, "loss": 0.46929, "time": 0.7158}
{"mode": "train", "epoch": 6, "iter": 1000, "lr": 0.00541, "memory": 18766, "data_time": 0.0111, "decode.loss_seg": 0.28107, "decode.acc_seg": 85.35448, "aux.loss_seg": 0.17978, "aux.acc_seg": 81.50343, "loss": 0.46086, "time": 0.68717}
{"mode": "train", "epoch": 6, "iter": 1050, "lr": 0.00517, "memory": 18766, "data_time": 0.01607, "decode.loss_seg": 0.26484, "decode.acc_seg": 86.1847, "aux.loss_seg": 0.16788, "aux.acc_seg": 82.7077, "loss": 0.43272, "time": 0.62177}
{"mode": "train", "epoch": 6, "iter": 1100, "lr": 0.00493, "memory": 18766, "data_time": 0.02585, "decode.loss_seg": 0.25761, "decode.acc_seg": 85.56236, "aux.loss_seg": 0.16765, "aux.acc_seg": 81.84938, "loss": 0.42526, "time": 0.71373}
{"mode": "train", "epoch": 7, "iter": 1150, "lr": 0.00469, "memory": 18766, "data_time": 0.02793, "decode.loss_seg": 0.25393, "decode.acc_seg": 85.9897, "aux.loss_seg": 0.15956, "aux.acc_seg": 82.58518, "loss": 0.41348, "time": 0.77137}
{"mode": "train", "epoch": 7, "iter": 1200, "lr": 0.00444, "memory": 18766, "data_time": 0.01546, "decode.loss_seg": 0.25262, "decode.acc_seg": 86.01614, "aux.loss_seg": 0.15846, "aux.acc_seg": 82.78264, "loss": 0.41108, "time": 0.67614}
{"mode": "train", "epoch": 7, "iter": 1250, "lr": 0.0042, "memory": 18766, "data_time": 0.02837, "decode.loss_seg": 0.25271, "decode.acc_seg": 85.62287, "aux.loss_seg": 0.15832, "aux.acc_seg": 82.28339, "loss": 0.41103, "time": 0.87069}
{"mode": "train", "epoch": 7, "iter": 1300, "lr": 0.00395, "memory": 18766, "data_time": 0.03309, "decode.loss_seg": 0.25144, "decode.acc_seg": 85.72926, "aux.loss_seg": 0.1645, "aux.acc_seg": 81.92917, "loss": 0.41594, "time": 0.63019}
{"mode": "train", "epoch": 8, "iter": 1350, "lr": 0.00371, "memory": 18766, "data_time": 0.03821, "decode.loss_seg": 0.25256, "decode.acc_seg": 86.3513, "aux.loss_seg": 0.15965, "aux.acc_seg": 82.80231, "loss": 0.41221, "time": 0.69416}
{"mode": "train", "epoch": 8, "iter": 1400, "lr": 0.00346, "memory": 18766, "data_time": 0.01301, "decode.loss_seg": 0.2511, "decode.acc_seg": 86.06714, "aux.loss_seg": 0.15962, "aux.acc_seg": 82.43409, "loss": 0.41072, "time": 0.74177}
{"mode": "train", "epoch": 8, "iter": 1450, "lr": 0.0032, "memory": 18766, "data_time": 0.08351, "decode.loss_seg": 0.24023, "decode.acc_seg": 86.34114, "aux.loss_seg": 0.14985, "aux.acc_seg": 83.20046, "loss": 0.39008, "time": 0.6971}
{"mode": "train", "epoch": 9, "iter": 1500, "lr": 0.00295, "memory": 18766, "data_time": 0.0259, "decode.loss_seg": 0.2366, "decode.acc_seg": 86.62092, "aux.loss_seg": 0.15197, "aux.acc_seg": 83.13, "loss": 0.38857, "time": 0.63854}
{"mode": "train", "epoch": 9, "iter": 1550, "lr": 0.00269, "memory": 18766, "data_time": 0.03257, "decode.loss_seg": 0.24028, "decode.acc_seg": 86.37502, "aux.loss_seg": 0.15614, "aux.acc_seg": 82.73207, "loss": 0.39642, "time": 0.58294}
{"mode": "train", "epoch": 9, "iter": 1600, "lr": 0.00243, "memory": 18766, "data_time": 0.01767, "decode.loss_seg": 0.24622, "decode.acc_seg": 85.86136, "aux.loss_seg": 0.15438, "aux.acc_seg": 82.47474, "loss": 0.40061, "time": 0.74027}
{"mode": "train", "epoch": 9, "iter": 1650, "lr": 0.00217, "memory": 18766, "data_time": 0.02897, "decode.loss_seg": 0.23904, "decode.acc_seg": 86.65496, "aux.loss_seg": 0.15815, "aux.acc_seg": 82.89805, "loss": 0.39719, "time": 0.74893}
{"mode": "train", "epoch": 10, "iter": 1700, "lr": 0.0019, "memory": 18766, "data_time": 0.06155, "decode.loss_seg": 0.23643, "decode.acc_seg": 86.11983, "aux.loss_seg": 0.15344, "aux.acc_seg": 82.58904, "loss": 0.38987, "time": 0.70523}
{"mode": "train", "epoch": 10, "iter": 1750, "lr": 0.00163, "memory": 18766, "data_time": 0.01812, "decode.loss_seg": 0.23849, "decode.acc_seg": 86.75855, "aux.loss_seg": 0.15906, "aux.acc_seg": 82.9351, "loss": 0.39755, "time": 0.72881}
{"mode": "train", "epoch": 10, "iter": 1800, "lr": 0.00135, "memory": 18766, "data_time": 0.02921, "decode.loss_seg": 0.24092, "decode.acc_seg": 85.9525, "aux.loss_seg": 0.15555, "aux.acc_seg": 82.39359, "loss": 0.39647, "time": 0.72199}
{"mode": "train", "epoch": 10, "iter": 1850, "lr": 0.00107, "memory": 18766, "data_time": 0.01946, "decode.loss_seg": 0.23631, "decode.acc_seg": 86.15492, "aux.loss_seg": 0.15102, "aux.acc_seg": 82.72429, "loss": 0.38733, "time": 0.76952}
{"mode": "train", "epoch": 11, "iter": 1900, "lr": 0.00077, "memory": 18766, "data_time": 0.04694, "decode.loss_seg": 0.23106, "decode.acc_seg": 86.88141, "aux.loss_seg": 0.15633, "aux.acc_seg": 82.83936, "loss": 0.38739, "time": 0.71434}
{"mode": "train", "epoch": 11, "iter": 1950, "lr": 0.00046, "memory": 18766, "data_time": 0.01652, "decode.loss_seg": 0.22248, "decode.acc_seg": 86.66019, "aux.loss_seg": 0.14795, "aux.acc_seg": 82.93904, "loss": 0.37043, "time": 0.64644}
{"mode": "train", "epoch": 11, "iter": 2000, "lr": 0.00011, "memory": 18766, "data_time": 0.01426, "decode.loss_seg": 0.23685, "decode.acc_seg": 86.8872, "aux.loss_seg": 0.1535, "aux.acc_seg": 83.33138, "loss": 0.39035, "time": 0.63727}
