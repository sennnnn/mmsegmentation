{"env_info": "sys.platform: linux\nPython: 3.7.10 (default, Feb 26 2021, 18:47:35) [GCC 7.3.0]\nCUDA available: True\nGPU 0,1,2,3: Tesla V100-SXM2-32GB\nCUDA_HOME: /mnt/cache/share/polaris/dep/cuda-10.1-cudnn7.6.5\nNVCC: Cuda compilation tools, release 10.1, V10.1.243\nGCC: gcc (GCC) 5.4.0\nPyTorch: 1.8.0\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) Math Kernel Library Version 2020.0.2 Product Build 20200624 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v1.7.0 (Git Hash 7aed236906b1f7a05c0917e5257a1af05e9ff683)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 10.1\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_37,code=compute_37\n  - CuDNN 7.6.3\n  - Magma 2.5.2\n  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=10.1, CUDNN_VERSION=7.6.3, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.8.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, \n\nTorchVision: 0.9.0\nOpenCV: 4.5.1\nMMCV: 1.3.8\nMMCV Compiler: GCC 7.3\nMMCV CUDA Compiler: 10.1\nMMSegmentation: 0.15.0+99bc5c0", "seed": null, "exp_name": "upernet_r50_512x1024_2k_dummy_cityscapes.py", "mmseg_version": "0.15.0+99bc5c0", "config": "norm_cfg = dict(type='SyncBN', requires_grad=True)\nmodel = dict(\n    type='EncoderDecoder',\n    pretrained='open-mmlab://resnet50_v1c',\n    backbone=dict(\n        type='ResNetV1c',\n        depth=50,\n        num_stages=4,\n        out_indices=(0, 1, 2, 3),\n        dilations=(1, 1, 1, 1),\n        strides=(1, 2, 2, 2),\n        norm_cfg=dict(type='SyncBN', requires_grad=True),\n        norm_eval=False,\n        style='pytorch',\n        contract_dilation=True,\n        pretrained='open-mmlab://resnet50_v1c'),\n    decode_head=dict(\n        type='UPerHead',\n        in_channels=[256, 512, 1024, 2048],\n        in_index=[0, 1, 2, 3],\n        pool_scales=(1, 2, 3, 6),\n        channels=512,\n        dropout_ratio=0.1,\n        num_classes=19,\n        norm_cfg=dict(type='SyncBN', requires_grad=True),\n        align_corners=False,\n        loss_decode=dict(\n            type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0)),\n    auxiliary_head=dict(\n        type='FCNHead',\n        in_channels=1024,\n        in_index=2,\n        channels=256,\n        num_convs=1,\n        concat_input=False,\n        dropout_ratio=0.1,\n        num_classes=19,\n        norm_cfg=dict(type='SyncBN', requires_grad=True),\n        align_corners=False,\n        loss_decode=dict(\n            type='CrossEntropyLoss', use_sigmoid=False, loss_weight=0.4)),\n    train_cfg=dict(),\n    test_cfg=dict(mode='whole'))\ndataset_type = 'DummyCityscapes'\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ncrop_size = (512, 1024)\ntrain_pipeline = [\n    dict(type='Resize', img_scale=(2048, 1024), ratio_range=(0.5, 2.0)),\n    dict(type='RandomCrop', crop_size=(512, 1024), cat_max_ratio=0.75),\n    dict(type='RandomFlip', prob=0.5),\n    dict(type='PhotoMetricDistortion'),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_semantic_seg'])\n]\ntest_pipeline = [\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(2048, 1024),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=2,\n    workers_per_gpu=2,\n    train=dict(\n        type='DummyCityscapes',\n        pipeline=[\n            dict(\n                type='Resize', img_scale=(2048, 1024), ratio_range=(0.5, 2.0)),\n            dict(type='RandomCrop', crop_size=(512, 1024), cat_max_ratio=0.75),\n            dict(type='RandomFlip', prob=0.5),\n            dict(type='PhotoMetricDistortion'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='DefaultFormatBundle'),\n            dict(type='Collect', keys=['img', 'gt_semantic_seg'])\n        ]),\n    val=dict(\n        type='DummyCityscapes',\n        pipeline=[\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(2048, 1024),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]),\n    test=dict(\n        type='DummyCityscapes',\n        pipeline=[\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(2048, 1024),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]))\nlog_config = dict(\n    interval=50, hooks=[dict(type='TextLoggerHook', by_epoch=False)])\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = None\nresume_from = None\nworkflow = [('train', 1)]\ncudnn_benchmark = True\noptimizer = dict(type='SGD', lr=0.01, momentum=0.9, weight_decay=0.0005)\noptimizer_config = dict()\nlr_config = dict(policy='poly', power=0.9, min_lr=0.0001, by_epoch=False)\nrunner = dict(type='IterBasedRunner', max_iters=2000)\ncheckpoint_config = dict(by_epoch=False, interval=8000)\nevaluation = dict(interval=8000, metric='mIoU')\nwork_dir = 'work_dirs_2node_8gpu/upernet_r50_512x1024_2k_dummy_cityscapes'\ngpu_ids = range(0, 1)\nseed = None\n", "CLASSES": ["road", "sidewalk", "building", "wall", "fence", "pole", "traffic light", "traffic sign", "vegetation", "terrain", "sky", "person", "rider", "car", "truck", "bus", "train", "motorcycle", "bicycle"], "PALETTE": [[128, 64, 128], [244, 35, 232], [70, 70, 70], [102, 102, 156], [190, 153, 153], [153, 153, 153], [250, 170, 30], [220, 220, 0], [107, 142, 35], [152, 251, 152], [70, 130, 180], [220, 20, 60], [255, 0, 0], [0, 0, 142], [0, 0, 70], [0, 60, 100], [0, 80, 100], [0, 0, 230], [119, 11, 32]]}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 0.00978, "memory": 19973, "data_time": 0.05437, "decode.loss_seg": 2.95265, "decode.acc_seg": 5.26122, "aux.loss_seg": 1.17925, "aux.acc_seg": 5.2643, "loss": 4.1319, "time": 1.44285}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 0.00956, "memory": 19973, "data_time": 0.02102, "decode.loss_seg": 2.95021, "decode.acc_seg": 5.26725, "aux.loss_seg": 1.17884, "aux.acc_seg": 5.26274, "loss": 4.12904, "time": 0.82995}
{"mode": "train", "epoch": 1, "iter": 150, "lr": 0.00933, "memory": 19973, "data_time": 0.03236, "decode.loss_seg": 2.94907, "decode.acc_seg": 5.26787, "aux.loss_seg": 1.17875, "aux.acc_seg": 5.26161, "loss": 4.12782, "time": 0.77437}
{"mode": "train", "epoch": 2, "iter": 200, "lr": 0.00911, "memory": 19973, "data_time": 0.06004, "decode.loss_seg": 2.94827, "decode.acc_seg": 5.26356, "aux.loss_seg": 1.17869, "aux.acc_seg": 5.25994, "loss": 4.12695, "time": 0.87045}
{"mode": "train", "epoch": 2, "iter": 250, "lr": 0.00888, "memory": 19973, "data_time": 0.02157, "decode.loss_seg": 2.9476, "decode.acc_seg": 5.26263, "aux.loss_seg": 1.17861, "aux.acc_seg": 5.26366, "loss": 4.12621, "time": 1.21076}
{"mode": "train", "epoch": 2, "iter": 300, "lr": 0.00866, "memory": 19973, "data_time": 0.0287, "decode.loss_seg": 2.94711, "decode.acc_seg": 5.2647, "aux.loss_seg": 1.17855, "aux.acc_seg": 5.26078, "loss": 4.12566, "time": 1.29856}
{"mode": "train", "epoch": 2, "iter": 350, "lr": 0.00843, "memory": 19973, "data_time": 0.03989, "decode.loss_seg": 2.94669, "decode.acc_seg": 5.26514, "aux.loss_seg": 1.17849, "aux.acc_seg": 5.25784, "loss": 4.12518, "time": 1.06631}
{"mode": "train", "epoch": 3, "iter": 400, "lr": 0.0082, "memory": 19973, "data_time": 0.04999, "decode.loss_seg": 2.94636, "decode.acc_seg": 5.26325, "aux.loss_seg": 1.17844, "aux.acc_seg": 5.26467, "loss": 4.12479, "time": 1.15904}
{"mode": "train", "epoch": 3, "iter": 450, "lr": 0.00798, "memory": 19973, "data_time": 0.03441, "decode.loss_seg": 2.94606, "decode.acc_seg": 5.2711, "aux.loss_seg": 1.17839, "aux.acc_seg": 5.26333, "loss": 4.12445, "time": 1.03366}
{"mode": "train", "epoch": 3, "iter": 500, "lr": 0.00775, "memory": 19973, "data_time": 0.02216, "decode.loss_seg": 2.94584, "decode.acc_seg": 5.25907, "aux.loss_seg": 1.17835, "aux.acc_seg": 5.26006, "loss": 4.12419, "time": 0.81546}
{"mode": "train", "epoch": 3, "iter": 550, "lr": 0.00752, "memory": 19973, "data_time": 0.02125, "decode.loss_seg": 2.94562, "decode.acc_seg": 5.26543, "aux.loss_seg": 1.1783, "aux.acc_seg": 5.26477, "loss": 4.12392, "time": 0.81122}
{"mode": "train", "epoch": 4, "iter": 600, "lr": 0.00729, "memory": 19973, "data_time": 0.02219, "decode.loss_seg": 2.94546, "decode.acc_seg": 5.2632, "aux.loss_seg": 1.17827, "aux.acc_seg": 5.25909, "loss": 4.12373, "time": 0.796}
{"mode": "train", "epoch": 4, "iter": 650, "lr": 0.00706, "memory": 19973, "data_time": 0.01678, "decode.loss_seg": 2.94535, "decode.acc_seg": 5.26209, "aux.loss_seg": 1.17824, "aux.acc_seg": 5.26862, "loss": 4.12359, "time": 0.84408}
{"mode": "train", "epoch": 4, "iter": 700, "lr": 0.00682, "memory": 19973, "data_time": 0.01867, "decode.loss_seg": 2.94528, "decode.acc_seg": 5.26524, "aux.loss_seg": 1.17822, "aux.acc_seg": 5.25832, "loss": 4.1235, "time": 0.79816}
{"mode": "train", "epoch": 5, "iter": 750, "lr": 0.00659, "memory": 19973, "data_time": 0.06316, "decode.loss_seg": 2.94518, "decode.acc_seg": 5.26498, "aux.loss_seg": 1.1782, "aux.acc_seg": 5.2628, "loss": 4.12338, "time": 0.90496}
{"mode": "train", "epoch": 5, "iter": 800, "lr": 0.00636, "memory": 19973, "data_time": 0.02224, "decode.loss_seg": 2.94513, "decode.acc_seg": 5.262, "aux.loss_seg": 1.17817, "aux.acc_seg": 5.26064, "loss": 4.1233, "time": 0.96335}
{"mode": "train", "epoch": 5, "iter": 850, "lr": 0.00612, "memory": 19973, "data_time": 0.01859, "decode.loss_seg": 2.94507, "decode.acc_seg": 5.26406, "aux.loss_seg": 1.17816, "aux.acc_seg": 5.26339, "loss": 4.12322, "time": 0.79781}
{"mode": "train", "epoch": 5, "iter": 900, "lr": 0.00589, "memory": 19973, "data_time": 0.02128, "decode.loss_seg": 2.94503, "decode.acc_seg": 5.26309, "aux.loss_seg": 1.17814, "aux.acc_seg": 5.26195, "loss": 4.12317, "time": 0.89621}
{"mode": "train", "epoch": 6, "iter": 950, "lr": 0.00565, "memory": 19973, "data_time": 0.0456, "decode.loss_seg": 2.94497, "decode.acc_seg": 5.26513, "aux.loss_seg": 1.17813, "aux.acc_seg": 5.26142, "loss": 4.1231, "time": 0.92563}
{"mode": "train", "epoch": 6, "iter": 1000, "lr": 0.00541, "memory": 19973, "data_time": 0.0267, "decode.loss_seg": 2.94495, "decode.acc_seg": 5.26844, "aux.loss_seg": 1.17812, "aux.acc_seg": 5.26473, "loss": 4.12307, "time": 0.79277}
{"mode": "train", "epoch": 6, "iter": 1050, "lr": 0.00517, "memory": 19973, "data_time": 0.02302, "decode.loss_seg": 2.94492, "decode.acc_seg": 5.26096, "aux.loss_seg": 1.17811, "aux.acc_seg": 5.26457, "loss": 4.12303, "time": 0.78195}
{"mode": "train", "epoch": 6, "iter": 1100, "lr": 0.00493, "memory": 19973, "data_time": 0.01668, "decode.loss_seg": 2.94488, "decode.acc_seg": 5.26073, "aux.loss_seg": 1.17809, "aux.acc_seg": 5.26474, "loss": 4.12298, "time": 0.82617}
{"mode": "train", "epoch": 7, "iter": 1150, "lr": 0.00469, "memory": 19973, "data_time": 0.02206, "decode.loss_seg": 2.94486, "decode.acc_seg": 5.26543, "aux.loss_seg": 1.17809, "aux.acc_seg": 5.26187, "loss": 4.12295, "time": 0.78369}
{"mode": "train", "epoch": 7, "iter": 1200, "lr": 0.00444, "memory": 19973, "data_time": 0.01858, "decode.loss_seg": 2.94485, "decode.acc_seg": 5.26174, "aux.loss_seg": 1.17808, "aux.acc_seg": 5.2586, "loss": 4.12293, "time": 0.81883}
{"mode": "train", "epoch": 7, "iter": 1250, "lr": 0.0042, "memory": 19973, "data_time": 0.03649, "decode.loss_seg": 2.94482, "decode.acc_seg": 5.26768, "aux.loss_seg": 1.17807, "aux.acc_seg": 5.2637, "loss": 4.12289, "time": 0.83624}
{"mode": "train", "epoch": 7, "iter": 1300, "lr": 0.00395, "memory": 19973, "data_time": 0.017, "decode.loss_seg": 2.94481, "decode.acc_seg": 5.25984, "aux.loss_seg": 1.17806, "aux.acc_seg": 5.26254, "loss": 4.12287, "time": 0.88942}
{"mode": "train", "epoch": 8, "iter": 1350, "lr": 0.00371, "memory": 19973, "data_time": 0.02974, "decode.loss_seg": 2.94479, "decode.acc_seg": 5.26313, "aux.loss_seg": 1.17806, "aux.acc_seg": 5.26748, "loss": 4.12285, "time": 1.19072}
{"mode": "train", "epoch": 8, "iter": 1400, "lr": 0.00346, "memory": 19973, "data_time": 0.0211, "decode.loss_seg": 2.94479, "decode.acc_seg": 5.26667, "aux.loss_seg": 1.17806, "aux.acc_seg": 5.25968, "loss": 4.12284, "time": 1.05746}
{"mode": "train", "epoch": 8, "iter": 1450, "lr": 0.0032, "memory": 19973, "data_time": 0.02134, "decode.loss_seg": 2.94477, "decode.acc_seg": 5.26436, "aux.loss_seg": 1.17804, "aux.acc_seg": 5.26735, "loss": 4.12282, "time": 0.77505}
{"mode": "train", "epoch": 9, "iter": 1500, "lr": 0.00295, "memory": 19973, "data_time": 0.03925, "decode.loss_seg": 2.94477, "decode.acc_seg": 5.26583, "aux.loss_seg": 1.17805, "aux.acc_seg": 5.26073, "loss": 4.12281, "time": 0.86617}
{"mode": "train", "epoch": 9, "iter": 1550, "lr": 0.00269, "memory": 19973, "data_time": 0.02186, "decode.loss_seg": 2.94476, "decode.acc_seg": 5.26013, "aux.loss_seg": 1.17804, "aux.acc_seg": 5.2668, "loss": 4.1228, "time": 0.97361}
{"mode": "train", "epoch": 9, "iter": 1600, "lr": 0.00243, "memory": 19973, "data_time": 0.04857, "decode.loss_seg": 2.94476, "decode.acc_seg": 5.26278, "aux.loss_seg": 1.17804, "aux.acc_seg": 5.26562, "loss": 4.12279, "time": 1.11835}
{"mode": "train", "epoch": 9, "iter": 1650, "lr": 0.00217, "memory": 19973, "data_time": 0.02371, "decode.loss_seg": 2.94474, "decode.acc_seg": 5.26524, "aux.loss_seg": 1.17803, "aux.acc_seg": 5.26233, "loss": 4.12277, "time": 0.83705}
{"mode": "train", "epoch": 10, "iter": 1700, "lr": 0.0019, "memory": 19973, "data_time": 0.03709, "decode.loss_seg": 2.94474, "decode.acc_seg": 5.25745, "aux.loss_seg": 1.17803, "aux.acc_seg": 5.26639, "loss": 4.12277, "time": 0.64049}
{"mode": "train", "epoch": 10, "iter": 1750, "lr": 0.00163, "memory": 19973, "data_time": 0.01637, "decode.loss_seg": 2.94473, "decode.acc_seg": 5.26275, "aux.loss_seg": 1.17803, "aux.acc_seg": 5.26602, "loss": 4.12276, "time": 0.62789}
{"mode": "train", "epoch": 10, "iter": 1800, "lr": 0.00135, "memory": 19973, "data_time": 0.01582, "decode.loss_seg": 2.94474, "decode.acc_seg": 5.26051, "aux.loss_seg": 1.17802, "aux.acc_seg": 5.26255, "loss": 4.12276, "time": 0.67961}
{"mode": "train", "epoch": 10, "iter": 1850, "lr": 0.00107, "memory": 19973, "data_time": 0.0253, "decode.loss_seg": 2.94473, "decode.acc_seg": 5.26153, "aux.loss_seg": 1.17802, "aux.acc_seg": 5.26497, "loss": 4.12275, "time": 0.85407}
{"mode": "train", "epoch": 11, "iter": 1900, "lr": 0.00077, "memory": 19973, "data_time": 0.02472, "decode.loss_seg": 2.94472, "decode.acc_seg": 5.26971, "aux.loss_seg": 1.17802, "aux.acc_seg": 5.26261, "loss": 4.12274, "time": 0.59435}
{"mode": "train", "epoch": 11, "iter": 1950, "lr": 0.00046, "memory": 19973, "data_time": 0.01846, "decode.loss_seg": 2.94472, "decode.acc_seg": 5.26338, "aux.loss_seg": 1.17802, "aux.acc_seg": 5.269, "loss": 4.12274, "time": 0.91897}
{"mode": "train", "epoch": 11, "iter": 2000, "lr": 0.00011, "memory": 19973, "data_time": 0.01831, "decode.loss_seg": 2.94472, "decode.acc_seg": 5.26403, "aux.loss_seg": 1.17802, "aux.acc_seg": 5.26324, "loss": 4.12274, "time": 0.68199}
