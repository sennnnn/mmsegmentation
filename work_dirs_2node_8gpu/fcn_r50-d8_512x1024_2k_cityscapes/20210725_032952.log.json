{"env_info": "sys.platform: linux\nPython: 3.7.10 (default, Feb 26 2021, 18:47:35) [GCC 7.3.0]\nCUDA available: True\nGPU 0,1,2,3: Tesla V100-SXM2-32GB\nCUDA_HOME: /mnt/cache/share/polaris/dep/cuda-10.1-cudnn7.6.5\nNVCC: Cuda compilation tools, release 10.1, V10.1.243\nGCC: gcc (GCC) 5.4.0\nPyTorch: 1.8.0\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) Math Kernel Library Version 2020.0.2 Product Build 20200624 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v1.7.0 (Git Hash 7aed236906b1f7a05c0917e5257a1af05e9ff683)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 10.1\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_37,code=compute_37\n  - CuDNN 7.6.3\n  - Magma 2.5.2\n  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=10.1, CUDNN_VERSION=7.6.3, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.8.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, \n\nTorchVision: 0.9.0\nOpenCV: 4.5.1\nMMCV: 1.3.8\nMMCV Compiler: GCC 7.3\nMMCV CUDA Compiler: 10.1\nMMSegmentation: 0.15.0+99bc5c0", "seed": null, "exp_name": "fcn_r50-d8_512x1024_2k_cityscapes.py", "mmseg_version": "0.15.0+99bc5c0", "config": "norm_cfg = dict(type='SyncBN', requires_grad=True)\nmodel = dict(\n    type='EncoderDecoder',\n    pretrained='open-mmlab://resnet50_v1c',\n    backbone=dict(\n        type='ResNetV1c',\n        depth=50,\n        num_stages=4,\n        out_indices=(0, 1, 2, 3),\n        dilations=(1, 1, 2, 4),\n        strides=(1, 2, 1, 1),\n        norm_cfg=dict(type='SyncBN', requires_grad=True),\n        norm_eval=False,\n        style='pytorch',\n        contract_dilation=True,\n        pretrained='open-mmlab://resnet50_v1c'),\n    decode_head=dict(\n        type='FCNHead',\n        in_channels=2048,\n        in_index=3,\n        channels=512,\n        num_convs=2,\n        concat_input=True,\n        dropout_ratio=0.1,\n        num_classes=19,\n        norm_cfg=dict(type='SyncBN', requires_grad=True),\n        align_corners=False,\n        loss_decode=dict(\n            type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0)),\n    auxiliary_head=dict(\n        type='FCNHead',\n        in_channels=1024,\n        in_index=2,\n        channels=256,\n        num_convs=1,\n        concat_input=False,\n        dropout_ratio=0.1,\n        num_classes=19,\n        norm_cfg=dict(type='SyncBN', requires_grad=True),\n        align_corners=False,\n        loss_decode=dict(\n            type='CrossEntropyLoss', use_sigmoid=False, loss_weight=0.4)),\n    train_cfg=dict(),\n    test_cfg=dict(mode='whole'))\ndataset_type = 'CityscapesDataset'\ndata_root = 'data/cityscapes/'\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ncrop_size = (512, 1024)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations'),\n    dict(type='Resize', img_scale=(2048, 1024), ratio_range=(0.5, 2.0)),\n    dict(type='RandomCrop', crop_size=(512, 1024), cat_max_ratio=0.75),\n    dict(type='RandomFlip', prob=0.5),\n    dict(type='PhotoMetricDistortion'),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='Pad', size=(512, 1024), pad_val=0, seg_pad_val=255),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_semantic_seg'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(2048, 1024),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=2,\n    workers_per_gpu=2,\n    train=dict(\n        type='CityscapesDataset',\n        data_root='data/cityscapes/',\n        img_dir='leftImg8bit/train',\n        ann_dir='gtFine/train',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations'),\n            dict(\n                type='Resize', img_scale=(2048, 1024), ratio_range=(0.5, 2.0)),\n            dict(type='RandomCrop', crop_size=(512, 1024), cat_max_ratio=0.75),\n            dict(type='RandomFlip', prob=0.5),\n            dict(type='PhotoMetricDistortion'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size=(512, 1024), pad_val=0, seg_pad_val=255),\n            dict(type='DefaultFormatBundle'),\n            dict(type='Collect', keys=['img', 'gt_semantic_seg'])\n        ]),\n    val=dict(\n        type='CityscapesDataset',\n        data_root='data/cityscapes/',\n        img_dir='leftImg8bit/val',\n        ann_dir='gtFine/val',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(2048, 1024),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]),\n    test=dict(\n        type='CityscapesDataset',\n        data_root='data/cityscapes/',\n        img_dir='leftImg8bit/val',\n        ann_dir='gtFine/val',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(2048, 1024),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]))\nlog_config = dict(\n    interval=50, hooks=[dict(type='TextLoggerHook', by_epoch=False)])\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = None\nresume_from = None\nworkflow = [('train', 1)]\ncudnn_benchmark = True\noptimizer = dict(type='SGD', lr=0.01, momentum=0.9, weight_decay=0.0005)\noptimizer_config = dict()\nlr_config = dict(policy='poly', power=0.9, min_lr=0.0001, by_epoch=False)\nrunner = dict(type='IterBasedRunner', max_iters=2000)\ncheckpoint_config = dict(by_epoch=False, interval=8000)\nevaluation = dict(interval=8000, metric='mIoU')\nwork_dir = 'work_dirs_2node_8gpu/fcn_r50-d8_512x1024_2k_cityscapes'\ngpu_ids = range(0, 1)\nseed = None\n", "CLASSES": ["road", "sidewalk", "building", "wall", "fence", "pole", "traffic light", "traffic sign", "vegetation", "terrain", "sky", "person", "rider", "car", "truck", "bus", "train", "motorcycle", "bicycle"], "PALETTE": [[128, 64, 128], [244, 35, 232], [70, 70, 70], [102, 102, 156], [190, 153, 153], [153, 153, 153], [250, 170, 30], [220, 220, 0], [107, 142, 35], [152, 251, 152], [70, 130, 180], [220, 20, 60], [255, 0, 0], [0, 0, 142], [0, 0, 70], [0, 60, 100], [0, 80, 100], [0, 0, 230], [119, 11, 32]]}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 0.00978, "memory": 18774, "data_time": 0.05923, "decode.loss_seg": 1.41344, "decode.acc_seg": 55.98439, "aux.loss_seg": 0.73339, "aux.acc_seg": 42.23823, "loss": 2.14683, "time": 1.22645}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 0.00956, "memory": 18774, "data_time": 0.0259, "decode.loss_seg": 0.72869, "decode.acc_seg": 74.03502, "aux.loss_seg": 0.4158, "aux.acc_seg": 66.68939, "loss": 1.14448, "time": 0.75044}
{"mode": "train", "epoch": 1, "iter": 150, "lr": 0.00933, "memory": 18774, "data_time": 0.01961, "decode.loss_seg": 0.60025, "decode.acc_seg": 77.9791, "aux.loss_seg": 0.3377, "aux.acc_seg": 72.33485, "loss": 0.93795, "time": 0.77131}
{"mode": "train", "epoch": 2, "iter": 200, "lr": 0.00911, "memory": 18774, "data_time": 0.03698, "decode.loss_seg": 0.51848, "decode.acc_seg": 78.58321, "aux.loss_seg": 0.27839, "aux.acc_seg": 75.15248, "loss": 0.79686, "time": 0.75766}
{"mode": "train", "epoch": 2, "iter": 250, "lr": 0.00888, "memory": 18774, "data_time": 0.02395, "decode.loss_seg": 0.45777, "decode.acc_seg": 80.77006, "aux.loss_seg": 0.254, "aux.acc_seg": 77.33891, "loss": 0.71176, "time": 0.75555}
{"mode": "train", "epoch": 2, "iter": 300, "lr": 0.00866, "memory": 18774, "data_time": 0.01583, "decode.loss_seg": 0.46866, "decode.acc_seg": 80.59201, "aux.loss_seg": 0.25334, "aux.acc_seg": 77.43037, "loss": 0.72199, "time": 0.87075}
{"mode": "train", "epoch": 2, "iter": 350, "lr": 0.00843, "memory": 18774, "data_time": 0.01949, "decode.loss_seg": 0.41427, "decode.acc_seg": 82.00491, "aux.loss_seg": 0.22659, "aux.acc_seg": 78.89672, "loss": 0.64086, "time": 0.90684}
{"mode": "train", "epoch": 3, "iter": 400, "lr": 0.0082, "memory": 18774, "data_time": 0.05789, "decode.loss_seg": 0.38466, "decode.acc_seg": 82.15179, "aux.loss_seg": 0.2133, "aux.acc_seg": 79.24154, "loss": 0.59795, "time": 0.85134}
{"mode": "train", "epoch": 3, "iter": 450, "lr": 0.00798, "memory": 18774, "data_time": 0.01489, "decode.loss_seg": 0.38343, "decode.acc_seg": 82.80618, "aux.loss_seg": 0.21864, "aux.acc_seg": 79.65092, "loss": 0.60207, "time": 0.80087}
{"mode": "train", "epoch": 3, "iter": 500, "lr": 0.00775, "memory": 18774, "data_time": 0.03674, "decode.loss_seg": 0.38621, "decode.acc_seg": 81.93566, "aux.loss_seg": 0.21281, "aux.acc_seg": 78.97394, "loss": 0.59902, "time": 1.09085}
{"mode": "train", "epoch": 3, "iter": 550, "lr": 0.00752, "memory": 18774, "data_time": 0.01345, "decode.loss_seg": 0.36608, "decode.acc_seg": 82.96378, "aux.loss_seg": 0.2044, "aux.acc_seg": 80.0167, "loss": 0.57048, "time": 0.74527}
{"mode": "train", "epoch": 4, "iter": 600, "lr": 0.00729, "memory": 18774, "data_time": 0.03299, "decode.loss_seg": 0.34159, "decode.acc_seg": 83.23993, "aux.loss_seg": 0.1958, "aux.acc_seg": 79.92579, "loss": 0.53739, "time": 0.92148}
{"mode": "train", "epoch": 4, "iter": 650, "lr": 0.00706, "memory": 18774, "data_time": 0.02439, "decode.loss_seg": 0.34217, "decode.acc_seg": 83.62339, "aux.loss_seg": 0.18969, "aux.acc_seg": 80.96201, "loss": 0.53186, "time": 0.7945}
{"mode": "train", "epoch": 4, "iter": 700, "lr": 0.00682, "memory": 18774, "data_time": 0.015, "decode.loss_seg": 0.35325, "decode.acc_seg": 83.20137, "aux.loss_seg": 0.19762, "aux.acc_seg": 80.38966, "loss": 0.55086, "time": 0.84149}
{"mode": "train", "epoch": 5, "iter": 750, "lr": 0.00659, "memory": 18774, "data_time": 0.02586, "decode.loss_seg": 0.3344, "decode.acc_seg": 83.53679, "aux.loss_seg": 0.18721, "aux.acc_seg": 80.78519, "loss": 0.52161, "time": 0.74423}
{"mode": "train", "epoch": 5, "iter": 800, "lr": 0.00636, "memory": 18774, "data_time": 0.01182, "decode.loss_seg": 0.332, "decode.acc_seg": 83.67592, "aux.loss_seg": 0.18279, "aux.acc_seg": 81.04462, "loss": 0.51479, "time": 0.85499}
{"mode": "train", "epoch": 5, "iter": 850, "lr": 0.00612, "memory": 18774, "data_time": 0.02108, "decode.loss_seg": 0.31336, "decode.acc_seg": 84.45317, "aux.loss_seg": 0.17237, "aux.acc_seg": 82.08588, "loss": 0.48573, "time": 0.85894}
{"mode": "train", "epoch": 5, "iter": 900, "lr": 0.00589, "memory": 18774, "data_time": 0.0211, "decode.loss_seg": 0.32036, "decode.acc_seg": 83.65842, "aux.loss_seg": 0.1756, "aux.acc_seg": 81.31476, "loss": 0.49595, "time": 1.02021}
{"mode": "train", "epoch": 6, "iter": 950, "lr": 0.00565, "memory": 18774, "data_time": 0.05345, "decode.loss_seg": 0.32477, "decode.acc_seg": 84.1106, "aux.loss_seg": 0.17781, "aux.acc_seg": 81.51206, "loss": 0.50259, "time": 0.80067}
{"mode": "train", "epoch": 6, "iter": 1000, "lr": 0.00541, "memory": 18774, "data_time": 0.04303, "decode.loss_seg": 0.31457, "decode.acc_seg": 84.15742, "aux.loss_seg": 0.17641, "aux.acc_seg": 81.41731, "loss": 0.49098, "time": 0.78037}
{"mode": "train", "epoch": 6, "iter": 1050, "lr": 0.00517, "memory": 18774, "data_time": 0.01534, "decode.loss_seg": 0.28423, "decode.acc_seg": 85.73115, "aux.loss_seg": 0.1582, "aux.acc_seg": 83.27021, "loss": 0.44243, "time": 0.8683}
{"mode": "train", "epoch": 6, "iter": 1100, "lr": 0.00493, "memory": 18774, "data_time": 0.03792, "decode.loss_seg": 0.30265, "decode.acc_seg": 84.77152, "aux.loss_seg": 0.16729, "aux.acc_seg": 82.11383, "loss": 0.46995, "time": 0.84208}
{"mode": "train", "epoch": 7, "iter": 1150, "lr": 0.00469, "memory": 18774, "data_time": 0.02299, "decode.loss_seg": 0.29705, "decode.acc_seg": 84.81558, "aux.loss_seg": 0.16319, "aux.acc_seg": 82.24903, "loss": 0.46023, "time": 0.70669}
{"mode": "train", "epoch": 7, "iter": 1200, "lr": 0.00444, "memory": 18774, "data_time": 0.02147, "decode.loss_seg": 0.27525, "decode.acc_seg": 85.61833, "aux.loss_seg": 0.15567, "aux.acc_seg": 83.16438, "loss": 0.43091, "time": 0.79495}
{"mode": "train", "epoch": 7, "iter": 1250, "lr": 0.0042, "memory": 18774, "data_time": 0.01662, "decode.loss_seg": 0.285, "decode.acc_seg": 84.90693, "aux.loss_seg": 0.15948, "aux.acc_seg": 82.42118, "loss": 0.44448, "time": 0.92405}
{"mode": "train", "epoch": 7, "iter": 1300, "lr": 0.00395, "memory": 18774, "data_time": 0.02593, "decode.loss_seg": 0.30757, "decode.acc_seg": 84.50461, "aux.loss_seg": 0.17172, "aux.acc_seg": 81.88564, "loss": 0.4793, "time": 0.80377}
{"mode": "train", "epoch": 8, "iter": 1350, "lr": 0.00371, "memory": 18774, "data_time": 0.0261, "decode.loss_seg": 0.28501, "decode.acc_seg": 85.14138, "aux.loss_seg": 0.16017, "aux.acc_seg": 82.4703, "loss": 0.44518, "time": 0.65535}
{"mode": "train", "epoch": 8, "iter": 1400, "lr": 0.00346, "memory": 18774, "data_time": 0.01623, "decode.loss_seg": 0.29153, "decode.acc_seg": 84.94069, "aux.loss_seg": 0.16348, "aux.acc_seg": 82.36927, "loss": 0.45501, "time": 0.68987}
{"mode": "train", "epoch": 8, "iter": 1450, "lr": 0.0032, "memory": 18774, "data_time": 0.02173, "decode.loss_seg": 0.26734, "decode.acc_seg": 85.30503, "aux.loss_seg": 0.15032, "aux.acc_seg": 82.93965, "loss": 0.41766, "time": 0.64995}
{"mode": "train", "epoch": 9, "iter": 1500, "lr": 0.00295, "memory": 18774, "data_time": 0.04691, "decode.loss_seg": 0.27601, "decode.acc_seg": 85.73944, "aux.loss_seg": 0.15428, "aux.acc_seg": 83.17092, "loss": 0.4303, "time": 0.57873}
{"mode": "train", "epoch": 9, "iter": 1550, "lr": 0.00269, "memory": 18774, "data_time": 0.01398, "decode.loss_seg": 0.27408, "decode.acc_seg": 84.8506, "aux.loss_seg": 0.15542, "aux.acc_seg": 82.3557, "loss": 0.42949, "time": 0.78867}
{"mode": "train", "epoch": 9, "iter": 1600, "lr": 0.00243, "memory": 18774, "data_time": 0.01317, "decode.loss_seg": 0.26571, "decode.acc_seg": 85.49063, "aux.loss_seg": 0.15079, "aux.acc_seg": 82.86969, "loss": 0.41649, "time": 0.52999}
{"mode": "train", "epoch": 9, "iter": 1650, "lr": 0.00217, "memory": 18774, "data_time": 0.03516, "decode.loss_seg": 0.26744, "decode.acc_seg": 85.46781, "aux.loss_seg": 0.15243, "aux.acc_seg": 82.85773, "loss": 0.41988, "time": 0.54133}
{"mode": "train", "epoch": 10, "iter": 1700, "lr": 0.0019, "memory": 18774, "data_time": 0.03473, "decode.loss_seg": 0.26428, "decode.acc_seg": 85.7084, "aux.loss_seg": 0.15094, "aux.acc_seg": 83.12944, "loss": 0.41522, "time": 0.57}
{"mode": "train", "epoch": 10, "iter": 1750, "lr": 0.00163, "memory": 18774, "data_time": 0.02695, "decode.loss_seg": 0.27335, "decode.acc_seg": 85.61095, "aux.loss_seg": 0.15733, "aux.acc_seg": 82.78444, "loss": 0.43068, "time": 0.8043}
{"mode": "train", "epoch": 10, "iter": 1800, "lr": 0.00135, "memory": 18774, "data_time": 0.01426, "decode.loss_seg": 0.26087, "decode.acc_seg": 85.43111, "aux.loss_seg": 0.15105, "aux.acc_seg": 82.69953, "loss": 0.41193, "time": 0.56039}
{"mode": "train", "epoch": 10, "iter": 1850, "lr": 0.00107, "memory": 18774, "data_time": 0.02416, "decode.loss_seg": 0.26039, "decode.acc_seg": 85.41929, "aux.loss_seg": 0.14731, "aux.acc_seg": 82.92999, "loss": 0.4077, "time": 0.82199}
{"mode": "train", "epoch": 11, "iter": 1900, "lr": 0.00077, "memory": 18774, "data_time": 0.03892, "decode.loss_seg": 0.26791, "decode.acc_seg": 85.789, "aux.loss_seg": 0.15378, "aux.acc_seg": 83.04445, "loss": 0.42169, "time": 0.56689}
{"mode": "train", "epoch": 11, "iter": 1950, "lr": 0.00046, "memory": 18774, "data_time": 0.01712, "decode.loss_seg": 0.25478, "decode.acc_seg": 85.41711, "aux.loss_seg": 0.14762, "aux.acc_seg": 82.63096, "loss": 0.4024, "time": 0.65534}
{"mode": "train", "epoch": 11, "iter": 2000, "lr": 0.00011, "memory": 18774, "data_time": 0.02764, "decode.loss_seg": 0.24755, "decode.acc_seg": 86.56529, "aux.loss_seg": 0.1425, "aux.acc_seg": 84.04245, "loss": 0.39006, "time": 0.67433}
