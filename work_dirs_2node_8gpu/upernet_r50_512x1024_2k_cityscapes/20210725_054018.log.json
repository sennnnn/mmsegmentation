{"env_info": "sys.platform: linux\nPython: 3.7.10 (default, Feb 26 2021, 18:47:35) [GCC 7.3.0]\nCUDA available: True\nGPU 0,1,2,3: Tesla V100-SXM2-32GB\nCUDA_HOME: /mnt/cache/share/polaris/dep/cuda-10.1-cudnn7.6.5\nNVCC: Cuda compilation tools, release 10.1, V10.1.243\nGCC: gcc (GCC) 5.4.0\nPyTorch: 1.8.0\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) Math Kernel Library Version 2020.0.2 Product Build 20200624 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v1.7.0 (Git Hash 7aed236906b1f7a05c0917e5257a1af05e9ff683)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 10.1\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_37,code=compute_37\n  - CuDNN 7.6.3\n  - Magma 2.5.2\n  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=10.1, CUDNN_VERSION=7.6.3, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.8.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, \n\nTorchVision: 0.9.0\nOpenCV: 4.5.1\nMMCV: 1.3.8\nMMCV Compiler: GCC 7.3\nMMCV CUDA Compiler: 10.1\nMMSegmentation: 0.15.0+99bc5c0", "seed": null, "exp_name": "upernet_r50_512x1024_2k_cityscapes.py", "mmseg_version": "0.15.0+99bc5c0", "config": "norm_cfg = dict(type='SyncBN', requires_grad=True)\nmodel = dict(\n    type='EncoderDecoder',\n    pretrained='open-mmlab://resnet50_v1c',\n    backbone=dict(\n        type='ResNetV1c',\n        depth=50,\n        num_stages=4,\n        out_indices=(0, 1, 2, 3),\n        dilations=(1, 1, 1, 1),\n        strides=(1, 2, 2, 2),\n        norm_cfg=dict(type='SyncBN', requires_grad=True),\n        norm_eval=False,\n        style='pytorch',\n        contract_dilation=True,\n        pretrained='open-mmlab://resnet50_v1c'),\n    decode_head=dict(\n        type='UPerHead',\n        in_channels=[256, 512, 1024, 2048],\n        in_index=[0, 1, 2, 3],\n        pool_scales=(1, 2, 3, 6),\n        channels=512,\n        dropout_ratio=0.1,\n        num_classes=19,\n        norm_cfg=dict(type='SyncBN', requires_grad=True),\n        align_corners=False,\n        loss_decode=dict(\n            type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0)),\n    auxiliary_head=dict(\n        type='FCNHead',\n        in_channels=1024,\n        in_index=2,\n        channels=256,\n        num_convs=1,\n        concat_input=False,\n        dropout_ratio=0.1,\n        num_classes=19,\n        norm_cfg=dict(type='SyncBN', requires_grad=True),\n        align_corners=False,\n        loss_decode=dict(\n            type='CrossEntropyLoss', use_sigmoid=False, loss_weight=0.4)),\n    train_cfg=dict(),\n    test_cfg=dict(mode='whole'))\ndataset_type = 'CityscapesDataset'\ndata_root = 'data/cityscapes/'\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ncrop_size = (512, 1024)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations'),\n    dict(type='Resize', img_scale=(2048, 1024), ratio_range=(0.5, 2.0)),\n    dict(type='RandomCrop', crop_size=(512, 1024), cat_max_ratio=0.75),\n    dict(type='RandomFlip', prob=0.5),\n    dict(type='PhotoMetricDistortion'),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='Pad', size=(512, 1024), pad_val=0, seg_pad_val=255),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_semantic_seg'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(2048, 1024),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=2,\n    workers_per_gpu=2,\n    train=dict(\n        type='CityscapesDataset',\n        data_root='data/cityscapes/',\n        img_dir='leftImg8bit/train',\n        ann_dir='gtFine/train',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations'),\n            dict(\n                type='Resize', img_scale=(2048, 1024), ratio_range=(0.5, 2.0)),\n            dict(type='RandomCrop', crop_size=(512, 1024), cat_max_ratio=0.75),\n            dict(type='RandomFlip', prob=0.5),\n            dict(type='PhotoMetricDistortion'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size=(512, 1024), pad_val=0, seg_pad_val=255),\n            dict(type='DefaultFormatBundle'),\n            dict(type='Collect', keys=['img', 'gt_semantic_seg'])\n        ]),\n    val=dict(\n        type='CityscapesDataset',\n        data_root='data/cityscapes/',\n        img_dir='leftImg8bit/val',\n        ann_dir='gtFine/val',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(2048, 1024),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]),\n    test=dict(\n        type='CityscapesDataset',\n        data_root='data/cityscapes/',\n        img_dir='leftImg8bit/val',\n        ann_dir='gtFine/val',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(2048, 1024),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]))\nlog_config = dict(\n    interval=50, hooks=[dict(type='TextLoggerHook', by_epoch=False)])\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = None\nresume_from = None\nworkflow = [('train', 1)]\ncudnn_benchmark = True\noptimizer = dict(type='SGD', lr=0.01, momentum=0.9, weight_decay=0.0005)\noptimizer_config = dict()\nlr_config = dict(policy='poly', power=0.9, min_lr=0.0001, by_epoch=False)\nrunner = dict(type='IterBasedRunner', max_iters=2000)\ncheckpoint_config = dict(by_epoch=False, interval=8000)\nevaluation = dict(interval=8000, metric='mIoU')\nwork_dir = 'work_dirs_2node_8gpu/upernet_r50_512x1024_2k_cityscapes'\ngpu_ids = range(0, 1)\nseed = None\n", "CLASSES": ["road", "sidewalk", "building", "wall", "fence", "pole", "traffic light", "traffic sign", "vegetation", "terrain", "sky", "person", "rider", "car", "truck", "bus", "train", "motorcycle", "bicycle"], "PALETTE": [[128, 64, 128], [244, 35, 232], [70, 70, 70], [102, 102, 156], [190, 153, 153], [153, 153, 153], [250, 170, 30], [220, 220, 0], [107, 142, 35], [152, 251, 152], [70, 130, 180], [220, 20, 60], [255, 0, 0], [0, 0, 142], [0, 0, 70], [0, 60, 100], [0, 80, 100], [0, 0, 230], [119, 11, 32]]}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 0.00978, "memory": 19973, "data_time": 0.07611, "decode.loss_seg": 1.30772, "decode.acc_seg": 58.92925, "aux.loss_seg": 0.74663, "aux.acc_seg": 43.83305, "loss": 2.05435, "time": 1.97044}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 0.00956, "memory": 19973, "data_time": 0.01457, "decode.loss_seg": 0.70137, "decode.acc_seg": 74.43547, "aux.loss_seg": 0.42242, "aux.acc_seg": 67.35057, "loss": 1.12379, "time": 0.67838}
{"mode": "train", "epoch": 1, "iter": 150, "lr": 0.00933, "memory": 19973, "data_time": 0.01367, "decode.loss_seg": 0.57311, "decode.acc_seg": 77.60987, "aux.loss_seg": 0.33883, "aux.acc_seg": 71.7622, "loss": 0.91194, "time": 0.46513}
{"mode": "train", "epoch": 2, "iter": 200, "lr": 0.00911, "memory": 19973, "data_time": 0.02672, "decode.loss_seg": 0.44985, "decode.acc_seg": 80.28991, "aux.loss_seg": 0.27546, "aux.acc_seg": 74.99006, "loss": 0.72531, "time": 0.59161}
{"mode": "train", "epoch": 2, "iter": 250, "lr": 0.00888, "memory": 19973, "data_time": 0.01631, "decode.loss_seg": 0.46341, "decode.acc_seg": 80.75267, "aux.loss_seg": 0.28154, "aux.acc_seg": 75.75794, "loss": 0.74496, "time": 0.57261}
{"mode": "train", "epoch": 2, "iter": 300, "lr": 0.00866, "memory": 19973, "data_time": 0.01786, "decode.loss_seg": 0.4248, "decode.acc_seg": 81.65554, "aux.loss_seg": 0.25832, "aux.acc_seg": 77.0224, "loss": 0.68312, "time": 0.65857}
{"mode": "train", "epoch": 2, "iter": 350, "lr": 0.00843, "memory": 19973, "data_time": 0.03231, "decode.loss_seg": 0.39979, "decode.acc_seg": 82.48346, "aux.loss_seg": 0.24463, "aux.acc_seg": 77.75549, "loss": 0.64442, "time": 0.78057}
{"mode": "train", "epoch": 3, "iter": 400, "lr": 0.0082, "memory": 19973, "data_time": 0.03915, "decode.loss_seg": 0.36934, "decode.acc_seg": 82.24945, "aux.loss_seg": 0.2327, "aux.acc_seg": 77.70709, "loss": 0.60204, "time": 0.56906}
{"mode": "train", "epoch": 3, "iter": 450, "lr": 0.00798, "memory": 19973, "data_time": 0.02426, "decode.loss_seg": 0.33706, "decode.acc_seg": 83.64878, "aux.loss_seg": 0.21806, "aux.acc_seg": 79.07947, "loss": 0.55512, "time": 0.72453}
{"mode": "train", "epoch": 3, "iter": 500, "lr": 0.00775, "memory": 19973, "data_time": 0.01418, "decode.loss_seg": 0.34799, "decode.acc_seg": 83.10799, "aux.loss_seg": 0.2172, "aux.acc_seg": 78.74171, "loss": 0.56518, "time": 0.53447}
{"mode": "train", "epoch": 3, "iter": 550, "lr": 0.00752, "memory": 19973, "data_time": 0.02696, "decode.loss_seg": 0.34922, "decode.acc_seg": 83.42076, "aux.loss_seg": 0.222, "aux.acc_seg": 78.9114, "loss": 0.57121, "time": 0.7345}
{"mode": "train", "epoch": 4, "iter": 600, "lr": 0.00729, "memory": 19973, "data_time": 0.03133, "decode.loss_seg": 0.3052, "decode.acc_seg": 83.89137, "aux.loss_seg": 0.1956, "aux.acc_seg": 79.57851, "loss": 0.50081, "time": 0.65187}
{"mode": "train", "epoch": 4, "iter": 650, "lr": 0.00706, "memory": 19973, "data_time": 0.01145, "decode.loss_seg": 0.31518, "decode.acc_seg": 84.28042, "aux.loss_seg": 0.2012, "aux.acc_seg": 80.18917, "loss": 0.51637, "time": 0.60724}
{"mode": "train", "epoch": 4, "iter": 700, "lr": 0.00682, "memory": 19973, "data_time": 0.01557, "decode.loss_seg": 0.31863, "decode.acc_seg": 84.32249, "aux.loss_seg": 0.19812, "aux.acc_seg": 80.1587, "loss": 0.51675, "time": 0.56958}
{"mode": "train", "epoch": 5, "iter": 750, "lr": 0.00659, "memory": 19973, "data_time": 0.03574, "decode.loss_seg": 0.30598, "decode.acc_seg": 84.19579, "aux.loss_seg": 0.19522, "aux.acc_seg": 80.08393, "loss": 0.5012, "time": 0.72648}
{"mode": "train", "epoch": 5, "iter": 800, "lr": 0.00636, "memory": 19973, "data_time": 0.02792, "decode.loss_seg": 0.30572, "decode.acc_seg": 84.37332, "aux.loss_seg": 0.19225, "aux.acc_seg": 80.41272, "loss": 0.49797, "time": 1.01639}
{"mode": "train", "epoch": 5, "iter": 850, "lr": 0.00612, "memory": 19973, "data_time": 0.02491, "decode.loss_seg": 0.30674, "decode.acc_seg": 84.80334, "aux.loss_seg": 0.18992, "aux.acc_seg": 80.9981, "loss": 0.49666, "time": 0.61727}
{"mode": "train", "epoch": 5, "iter": 900, "lr": 0.00589, "memory": 19973, "data_time": 0.01855, "decode.loss_seg": 0.29408, "decode.acc_seg": 84.49349, "aux.loss_seg": 0.18189, "aux.acc_seg": 80.92937, "loss": 0.47597, "time": 1.04098}
{"mode": "train", "epoch": 6, "iter": 950, "lr": 0.00565, "memory": 19973, "data_time": 0.03576, "decode.loss_seg": 0.2965, "decode.acc_seg": 85.10032, "aux.loss_seg": 0.1882, "aux.acc_seg": 80.89505, "loss": 0.4847, "time": 0.62806}
{"mode": "train", "epoch": 6, "iter": 1000, "lr": 0.00541, "memory": 19973, "data_time": 0.02165, "decode.loss_seg": 0.26799, "decode.acc_seg": 85.20667, "aux.loss_seg": 0.1726, "aux.acc_seg": 81.28086, "loss": 0.44059, "time": 0.95891}
{"mode": "train", "epoch": 6, "iter": 1050, "lr": 0.00517, "memory": 19973, "data_time": 0.01234, "decode.loss_seg": 0.27363, "decode.acc_seg": 85.99053, "aux.loss_seg": 0.17259, "aux.acc_seg": 82.46245, "loss": 0.44622, "time": 0.48303}
{"mode": "train", "epoch": 6, "iter": 1100, "lr": 0.00493, "memory": 19973, "data_time": 0.01311, "decode.loss_seg": 0.27026, "decode.acc_seg": 85.30417, "aux.loss_seg": 0.17482, "aux.acc_seg": 81.23735, "loss": 0.44508, "time": 0.54824}
{"mode": "train", "epoch": 7, "iter": 1150, "lr": 0.00469, "memory": 19973, "data_time": 0.02878, "decode.loss_seg": 0.26435, "decode.acc_seg": 85.78895, "aux.loss_seg": 0.16913, "aux.acc_seg": 81.92682, "loss": 0.43347, "time": 0.55421}
{"mode": "train", "epoch": 7, "iter": 1200, "lr": 0.00444, "memory": 19973, "data_time": 0.02049, "decode.loss_seg": 0.27389, "decode.acc_seg": 85.8333, "aux.loss_seg": 0.17087, "aux.acc_seg": 82.17482, "loss": 0.44475, "time": 0.55566}
{"mode": "train", "epoch": 7, "iter": 1250, "lr": 0.0042, "memory": 19973, "data_time": 0.01465, "decode.loss_seg": 0.26646, "decode.acc_seg": 85.50785, "aux.loss_seg": 0.16897, "aux.acc_seg": 81.70083, "loss": 0.43543, "time": 0.58234}
{"mode": "train", "epoch": 7, "iter": 1300, "lr": 0.00395, "memory": 19973, "data_time": 0.02001, "decode.loss_seg": 0.26294, "decode.acc_seg": 85.69248, "aux.loss_seg": 0.16916, "aux.acc_seg": 81.86824, "loss": 0.4321, "time": 0.56803}
{"mode": "train", "epoch": 8, "iter": 1350, "lr": 0.00371, "memory": 19973, "data_time": 0.0492, "decode.loss_seg": 0.26894, "decode.acc_seg": 85.91068, "aux.loss_seg": 0.16772, "aux.acc_seg": 82.09778, "loss": 0.43666, "time": 0.73069}
{"mode": "train", "epoch": 8, "iter": 1400, "lr": 0.00346, "memory": 19973, "data_time": 0.01468, "decode.loss_seg": 0.26488, "decode.acc_seg": 85.35063, "aux.loss_seg": 0.17021, "aux.acc_seg": 81.50514, "loss": 0.4351, "time": 0.64981}
{"mode": "train", "epoch": 8, "iter": 1450, "lr": 0.0032, "memory": 19973, "data_time": 0.01874, "decode.loss_seg": 0.26421, "decode.acc_seg": 85.35812, "aux.loss_seg": 0.16716, "aux.acc_seg": 81.59984, "loss": 0.43137, "time": 0.59565}
{"mode": "train", "epoch": 9, "iter": 1500, "lr": 0.00295, "memory": 19973, "data_time": 0.04543, "decode.loss_seg": 0.24609, "decode.acc_seg": 86.95018, "aux.loss_seg": 0.16005, "aux.acc_seg": 82.97519, "loss": 0.40613, "time": 0.63622}
{"mode": "train", "epoch": 9, "iter": 1550, "lr": 0.00269, "memory": 19973, "data_time": 0.01823, "decode.loss_seg": 0.25015, "decode.acc_seg": 85.98557, "aux.loss_seg": 0.16406, "aux.acc_seg": 81.9867, "loss": 0.4142, "time": 0.57383}
{"mode": "train", "epoch": 9, "iter": 1600, "lr": 0.00243, "memory": 19973, "data_time": 0.01449, "decode.loss_seg": 0.25929, "decode.acc_seg": 85.92153, "aux.loss_seg": 0.16633, "aux.acc_seg": 82.05382, "loss": 0.42562, "time": 0.51083}
{"mode": "train", "epoch": 9, "iter": 1650, "lr": 0.00217, "memory": 19973, "data_time": 0.01671, "decode.loss_seg": 0.24866, "decode.acc_seg": 85.88726, "aux.loss_seg": 0.16275, "aux.acc_seg": 82.01496, "loss": 0.41141, "time": 0.50272}
{"mode": "train", "epoch": 10, "iter": 1700, "lr": 0.0019, "memory": 19973, "data_time": 0.04615, "decode.loss_seg": 0.23266, "decode.acc_seg": 86.37432, "aux.loss_seg": 0.14943, "aux.acc_seg": 82.97363, "loss": 0.38209, "time": 0.6587}
{"mode": "train", "epoch": 10, "iter": 1750, "lr": 0.00163, "memory": 19973, "data_time": 0.02459, "decode.loss_seg": 0.25039, "decode.acc_seg": 86.13442, "aux.loss_seg": 0.16743, "aux.acc_seg": 81.93606, "loss": 0.41782, "time": 0.59935}
{"mode": "train", "epoch": 10, "iter": 1800, "lr": 0.00135, "memory": 19973, "data_time": 0.02695, "decode.loss_seg": 0.23542, "decode.acc_seg": 86.35253, "aux.loss_seg": 0.15749, "aux.acc_seg": 82.29851, "loss": 0.39291, "time": 0.54009}
{"mode": "train", "epoch": 10, "iter": 1850, "lr": 0.00107, "memory": 19973, "data_time": 0.0173, "decode.loss_seg": 0.2329, "decode.acc_seg": 86.42144, "aux.loss_seg": 0.14998, "aux.acc_seg": 82.81723, "loss": 0.38288, "time": 0.61754}
{"mode": "train", "epoch": 11, "iter": 1900, "lr": 0.00077, "memory": 19973, "data_time": 0.02445, "decode.loss_seg": 0.25366, "decode.acc_seg": 86.05112, "aux.loss_seg": 0.16731, "aux.acc_seg": 82.00071, "loss": 0.42097, "time": 0.58905}
{"mode": "train", "epoch": 11, "iter": 1950, "lr": 0.00046, "memory": 19973, "data_time": 0.02796, "decode.loss_seg": 0.2353, "decode.acc_seg": 86.24641, "aux.loss_seg": 0.15112, "aux.acc_seg": 82.70966, "loss": 0.38642, "time": 0.63735}
{"mode": "train", "epoch": 11, "iter": 2000, "lr": 0.00011, "memory": 19973, "data_time": 0.02435, "decode.loss_seg": 0.2446, "decode.acc_seg": 86.01794, "aux.loss_seg": 0.15673, "aux.acc_seg": 82.48337, "loss": 0.40134, "time": 0.53829}
